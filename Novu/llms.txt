# https://docs.novu.co/ llms-full.txt

## Novu Platform Overview
# Documentation

Novu is the platform for adding real-time Inbox and notifications into your application.

[Create an Account](https://dashboard-v2.novu.co/auth/sign-up)

[**Get started** \\
\\
Learn how to install and configure Novu into your Next.js project.](https://docs.novu.co/platform/quickstart/nextjs) [**The Basics** \\
\\
Learn about the basic concepts of Novu, including workflows, subscribers, etc...](https://docs.novu.co/platform/concepts/workflows)

[**<Inbox />** \\
\\
Learn about the inbox component and how to customize it.](https://docs.novu.co/platform/inbox/overview)

## API Reference

[REST API](https://docs.novu.co/api-reference/overview) [Typescript](https://docs.novu.co/platform/sdks/server/typescript) [Python](https://docs.novu.co/platform/sdks/server/python) [Go](https://docs.novu.co/platform/sdks/server/go) [PHP](https://docs.novu.co/platform/sdks/server/php) [Java](https://docs.novu.co/platform/sdks/server/java) [Laravel](https://docs.novu.co/platform/sdks/server/laravel) [.NET](https://docs.novu.co/platform/sdks/server/dotnet) [Ruby](https://docs.novu.co/platform/sdks/server/ruby) [Kotlin](https://docs.novu.co/platform/sdks/server/kotlin)

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/platform/overview.mdx)

[Next\\
\\
What is Novu?](https://docs.novu.co/platform/what-is-novu)

## Novu API Overview
# Novu REST API

In this page you can learn about how to work with Novu's API

It's important to note that our API and backend SDK are intended for use exclusively in
server-side applications. **Attempting to use them in a client-side application will result in**
**Cross-Origin Resource Sharing (CORS) errors.** This restriction ensures the security and integrity
of our services.

## [Authentication](https://docs.novu.co/api-reference/overview\#authentication)

Authentication for the Novu API involves the use of an API Key, which is a secure credential that is tied to your Novu account. This key should be included in the header of the request in the Authorization field as a string prefixed with 'ApiKey '.

```
--header 'Authorization: ApiKey <NOVU_SECRET_KEY>'
```

For example, when using Novu in a Node.js application, the Novu package should be imported and initialized with the API key, as shown in this snippet:

```
import { Novu } from '@novu/node';
const novu = new Novu('<NOVU_SECRET_KEY>');
```

Replace `<NOVU_SECRET_KEY>` with your actual API Key, available in the API Key section of the Novu Dashboard.

It is advised not to hardcode your credentials in a file in production environments. Use
environment variables instead.

## [API Endpoints](https://docs.novu.co/api-reference/overview\#api-endpoints)

Novu provides a multitude of API endpoints that enable a variety of functionalities. the base URL for the Novu API is `https://api.novu.co/v1`.

We offer two API options: the US API and the EU API. By default, our API documentation refers to the US API, which can be accessed at: [https://api.novu.co/v1](https://api.novu.co/v1).

If you require the EU version, you can access it here: [https://eu.api.novu.co/v1](https://eu.api.novu.co/v1).

For instance, to get tenant information, the endpoint to use would include the tenant's identifier and look like this `https://api.novu.co/v1/tenants/{identifier}`.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/overview.mdx)

[Next\\
\\
Rate Limiting](https://docs.novu.co/api-reference/rate-limiting)

### On this page

[Authentication](https://docs.novu.co/api-reference/overview#authentication) [API Endpoints](https://docs.novu.co/api-reference/overview#api-endpoints)

## Novu API Rate Limiting
# API Rate Limiting

In this page you can learn about how rate limiting works with Novu's API

Rate limiting is an essential functionality for establishing a robust and resilient system. It safeguards system resources from being misused by malicious actors or being monopolized by one client.

A variable-cost token bucket rate limited algorithm has been added to provide the capability for different API controllers and methods to have a varying cost. It also lays a foundation for dynamic costing of resource consumption.

## [Limits](https://docs.novu.co/api-reference/rate-limiting\#limits)

The following limits apply to each category of the Novu system. Each category has an independent bucket of request tokens to consume from.
Standard requests cost 1 request token and bulk requests cost 100 request tokens. Both standard and bulk requests consume from the same token pool.

Each category has a different limit of requests per second (RPS), with the endpoints in each category shown below.

| Category | Free | Pro | Business | Enterprise | Endpoints |
| --- | --- | --- | --- | --- | --- |
| Events | 60 RPS | 240 RPS | 600 RPS | 6K RPS | Trigger |
| Configuration | 20 RPS | 80 RPS | 200 RPS | 2k RPS | Subscribers, Topics, Tenants |
| Global | 30 RPS | 120 RPS | 300 RPS | 3K RPS | All other endpoints consume request tokens from this category. |

### [HTTP response headers](https://docs.novu.co/api-reference/rate-limiting\#http-response-headers)

When integrating with Novu API, it’s important to consider the rate limiting HTTP headers included in the response. These headers help you manage your API usage and avoid hitting rate limits.

```
RateLimit-Remaining: 219
RateLimit-Limit: 300
RateLimit-Reset: 2
RateLimit-Policy: 300;w=5;burst=330;comment="token bucket";category="trigger";cost="bulk";serviceLevel="free"
```

- `RateLimit-Remaining` \- Indicates the remaining number of request tokens in the current window.
- `RateLimit-Limit` \- Indicates the total number of request tokens available in the current window.
- `RateLimit-Reset` \- Indicates the number of seconds until the current window resets and the request token limit is fully replenished.
- `RateLimit-Policy` \- Defines the details of the applied rate limiting policy.
- `Retry-After` \- Specifies the number of seconds to wait before making another request.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/rate-limiting.mdx)

[Previous\\
\\
Overview](https://docs.novu.co/api-reference/overview) [Next\\
\\
Trigger eventPOST](https://docs.novu.co/api-reference/events/events-controller_trigger)

### On this page

[Limits](https://docs.novu.co/api-reference/rate-limiting#limits) [HTTP response headers](https://docs.novu.co/api-reference/rate-limiting#http-response-headers)

## 404 Error Page
# 404

## Page not found

Oops! The page you're looking for has vanished into the digital void. Don't worry though, our documentation is still here to help.

[Home](https://docs.novu.co/)[Go Back](javascript:throw new Error('React has blocked a javascript: URL as a security precaution.'))

Error Code: 404

## Novu Changelog
# Changelog

See the most recent changes and learn about how to shape Novu's future

[**Novu's Changelog** \\
\\
Learn about what's changed, new features, bug fixes, and see Novu's history across versions.](https://roadmap.novu.co/changelog)

Using the changelog, you can:

- Keep an eye on the latest updates,
- Learn more about the newly added features and improvements, and
- Stay informed about bug fixes and enhancement

## [Getting involved:](https://docs.novu.co/community/changelog\#getting-involved)

Community is at the heart of everything we do at Novu. To get more involved with the community, you can:

- **Fork and Contribute** to our open issues as well as suggest new ideas at our [github repository](https://github.com/novuhq/novu)
- **Join our community** to ask questions, engage with other users and share ideas. Here's the [joining link.](https://discord.gg/novu?ref=docs-join-our-community)
- **Participate in our office hours** to learn more and connect with our core team. Join us [here.](https://www.youtube.com/@novuhq/streams)

Remember, we're not building just another product, but a community of passionate developers who
shape its evolution. Our changelog isn't just a list of updates but a reflection of our journey
together. Your voice matters, and your ideas and feedback are what fuel our progress and shape our
future. So, join us in this adventure, and – Let's build something amazing, one feature at a time!

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/changelog.mdx)

### On this page

[Getting involved:](https://docs.novu.co/community/changelog#getting-involved)

## Novu Community Conduct
# Novu Community Code of conduct

The set of rules and guidelines that govern interaction among community members

As a community-driven company, Novu is committed to creating an inclusive and welcoming environment for all members, regardless of factors such as age, body size, disability, ethnicity, gender identity, experience level, education, socio-economic status, nationality, personal appearance, race, religion, or sexual orientation.

However, diverse communities may face challenges, such as potential misunderstandings and miscommunications. To ensure respectful interactions, free from behaviour that may create an unsafe environment, we have established this Code of Conduct.

These guidelines do not cover every possible scenario comprehensively but serve as a guiding light towards courteous interactions among community members, aligning with the overarching principle of avoiding unprofessional behaviour. This Code of Conduct applies to all events and participants, aiming to maintain a welcoming and healthy environment for our community.

Traits of a Novu community member include:

### [Being considerate and using appropriate channels](https://docs.novu.co/community/code-of-conduct\#being-considerate-and-using-appropriate-channels)

Contributions of every kind have far-ranging consequences. Just as your work depends on the work of others, decisions you make surrounding your contributions to the Novu community will affect your fellow community members. Use appropriate channels for what you're about to say and refrain from tagging a role that sends out a lot of pings. You are strongly encouraged to take those consequences into account while making decisions.

### [Adhering to these standards](https://docs.novu.co/community/code-of-conduct\#adhering-to-these-standards)

It's crucial to keep in mind that our community members are from all kinds of backgrounds, so the members are expected to:

- Demonstrate empathy and kindness toward other people
- Be respectful of differing opinions, viewpoints, and experiences
- Give and accept constructive feedback gracefully
- Accept responsibility and apologise to those affected by mistakes, and learn from such experiences
- Focus on what is best not just for us as individuals, but for the overall community!

### [Patience](https://docs.novu.co/community/code-of-conduct\#patience)

Our community thrives on the generosity of volunteered time. Questions, contributions, and support requests may embark on a time-travelling journey before finding their destination. Repeated "bumps" or persistent "reminders" don't display patience and are looked down upon. Lastly, it is a bad practice to ask general questions to a specific person (in direct messages for example). Try to ask in public as much as you can, and patiently wait for the response

### [Inclusivity, kindness and respectfulness](https://docs.novu.co/community/code-of-conduct\#inclusivity-kindness-and-respectfulness)

Please be courteous and respectful to fellow members. Avoid offensive comments related to age, body size, disability, ethnicity, gender identity, experience level, education, socio-economic status, nationality, personal appearance, race, religion, or sexual orientation.

Strictly prohibited are sexualized imagery, violence, intimidation, stalking, disruptions, sharing personal information without explicit permission, unwanted physical contact, and unwelcome sexual attention.

Use inclusive language respecting our community's diversity.

Avoid assumptions about others' backgrounds. Maintain a positive and professional demeanour, refraining from threatening or inappropriate behaviour.

**We have zero tolerance for discrimination**. Any form of discrimination, including harassment, will lead to immediate consequences, potentially expulsion.

### [Inquisitive](https://docs.novu.co/community/code-of-conduct\#inquisitive)

**_The only stupid question is the one that does not get asked_**.

We encourage our users to ask early and ask often. Rather than asking whether you can ask a question (the answer is always yes!), instead, simply ask your question. You are encouraged to provide as many specifics as possible.

Code snippets in the form of images are bad practice. Instead, use text formatted as code (using backticks) on Discord or simply send a gist. Refrain from pasting multiple lines of code directly into the chat channels - instead use [gist.github.com](http://gist.github.com/) or another paste site to provide code snippets.

### [Helpful](https://docs.novu.co/community/code-of-conduct\#helpful)

Novu welcomes users of all skill levels. We were all beginners once, and a supportive environment is essential for the community to thrive. While it can be repetitive to answer the same questions, members are expected to be courteous and helpful to everyone.

Avoid sarcastic responses and prioritize useful information. Everyone should read the provided documentation. We're here to answer questions, offer guidance, and suggest workflows, but not to do your job for you.

### [Anti-harassment policy](https://docs.novu.co/community/code-of-conduct\#anti-harassment-policy)

Harassment includes (but is not limited to) all of the following behaviors:

- Offensive comments related to gender (including gender expression and identity), age, sexual orientation, disability, physical appearance, body size, race, and religion.
- Derogatory terminology including words commonly known to be slurs
- Posting sexualized images or imagery in public spaces
- Deliberate intimidation
- Stalking
- Posting others' personal information without explicit permission
- Sustained disruption of talks or other events
- Inappropriate physical contact
- Unwelcome sexual attention

Immediate compliance is expected from participants asked to cease harassing behaviour. Sponsors must adhere to the anti-harassment policy, refraining from using sexualized images or creating a sexualized environment at events. Volunteer organizers, including meetup staff, should also avoid sexualized attire.

Continuing inappropriate behaviour after being asked to stop constitutes harassment, even if not explicitly mentioned in this policy. It is respectful to stop doing something when asked to do so, and all community members are expected to promptly comply with such requests.

### [Reporting policy violations](https://docs.novu.co/community/code-of-conduct\#reporting-policy-violations)

Instances of abusive, harassing, or otherwise unacceptable behaviour may be reported to anyone with administrative power in the community (Admins or Moderators on Discord, members of the 'DevRel' role), or to the local organizers of an event or to [support@novu.co](mailto:support@novu.co). Meetup organizers are encouraged to prominently display points of contact for reporting unacceptable behaviour at local events.

If a participant engages in harassing behaviour, the meetup organizers may take any action they deem appropriate. These actions may include but are not limited to warning the offender, expelling the offender from the event, and barring the offender from future community events.

Organizers will be happy to help participants contact security or local law enforcement, provide escorts to an alternate location, or otherwise assist those experiencing harassment to feel safe during the meetup. We value the safety and well-being of our community members and want everyone to feel welcome at our events, both online and offline.

We expect all participants, organizers, speakers, and attendees to follow these policies at all of our event venues and event-related social events.

### [Enforcement Guidelines](https://docs.novu.co/community/code-of-conduct\#enforcement-guidelines)

Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:

1. **Correction**

- `Community Impact`: Use of inappropriate language or other behaviour deemed unprofessional or unwelcome in the community.
- `Consequence`: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behaviour was inappropriate. A public apology may be requested.

2. **Warning**

- `Community Impact`: A violation through a single incident or series of actions.
- `Consequence`: A warning with consequences for continued behaviour. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.

3. **Temporary Ban**

- `Community Impact`: A serious violation of community standards, including sustained inappropriate behaviour.
- `Consequence`: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.

4. **Permanent Ban**

- `Community Impact`: Demonstrating a pattern of violation of community standards, including sustained inappropriate behaviour, harassment of an individual, or aggression toward or disparagement of classes of individuals.
- `Consequence`: A permanent ban from any sort of public interaction within the community.

The Novu Community Code of Conduct is licensed under the Creative Commons Attribution-Share Alike 3.0 license.

Our Code of Conduct was adapted from Codes of Conduct of other open-source projects, including:

- **Contributor Covenant**
- **Elastic**
- **The Fedora Project**
- **OpenStack**
- **Ansible**
- **Puppet Labs**
- **Ubuntu**

Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.

For answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq](https://www.contributor-covenant.org/faq).

Translations are available at [https://www.contributor-covenant.org/translations](https://www.contributor-covenant.org/translations).

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/code-of-conduct.mdx)

[Previous\\
\\
Get Involved](https://docs.novu.co/community/get-involved) [Next\\
\\
Roadmap](https://docs.novu.co/community/roadmap)

### On this page

[Being considerate and using appropriate channels](https://docs.novu.co/community/code-of-conduct#being-considerate-and-using-appropriate-channels) [Adhering to these standards](https://docs.novu.co/community/code-of-conduct#adhering-to-these-standards) [Patience](https://docs.novu.co/community/code-of-conduct#patience) [Inclusivity, kindness and respectfulness](https://docs.novu.co/community/code-of-conduct#inclusivity-kindness-and-respectfulness) [Inquisitive](https://docs.novu.co/community/code-of-conduct#inquisitive) [Helpful](https://docs.novu.co/community/code-of-conduct#helpful) [Anti-harassment policy](https://docs.novu.co/community/code-of-conduct#anti-harassment-policy) [Reporting policy violations](https://docs.novu.co/community/code-of-conduct#reporting-policy-violations) [Enforcement Guidelines](https://docs.novu.co/community/code-of-conduct#enforcement-guidelines)

## Feature Flags Guide
# Feature Flags

Learn how to enable/disable specific features in Novu

Feature flags allow to turn certain functionality on and off based on configuration. In this way, users can preview beta features in their deployments.

To enable the specific feature, you need to pass an environment variable to all services:

Feature flag environment variable accepts boolean values: `true` or `false`.

- `IS_MULTI_PROVIDER_CONFIGURATION_ENABLED` adds ability to connect multiple providers per channel and make them active. It also shows redesigned integrations store page.
![Redesigned Integrations store page](https://docs.novu.co/images/community/feature-flags/multi-provider-feature.png)Redesigned Integrations store page.
- `IS_MULTI_TENANCY_ENABLED` adds ability to manage tenants from dashboard.
![Tenants page](https://docs.novu.co/images/community/feature-flags/tenants-feature.png)Once multi-tenancy is enabled, the Tenants page will appear.
- `IS_TEMPLATE_STORE_ENABLED` enables template store which contains pre-made workflows for common use cases (like **Password Reset** workflow etc).
![Template store](https://docs.novu.co/images/community/feature-flags/template-store-feature.png)With template store enabled, you can choose from pre-made workflows.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/feature-flags.mdx)

## Join the Novu Community
# Get involved with the Novu Community

Your guide for engaging with the Novu Community

## [Our Community](https://docs.novu.co/community/get-involved\#our-community)

At Novu, we're a vibrant, open-source community driven by passion, collaboration, and a shared love for pushing boundaries. We believe in the power of community-driven development, where every voice matters and every contribution counts. As such, contributions are at the heart of how we evolve and progress forward.

## [Join the conversation](https://docs.novu.co/community/get-involved\#join-the-conversation)

- Read our [code of conduct](https://docs.novu.co/community/code-of-conduct)
- Say "Hi!" in our [Discord Server](https://discord.gg/novu?ref=docs-community-introduction)
- Explore our [open issues](https://github.com/novuhq/novu/issues)
- Subscribe to our newsletter [to stay in the know](https://novu.co/novu-community-2-0/?utm_campaign=docs-comm2-get-involved)

## [Getting help](https://docs.novu.co/community/get-involved\#getting-help)

Our fellow community members are always ready to help you get past a blocker. However, you can take a few things into consideration to help them help you:

- Share as many details as you can share. It will help us in debugging the issue.
- If there is any bug, please share steps to reproduce that bug.
- If there is any issue in running Novu on a local machine, please share system details like operating system, RAM size, npm version and node version.
- If there is any issue in our backend SDKs, please mention the SDK version and relevant details.
- If looking for self-hosting support, please share `Novu Version` and remote server details. Our latest version is `0.24.0`. Please be patient with self-hosting help. We are a small team and we will try our best to help you.

Use Discord #community-self-host channel for questions related to self hosting.

## [Contributing](https://docs.novu.co/community/get-involved\#contributing)

All community members are of one of the following four types:

1. Open source users
2. Active member
3. Power member
4. Novu Ambassador

### [Become an active community member](https://docs.novu.co/community/get-involved\#become-an-active-community-member)

- Everyone who joins our community becomes an open-source user automatically.
- You can become an active community member by:
  - Submitting >2 PRs
  - Opening >2 issues
  - Sending >5 messages on Github
  - Commenting >3 times on Github
- Active community members are one step closer to becoming Power community members and then an active moderator.

### [Become a power community member](https://docs.novu.co/community/get-involved\#become-a-power-community-member)

- All active community members are eligible to become a power community member and can become so by having at least one of the following:
  - Submitting 3 PRs
  - Opening 3 Issues
  - Sending 10 Discord messages
  - Commenting >10 times on Github
- Power community members are just one step away from becoming a Novu ambassador.

### [Become a Novu Ambassador](https://docs.novu.co/community/get-involved\#become-a-novu-ambassador)

A Novu ambassador is a trusted power member of the community that can do the following:

- Love exploring and sharing their knowledge of any technology with other developers.
- Often write and speak about Novu.
- Possess strong Novu expertise and often help and support Novu users within the community.
- Socially influence developers with some knowledge of Novu.
- Consistently contribute to Novu OSS product.

We are launching the Novu Ambassador program soon with amazing perks. Stay tuned!

## [Activities](https://docs.novu.co/community/get-involved\#activities)

Are you passionate about notifications like we are? There are many different—and easy—ways to get involved.

### [Help in onboarding and answering questions.](https://docs.novu.co/community/get-involved\#help-in-onboarding-and-answering-questions)

- Welcome new users into the community
- Answer questions in the [community support channel](https://discord.com/channels/895029566685462578/1019663407915483176).
- Offer input and opinions about various solutions you have tried.

### [Improve our documentation](https://docs.novu.co/community/get-involved\#improve-our-documentation)

- Check out our [GitHub repo](https://github.com/novuhq/docs)
- No documentation is perfect, and neither is ours
- Help us improve our docs by
  - Updating outdated examples
  - Correcting typos and language for clarity
  - Find and fix broken links, etc.

### [Help with the SDKs](https://docs.novu.co/community/get-involved\#help-with-the-sdks)

- Link to [contributors guide](https://github.com/novuhq/novu/blob/next/CONTRIBUTING.md)
- We have SDKs in various languages and frameworks, most written and maintained by community members.
- You can either become a maintainer there or help the existing maintainers by bringing the SDK up to speed with the latest features present in the core product.
  - We have backend SDKs in the following: [Node.js](https://github.com/novuhq/novu/tree/next/packages/node), [PHP](https://github.com/novuhq/novu-php), [.NET](https://github.com/novuhq/novu-dotnet), [Elixir](https://github.com/novuhq/novu-elixir), [Go](https://github.com/novuhq/go-novu), [Ruby](https://github.com/novuhq/novu-ruby), [Python](https://github.com/novuhq/novu-python) [Laravel](https://github.com/novuhq/novu-laravel), and [Kotlin](https://github.com/novuhq/novu-kotlin)
  - And Inbox SDKs: [React](https://github.com/novuhq/novu/tree/next/packages/react), [JavaScript](https://github.com/novuhq/novu/tree/next/packages/js)

### [Create content](https://docs.novu.co/community/get-involved\#create-content)

- Content writers program: Apply to become a content writer with us and get paid to write about use-cases highlighting how you solved a problem using Novu
- Write an article about what you built with Novu and share it with the community. We'll give you a shout out!

### [PRs, issues, and bug reports](https://docs.novu.co/community/get-involved\#prs-issues-and-bug-reports)

- Check out our [contributors guide](https://github.com/novuhq/novu/blob/next/CONTRIBUTING.md)
- Once you've gone through our [development process](https://docs.novu.co/community/run-in-local-machine), you can contribute directly to open issues.
- Open a new issue if a relevant one isn't already open.
- Also, you can create bug reports if you find a bug somewhere.
- Or a feature request if you find something that should be a feature but isn't.

At Novu, we believe that no contribution is small, and the only wrong question is the one that
doesn't get asked. So feel free to ask any question or raise that Pull Request. You're always
welcome here! 🤗

### [Participate in office hours](https://docs.novu.co/community/get-involved\#participate-in-office-hours)

- We have frequent (replace with interval— twice weekly, weekly, etc.) and topic-specific office hours that offer the ability to engage in real-time with Novu staff and other community members
- In these sessions, offer input, opinions, examples, etc. to contribute!

We're excited to have you on board and look forward to your valuable contributions!

Together, we'll shape the future of Novu. 🫂

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/get-involved.mdx)

[Previous\\
\\
Community Overview](https://docs.novu.co/community/overview) [Next\\
\\
Code of Conduct](https://docs.novu.co/community/code-of-conduct)

### On this page

[Our Community](https://docs.novu.co/community/get-involved#our-community) [Join the conversation](https://docs.novu.co/community/get-involved#join-the-conversation) [Getting help](https://docs.novu.co/community/get-involved#getting-help) [Contributing](https://docs.novu.co/community/get-involved#contributing) [Become an active community member](https://docs.novu.co/community/get-involved#become-an-active-community-member) [Become a power community member](https://docs.novu.co/community/get-involved#become-a-power-community-member) [Become a Novu Ambassador](https://docs.novu.co/community/get-involved#become-a-novu-ambassador) [Activities](https://docs.novu.co/community/get-involved#activities) [Help in onboarding and answering questions.](https://docs.novu.co/community/get-involved#help-in-onboarding-and-answering-questions) [Improve our documentation](https://docs.novu.co/community/get-involved#improve-our-documentation) [Help with the SDKs](https://docs.novu.co/community/get-involved#help-with-the-sdks) [Create content](https://docs.novu.co/community/get-involved#create-content) [PRs, issues, and bug reports](https://docs.novu.co/community/get-involved#prs-issues-and-bug-reports) [Participate in office hours](https://docs.novu.co/community/get-involved#participate-in-office-hours)

## Novu Community Overview
# Community Overview

Get started and get involved with the Novu Project

Welcome to the Novu community! As the leading open-source notification infrastructure, Novu enables developers and product teams to manage notifications across multiple channels seamlessly. Whether you're building in-app notifications, email alerts, or SMS updates, Novu provides the tools to simplify integration and enhance your communication strategy.

Our mission is to create a platform where every developer can easily implement notifications, with a strong, growing community to support you in every step.

## [Community details](https://docs.novu.co/community/overview\#community-details)

The Novu community is built on collaboration. Whether you're contributing code, helping with documentation, or supporting others in Discord, we welcome everyone. We have dedicated teams across various areas:

- **Developers:** Working on the core project and building new features.
- **Contributors:** Writing documentation, reporting bugs, and suggesting improvements.
- **Maintainers:** Ensuring the health of the project by reviewing and merging contributions.
- **Ambassadors**: The most involved contributors and community members nominated by the Community and approved by Novu.

You can find our official community communication channels on Discord. Whether you're a seasoned developer or just getting started, there's a place for you here.

### [Getting involved](https://docs.novu.co/community/overview\#getting-involved)

There are many ways to get involved:

- Contribute code, raise issues, or request features on [GitHub](https://github.com/novuhq/novu).
- Join discussions in the community on [Discord](https://discord.gg/novu).
- Attend Novu events and participate in hackathons to connect with other community members.

[Learn how to get involved with your new favorite open source project](https://docs.novu.co/community/get-involved)

## [Novu Cloud, or Novu Project?](https://docs.novu.co/community/overview\#novu-cloud-or-novu-project)

The Novu Project is our fully open source, community backed project. It is a complete notifications infrastructure platform that offers all the core components you need to implement notifications.

Novu Cloud is our commercial service offering. It is a superset of the Novu Project that includes additional features and capabilities businesses require to succeed with notifications at scale.

[See the full list of differences between Novu Cloud and Novu.](https://docs.novu.co/community/project-differences)

## [Using Novu](https://docs.novu.co/community/overview\#using-novu)

There are two ways to get started with Novu.

### [1\. Create a free account in our hosted Novu Cloud service](https://docs.novu.co/community/overview\#1-create-a-free-account-in-our-hosted-novu-cloud-service)

**Who it's for:** Most businesses, smaller organizations and teams, businesses that do not want to architect and host their own infrastructure, and businesses that do not want to worry about upgrades and system maintenance.

**Who it's not for:** Organizations that want to self-host their own instance of Novu, or plan on making customizations to their Novu installation.

[Learn more about Novu Cloud's features, capabilities, and pricing.](https://novu.co/pricing)

### [2\. Self-host](https://docs.novu.co/community/overview\#2-self-host)

Self-hosting Novu is a great way to rapidly test new custom providers, or to test your contributions.

**Use the Community Docker instances**

- **Who it's for:** Individuals and organizations that want to experiment with more advanced notifications infrastructure architectures, businesses that have a strict requirement to run notifications on premises or inside their own network boundary.
- **Who it's not for:** Non-technical users or teams that are not familiar with implementation and management of container infrastructure. Organizations that require rapid scale-up out-of-the-box, and that don't have the skills and knowledge required to implement and adjust deployments.

[Learn how to deploy Novu with Docker](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker)

**Build it yourself**

- **Who it's for:** Highly technical users that are deeply familiar with the required infrastructure components and technologies required to run it either locally or in your own cloud. Developers that want to experiment. Builders that are actively contributing to the Novu Project, and are testing new functionality.
- **Who it's not for:** Nearly everyone else. ;)

[Learn how to run Novu on your local machine](https://docs.novu.co/community/run-in-local-machine)

## [Get help](https://docs.novu.co/community/overview\#get-help)

For assistance with a Paid or Trial Novu Cloud account? Please use the in-app chat widget which is
available in the lower right hand corner of your app dashboard. 🙂

Should you encounter an issue with either your free Novu Cloud account, or your Novu Project instance, the community is here to help. Our primary channel for community support is our Discord community.

[Learn how to get help with your Novu Project or Free-tier Novu Cloud account](https://docs.novu.co/community/get-involved#getting-help)

### [Events](https://docs.novu.co/community/overview\#events)

Staying in tune with our upcoming community events, workshops, and hackathons is easy. Keep an eye out for new announcements in the [announcement](https://discord.com/channels/895029566685462578/1040040454906986578) channel in our [Discord community.](https://discord.gg/novu) That's the best way to stay updated about new events. You can also subscribe to our [youtube channel](https://www.youtube.com/@novuhq) and follow us on [dev.to](https://dev.to/novu).

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/overview.mdx)

[Next\\
\\
Get Involved](https://docs.novu.co/community/get-involved)

### On this page

[Community details](https://docs.novu.co/community/overview#community-details) [Getting involved](https://docs.novu.co/community/overview#getting-involved) [Novu Cloud, or Novu Project?](https://docs.novu.co/community/overview#novu-cloud-or-novu-project) [Using Novu](https://docs.novu.co/community/overview#using-novu) [1\. Create a free account in our hosted Novu Cloud service](https://docs.novu.co/community/overview#1-create-a-free-account-in-our-hosted-novu-cloud-service) [2\. Self-host](https://docs.novu.co/community/overview#2-self-host) [Get help](https://docs.novu.co/community/overview#get-help) [Events](https://docs.novu.co/community/overview#events)

## Novu Project vs Cloud
# Novu Project and Novu Cloud

Understand the difference between Novu Project and Novu Cloud

## [Better together](https://docs.novu.co/community/project-differences\#better-together)

Novu Project is where the community comes together with our development teams to improve notifications for everyone. Novu Cloud is our commercial offering, and where we extend the capabilities of the Novu Project and make them accessible and consumable by all teams and businesses. Most simply, the Novu Project is how you test and experiment with notifications infrastructure, and Novu Cloud is how you press the easy button for all things notifications.

### [Key differences](https://docs.novu.co/community/project-differences\#key-differences)

Our goal is always provide a functional, powerful, and complete notifications infrastructure platform, whether you opt to self host or use our cloud offering. However, certain features we build into Novu Cloud are not available in the Novu Project. When this happens, it's for several reasons:

- We rely on a paid third-party service provider
- The feature is complex and requires significant investment (read: money!) time to build and maintain
- The feature is primarily targeted at the largest and most sophisticated of use cases, and supporting these in self-hosted environments is challenging

### [Current matrix](https://docs.novu.co/community/project-differences\#current-matrix)

Below you will find a table that outlines the best available Novu Cloud Tier, compared to the available Novu Project capabilities.

| CAPABILITY | NOVU CLOUD | NOVU PROJECT |
| --- | --- | --- |
| Channels supported: Email, In-app, SMS, Chat, Push | ✅ | ✅ |
| Notification Subscribers | Unlimited | Infratructure dependent |
| GUI-based workflows | ✅ | ✅ |
| Code-based Framework workflows | ✅ | ✅ |
| Subscriber management | Q1 2025 | ❌ |
| Multi-org/multi-tenancy | Q1 2025 | ❌ |
| **FRAMEWORK** |  |  |
| Max workflows | Unlimited | Infratructure dependent |
| Provider integrations | Unlimited | Unlimited |
| Activity feed retention | Unlimited | Infratructure dependent |
| Digests | ✅ | Infratructure dependent |
| Workflow step controls | ✅ | ✅ |
| Translations | ✅ | ✅ |
| Block-based email editor | Nov 2024 | Nov 2024 |
| **INBOX** |  |  |
| Inbox component | ✅ | ✅ |
| User preferences component | ✅ | ✅ |
| Bell component | ✅ | ✅ |
| Notifications component | ✅ | ✅ |
| Inbox content component | ✅ | ✅ |
| Remove Novu branding | ✅ | ✅ |
| **ACCOUNT ADMINISTRATION AND SECURITY** |  |  |
| Max team members | Unlimited | Unlimited |
| Role-Based Access Control (RBAC) | Q2 2025 | ❌ |
| Standard SAML authentication (Google, Github) | ✅ | ❌ |
| Custom SAML SSO, OIDC enterprise providers | ✅ | ❌ |
| Built-In authentication | ✅ | ✅ |
| Multi-Factor Authentication (MFA) | ✅ | ❌ |
| **COMPLIANCE** |  |  |
| GDPR | ✅ | Installation dependent |
| SOC 2 / ISO 27001 | ✅ | ❌ |
| HIPAA BAA | ✅ | ❌ |
| Custom security reviews | ✅ | ❌ |
| Data Processing Agreements | Custom | ❌ |

### [Unmatched flexbility](https://docs.novu.co/community/project-differences\#unmatched-flexbility)

One huge advantage of working with Novu? If you opt for a paid Novu Cloud account, you can always fall back to the free tier, or migrate your notifications to a self-hosted Novu Project instance. Say goodbye to notifications risk.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/project-differences.mdx)

[Previous\\
\\
Roadmap](https://docs.novu.co/community/roadmap) [Next\\
\\
Run Novu in local machine](https://docs.novu.co/community/run-in-local-machine)

### On this page

[Better together](https://docs.novu.co/community/project-differences#better-together) [Key differences](https://docs.novu.co/community/project-differences#key-differences) [Current matrix](https://docs.novu.co/community/project-differences#current-matrix) [Unmatched flexbility](https://docs.novu.co/community/project-differences#unmatched-flexbility)

## Novu Roadmap Overview
# Roadmap

Learn about our roadmap

[**Novu's Roadmap** \\
\\
Learn about ongoing developments, upcoming plans, and items in our backlog..](https://roadmap.novu.co/roadmap)

Your involvement in shaping the future of our notification infrastructure solution is highly encouraged.

## [Get involved](https://docs.novu.co/community/roadmap\#get-involved)

**Submit Ideas:** If you have a new feature idea or an enhancement suggestion, don't hesitate to submit it through our [roadmap page](https://roadmap.novu.co/roadmap). Your creativity fuels our innovation!

**Upvote and Comment:** Review the existing feature requests and upvote the ones that resonate with you. Feel free to provide additional insights or use-cases through comments.

**Contribute:** If you're a developer, you can actively contribute to the development of the features in progress or even the backlog ones. [Join our community of contributors](https://discord.gg/novu?ref=docs-contribute) and help us bring these enhancements to life.

Remember, this roadmap is a living document that evolves based on your input and the direction the
community decides to take. Your voice matters, and we're excited to work together in building a
robust notification infrastructure solution that meets everyone's needs.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/roadmap.mdx)

[Previous\\
\\
Code of Conduct](https://docs.novu.co/community/code-of-conduct) [Next\\
\\
Novu Project and Novu Cloud](https://docs.novu.co/community/project-differences)

### On this page

[Get involved](https://docs.novu.co/community/roadmap#get-involved)

## Run Novu Locally
# Run Novu in local machine

Prerequisites and steps to run Novu in local machine. Learn how to set up Novu on your local environment for testing and development.

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/novuhq/novu)

### [Requirements](https://docs.novu.co/community/run-in-local-machine\#requirements)

- Node.js version v20.8.1
- MongoDB
- Redis
- **(Optional)** pnpm - Needed if you want to install new packages
- **(Optional)** localstack (required only in S3 related modules)

We recommend having at least 8GB of RAM to run Novu on a local machine as Novu has multiple
services running together with external services like redis, mongodb etc.

### [Setup the project](https://docs.novu.co/community/run-in-local-machine\#setup-the-project)

After installing the required services on your machine, you can clone and set up your forked version of the project:

1. Clone the repository

Novu OrgForked Repo

`shell git clone https://github.com/novuhq/novu.git `

2. Install all dependencies

```
cd novu && npm run setup:project
```

3. Run the project

```
npm run start
```

The `npm run start` will start the Jarvis CLI tool which allows you to run the whole project with ease. If you only want to run parts of the platform, you can use the following run commands from the root project:

- **start** \- Synonym to `npm run start`
- **start** \- Only starts the web management platform
- **start** \- Only starts the WebSocket service for notification center updates
- **start** \- Starts the widget wrapper project that hosts the notification center inside an iframe
- **start** \- Runs the API in watch mode
- **start** \- Runs the worker application in watch mode
- **start** \- Runs the Data Access Layer package in watch mode
- **start** \- Starts the watch mode for the shared client and API library
- **start** \- Runs the `@novu/node` package in watch mode
- **start** \- Runs and builds the React package for the Novu notification center

### [Set up your environment variables](https://docs.novu.co/community/run-in-local-machine\#set-up-your-environment-variables)

If you have used Jarvis CLI tool from the previous step you don't need to setup the env variables as Jarvis will do that on the first run if setup wasn't done before.

The command `npm run setup:project` creates default environment variables that are required to run Novu in a development environment. However, if you want to test certain parts of Novu or run it in production mode, you need to change some of them. These are all the available environment variables:

### API Backend

### Worker

### Web Client

### Web Socket

### [Running tests](https://docs.novu.co/community/run-in-local-machine\#running-tests)

After making changes, you can run the tests for the respective package using the appropriate CLI commands:

### [API](https://docs.novu.co/community/run-in-local-machine\#api)

To run the API tests, run the following command:

```
npm run start:worker:test
npm run start:e2e:api
```

The tests create a new instance of Novu and a test db and run the tests against it. The test db is removed after all tests have finished running.

### [Web](https://docs.novu.co/community/run-in-local-machine\#web)

To run the front end tests for the web project using cypress you need to install localstack. The cypress tests perform E2E tests. To be able to perform E2E tests, you need to run the API service in the appropriate test environment.

Run the services in test env with the following commands:

```
npm run start:web
npm run start:api:test
npm run start:worker:test
npm run start:ws:test
```

Run the cypress test suite with the following command:

```
cd apps/web && npm run cypress:run
```

To open the cypress management window to debug tests, run the following commands:

```
cd apps/web && npm run cypress:open
```

### [Different ports used by the services](https://docs.novu.co/community/run-in-local-machine\#different-ports-used-by-the-services)

- **3000** \- API
- **3002** \- WebSocket Service
- **3003** \- Webhook Service
- **3004** \- Worker Service
- **4200** \- Web Management UI
- **4701** \- Iframe embed for notification center
- **4500** \- Widget Service

### [Testing providers](https://docs.novu.co/community/run-in-local-machine\#testing-providers)

To run tests against the providers' folder, you can use the `npm run test:providers` command.

### [Local environment setup script (beta)](https://docs.novu.co/community/run-in-local-machine\#local-environment-setup-script-beta)

As an option in our script runner `Jarvis` we have made available an option to run [this script](https://github.com/novuhq/novu/blob/2f2abdcaaad8a7735e0a2d488607c3276c8975fd/scripts/dev-environment-setup.sh) that will automatically try to install all the dependencies needed to be able to run Novu locally, as the previous step of installing the project dependencies through `pnpm install`. When executing it inside `Jarvis`, you will need to have previously installed by yourself `git` and `node`, as we mentioned earlier on this page.

The script can be run on its own without any previous dependency installed, as it is prepared to execute the following tasks:

- Check the running OS in the local machine (currently only MacOSx and [GNU Linux](https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy) supported)
- Install of OS dependencies (currently only MacOSx supported) -- MacOSx: It will execute the following tasks --- Will try to install or update [XCode](https://developer.apple.com/xcode/) (skippable step; though XCode installs `[git](https://git-scm.com/)` that is a required dependency for later) --- Will install [Rosetta](https://support.apple.com/en-gb/HT211861) for Apple CPUs --- Will set up some opinionated OS settings
- Will check if `[git](https://git-scm.com/)` is installed and if not will abort the operation
- Will make [ZSH](https://en.wikipedia.org/wiki/Z_shell) the default shell to be able to execute the next task
- Will (opinionatedly) install [Oh My Zsh!](https://ohmyz.sh/) (skippable task)
- Will (opinionatedly) install the [Homebrew](https://brew.sh/) package manager and will set up your local environment to execute it besides adding some casks
- Will (opinionatedly) install [NVM](https://github.com/nvm-sh/nvm) as a Node.js version manager
- Will install the required [Node.js](https://nodejs.org/en/) version to be able to [run Novu](https://github.com/novuhq/novu/blob/2f2abdcaaad8a7735e0a2d488607c3276c8975fd/package.json#L180)
- Will install [PNPM](https://pnpm.io/) as a package manager, required dependency for some of the tasks inside Novu's scripts
- Will install [Docker](https://www.docker.com/) as containerized application development tool
- Will install required databases [MongoDB](https://www.mongodb.com/) (Community version) and [Redis](https://redis.io/) through Homebrew
- Will install the [AWS CLI](https://aws.amazon.com/cli/) tool (not required to run Novu; it is a core maintainer used tool)
- Will create a local development domain `local.novu.co` in your local machine
- Will clone the Novu repository in your local machine (skippable step) to a selected folder `$HOME/Dev`

This script has only been thoroughly tested in MacOSx. Little testing has been run in GNU Linux.

This script is not bullet-proof and some of the tasks have intertwined dependencies with each
other. We have tried to make it as idempotent as possible but some loose knots will probably show
because of conflicts between versions of the different dependencies. Please report to us any
problem found and we will try to fix or assist though we do not have the resources to make it
idempotent in every potential system and potential combinations

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx)

[Previous\\
\\
Novu Project and Novu Cloud](https://docs.novu.co/community/project-differences) [Next\\
\\
Overview](https://docs.novu.co/community/self-hosting-novu/overview)

### On this page

[Requirements](https://docs.novu.co/community/run-in-local-machine#requirements) [Setup the project](https://docs.novu.co/community/run-in-local-machine#setup-the-project) [Set up your environment variables](https://docs.novu.co/community/run-in-local-machine#set-up-your-environment-variables) [Running tests](https://docs.novu.co/community/run-in-local-machine#running-tests) [API](https://docs.novu.co/community/run-in-local-machine#api) [Web](https://docs.novu.co/community/run-in-local-machine#web) [Different ports used by the services](https://docs.novu.co/community/run-in-local-machine#different-ports-used-by-the-services) [Testing providers](https://docs.novu.co/community/run-in-local-machine#testing-providers) [Local environment setup script (beta)](https://docs.novu.co/community/run-in-local-machine#local-environment-setup-script-beta)

## Chat Channel Guide
# Chat Channel

Learn the process of configuring and using chat providers with Novu

Novu brings chat notifications into your development workflow, giving you a unified way to manage messaging across platforms and apps. Whether you're working with tools like Slack or Microsoft Teams or apps like WhatsApp, Telegram, and Discord, Novu lets you integrate, manage, and scale chat notifications without unnecessary complexity.

Learn more about the [Chat Channel](https://docs.novu.co/platform/integrations/chat).

```
await step.chat('chat', async () => {
  return {
    body: 'A new post has been created',
  };
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/chat-channel.mdx)

[Previous\\
\\
SMS](https://docs.novu.co/framework/sms-channel) [Next\\
\\
React Email](https://docs.novu.co/framework/content/react-email)

## Notification Controls Guide
# Controls

Learn how to use Controls in your notification workflows

Controls are defined using [JSON Schema](https://docs.novu.co/framework/schema/json-schema) or [Zod](https://zod.dev/), providing a strong run-time validation system for your workflows.

This ensures that you as the developer and your non-technical peers are speaking the same language. Those responsible for styling and copy can edit with confidence, knowing their changes are tested in code.

## [Controls vs Payload](https://docs.novu.co/framework/controls\#controls-vs-payload)

**Control Schema** \- For Non-Technical Peers and Developers. Managed in the Novu Dashboard UI, defined by developers and used by non-technical peers.

**Payload Schema** \- For Developers. Passed during the `novu.trigger` method, and controlled by the developer.

## [Common usecases](https://docs.novu.co/framework/controls\#common-usecases)

- **Content** \- Modify any static content: email subject, email body, push notification title, etc...
- **Styling** \- Modify the styling of the content: button color, background color, font size, etc...
- **Behaviour** \- Modify the behaviour of the content: show/hide a section, show/hide a button, etc...
- **Order** \- Modify the order of the content: the order of the email sections, the order of the buttons, etc...
- **Actions** \- Modify the behaviour of actions: digest duration, etc...
- **Other** \- Any other use case that should be controller without modifying code

## [Step Controls](https://docs.novu.co/framework/controls\#step-controls)

Step Control schema defines the control passed during the `step` method. These controls can be modified and persisted in the Novu Dashboard UI. The snippet below shows a configuration for the Step Control schema. If you don't provide a schema, Typescript will infer the data type to `unknown`, reminding you of the best practice to specify your schema.

Zod SchemaClass-Validator SchemaJSON Schema

```
import { z } from 'zod';
import { render } from 'react-email';
import { ReactEmailContent } from './ReactEmailContent';

workflow('new-signup', async ({ step, payload }) => {
  await step.email(
    'send-email',
    async (controls) => {
      return {
        subject: controls.subject,
        body: render(
          <ReactEmailContent hideBanner={controls.hideBanner} components={controls.components} />
        ),
      };
    },
    {
      controlSchema: z.object({
        hideBanner: z.boolean().default(false),
        subject: z.string().default('Hi {{subscriber.firstName | capitalize}}'),
        components: z.array(
          z.object({
            type: z.enum(['header', 'cta-row', 'footer']),
            content: z.string(),
          })
        ),
      }),
    }
  );
});
```

For the full list of parameters, check out the [full SDK reference](https://docs.novu.co/framework/typescript/steps).

## [Schema Validation & IDE IntelliSense](https://docs.novu.co/framework/controls\#schema-validation--ide-intellisense)

You can use **Zod, Class-Validator or JSON Schema** based on your needs.

- **[Zod](https://zod.dev/)** \- A TypeScript-first schema declaration and validation library.
- **[Class-Validator](https://github.com/typestack/class-validator)** \- A TypeScript-first validation library using decorators for OOP-style applications.
- **[JSON Schema](https://docs.novu.co/framework/schema/json-schema)** \- The most popular schema language for defining JSON data structures.

If you only want local IDE IntelliSense, you are able to pass plain JS Classes, which will not provide any Schema Definition useable by Novu Platform.

All provided **Zod** and **Class-Transformer** Schemas are compiled into **JSON Schema** which is passed to Novu. This ensures a consistent validation approach and UX by managing Payload and Control Data directly from the Platform.

There may be inconsistencies when using Class-Transformer especially with nested schema objects.
Please check out the guidelines on converting Class-Transformer classes to JSON Schema before
using it here:
[class-validator-jsonschema](https://www.npmjs.com/package/class-validator-jsonschema).

## [Using Variables](https://docs.novu.co/framework/controls\#using-variables)

To facilitate the use of variables in the control schema, enclose the variable name in double curly braces using the `{{variableName}}` syntax. For example, `{{subscriber.firstName | capitalize}}` will be dynamically replaced with the actual value of the subscriber's first name at runtime. You can use variables in any step control value, whether set by the developer or within the Novu Dashboard UI. To facilitate this, the Novu Dashboard UI offers auto-completion for variables. Simply start typing `{{` to view a list of all available variables.

![Example for variables autocomplete in dashboard](https://docs.novu.co/images/controls-autocomplete.gif)

### [Variable Options](https://docs.novu.co/framework/controls\#variable-options)

- **Subscriber Attributes**: Access all [subscriber attributes](https://docs.novu.co/platform/concepts/subscribers#subscriber-attributes). Example: `{{subscriber.firstName}}`
- **Payload Variables**: Use all payload variables defined in the `payloadSchema`. Example: `{{payload.userId}}`
- **Liquid Filters**: Apply [liquid filters](https://liquidjs.com/filters/overview.html) to format or manipulate variable values. Examples: `{{subscriber.firstName | append: ': ' | append: payload.status | capitalize}}` or `{{payload.invoiceDate | date: '%a, %b %d, %y'}}` will format the date as `Thu, Jan 01, 24`

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/controls.mdx)

[Previous\\
\\
Payload](https://docs.novu.co/framework/payload) [Next\\
\\
Email](https://docs.novu.co/framework/email-channel)

### On this page

[Controls vs Payload](https://docs.novu.co/framework/controls#controls-vs-payload) [Common usecases](https://docs.novu.co/framework/controls#common-usecases) [Step Controls](https://docs.novu.co/framework/controls#step-controls) [Schema Validation & IDE IntelliSense](https://docs.novu.co/framework/controls#schema-validation--ide-intellisense) [Using Variables](https://docs.novu.co/framework/controls#using-variables) [Variable Options](https://docs.novu.co/framework/controls#variable-options)

## Custom Action Step
# Custom Action Step

Used to execute any custom code as a step in the workflow.

A custom steps allows to execute any custom logic and persist in the durable execution context. The result of this step can be used in subsequent steps.

## [Common usecases](https://docs.novu.co/framework/custom\#common-usecases)

- Making an API call to 3rd party service
- Fetch data from a database to be used in subsequent steps
- Execute a custom logic to transform data
- Custom provider implementation

## [Custom Step Interface](https://docs.novu.co/framework/custom\#custom-step-interface)

```
const stepResult = await step.custom(
  'custom-step',
  async () => {
    return {
      item_name: 'A product name',
      item_price: 100,
    };
  },
  {
    outputSchema: {
      type: 'object',
      properties: {
        item_name: { type: 'string' },
        item_price: { type: 'number' },
      },
      required: ['item_name', 'item_price'],
    },
  }
);
```

### [Output Schema Definition](https://docs.novu.co/framework/custom\#output-schema-definition)

This JSON Schema definition is used to validate the output of the custom step. If the output does not match the schema, the workflow will fail. Novu Framework will infer the Typescript interface from the JSON Schema definition.

### [Return Value](https://docs.novu.co/framework/custom\#return-value)

The Custom Step function should return a valid serializable object. The return value will be persisted in the durable execution context.

## [Using the Custom Step Result](https://docs.novu.co/framework/custom\#using-the-custom-step-result)

The result can only be used in the `resolver` of the step/providers/skip functions of subsequent steps.

```
workflow('hello-world-workflow', async ({ payload }) => {
  const task = await step.custom(
    'fetch-db-data',
    async () => {
      const taskData = db.fetchTask(payload.task_id);
      return {
        task_id: taskData.id,
        task_title: taskData.title,
        complete: taskData.complete,
      };
    },
    {
      outputSchema: {
        type: 'object',
        properties: {
          task_title: { type: 'string' },
          task_id: { type: 'string' },
          complete: { type: 'boolean' },
        },
        required: ['task_id', 'complete'],
      },
    }
  );

  await step.email(
    'send-email',
    () => {
      return {
        subject: `Task reminder for ${task.task_title}`,
        body: 'Task is not yet complete. Please complete the task.',
      };
    },
    {
      // Only send the reminder E-mail if the task is not complete
      skip: () => !task.complete,
    }
  );
});
```

To read more about the full list of parameters, check out the [full SDK reference](https://docs.novu.co/framework/typescript/steps/custom).

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/custom.mdx)

[Previous\\
\\
Delay Action](https://docs.novu.co/framework/delay) [Next\\
\\
Skip Function](https://docs.novu.co/framework/skip)

### On this page

[Common usecases](https://docs.novu.co/framework/custom#common-usecases) [Custom Step Interface](https://docs.novu.co/framework/custom#custom-step-interface) [Output Schema Definition](https://docs.novu.co/framework/custom#output-schema-definition) [Return Value](https://docs.novu.co/framework/custom#return-value) [Using the Custom Step Result](https://docs.novu.co/framework/custom#using-the-custom-step-result)

## Delay Steps Implementation
# Framework Delay Implementation

Learn how to use Delay steps in your notification workflows

The delay action awaits a specified amount of time before moving on to trigger the following steps of the workflow.

Learn more about the [Delay](https://docs.novu.co/platform/workflow/delay).

## [Common usecases](https://docs.novu.co/framework/delay\#common-usecases)

- Waiting for X amount of time before sending the message
- Wait for a short period of time before sending a push message in case the user seen the notification in the Inbox Component
- Allow the user some time to cancel an action that generated a notification

## [Adding a delay step](https://docs.novu.co/framework/delay\#adding-a-delay-step)

Delay steps can be inserted at any stage of your workflow execution, they can happen after or before any action. The workflow execution will be halted for the given amount of time and then resumed to the next step in the flow.

The action can also be skipped using the skip parameter conditionally to allow more complex usecases of when to wait and when to send an email immediately.

Delay with skip conditionDelay and Inbox step

Here, we are delaying the execution of the next step by 1 day and skipping the delay step if the isCriticalMessage function returns true.

```
await step.delay(
  'delay',
  () => {
    return {
      type: 'regular',
      unit: 'days',
      amount: 1,
    };
  },
  {
    skip: () => isCriticalMessage(),
  }
);
```

Changing the step content after triggering the workflow with delay step will not affect the
existing pending delayed notification content.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/delay.mdx)

[Previous\\
\\
Digest Action](https://docs.novu.co/framework/digest) [Next\\
\\
Custom Step](https://docs.novu.co/framework/custom)

### On this page

[Common usecases](https://docs.novu.co/framework/delay#common-usecases) [Adding a delay step](https://docs.novu.co/framework/delay#adding-a-delay-step)

## Digest Engine Overview
# Digest Action for Framework Based Workflows

Learn how to use the Digest Engine to collect multiple events into a single message

You can use the Digest Engine to collect multiple events to a single message. Learn more about the [Digest Engine](https://docs.novu.co/platform/workflow/digest).

## [Defining a digest step](https://docs.novu.co/framework/digest\#defining-a-digest-step)

```
const digestResult = await step.digest('digest', async () => {
  return {
    unit: 'days', // 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months'
    amount: 3, // the number of units to digest events for
  };
});
```

## [Writing digest content](https://docs.novu.co/framework/digest\#writing-digest-content)

In many cases, you will need to access all the digested events payload in order to show the user all or parts of the events included in this digest.

**For example:** "John and 5 others liked your photo."

The digest function returns an array of triggers that have been digested.
You can use this array to perform any necessary actions on the digested triggers.
Like Sending and email, or updating a database.

```
const { events } = await step.digest('digest-3-days', async () => {
  return {
    unit: 'days', // 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months'
    amount: 3, // the number of units to digest events for
  };
});

await step.email('send-email', async () => {
  const eventCount = events.length;

  return {
    subject: 'Digest Email',
    body: `You have ${eventCount} new events`,
  };
});
```

Step controls: At the moment, it is not possible to use digest information in step controls. You
can only use it from the code, by creating a custom component for handling digested data.

The digest step returns an object with events array. Each event in the array has the following properties:

- **id** \- The job id of the digested event
- **time** \- The time when the event was triggered
- **payload** \- The original payload passed to the event

Changing the step content after triggering the workflow with digest step will not affect the
existing digested events.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/digest.mdx)

[Previous\\
\\
Vue Email](https://docs.novu.co/framework/content/vue-email) [Next\\
\\
Delay Action](https://docs.novu.co/framework/delay)

### On this page

[Defining a digest step](https://docs.novu.co/framework/digest#defining-a-digest-step) [Writing digest content](https://docs.novu.co/framework/digest#writing-digest-content)

## Email Channel Setup
# Email Channel

Learn how to configure the Email channel

The Email Channel is a critical component for delivering notifications reliably. Whether it's a password reset, an onboarding email, or an alert about account activity, email remains a trusted medium for reaching users.
Novu simplifies this process, allowing you to focus on implementation rather than infrastructure.

Learn more about the [Email Channel](https://docs.novu.co/platform/integrations/email).

```
await step.email('email', async () => {
  return {
    subject: 'You received a message',
    body: 'A new post has been created',
  };
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/email-channel.mdx)

[Previous\\
\\
Controls](https://docs.novu.co/framework/controls) [Next\\
\\
In-App](https://docs.novu.co/framework/in-app-channel)

## Novu Bridge Endpoint
# Bridge Endpoint

Novu Framework requires a **single** `HTTP` endpoint ( `/api/novu` or similar) to be exposed by your application. This endpoint is used to receive events from our **Worker Engine**.

You can view the Bridge Endpoint as a webhook endpoint that Novu will call when it needs to retrieve contextual information for a given subscriber and notification.

Using the `npx novu init` command creates a Bridge application for you with a Bridge Endpoint ready to go.

## [The `serve` function](https://docs.novu.co/framework/endpoint\#the-serve-function)

We offer framework specific wrappers in form of an exported `serve` function that abstracts away:

- Parsing the incoming request for `GET`, `POST`, `PUT` and `OPTIONS` requests
- HMAC header authentication
- Framework specific response and error handling

Currently, we offer `serve` functions for the following frameworks:

- [Next.js](https://docs.novu.co/framework/quickstart/nextjs)
- [Express.js](https://docs.novu.co/framework/quickstart/express)
- [Nuxt](https://docs.novu.co/framework/quickstart/nuxt)
- [h3](https://docs.novu.co/framework/quickstart/h3)
- [Remix](https://docs.novu.co/framework/quickstart/remix)
- [Sveltekit](https://docs.novu.co/framework/quickstart/svelte)

## [Writing a custom `serve` function](https://docs.novu.co/framework/endpoint\#writing-a-custom-serve-function)

If we currently don't support your framework, you can write a custom `serve` function like the following example:

```
import { type Request, type Response } from 'express';
import { NovuRequestHandler, ServeHandlerOptions } from '@novu/framework';

export const serve = (options: ServeHandlerOptions) => {
  const requestHandler = new NovuRequestHandler({
    frameworkName: 'express',
    ...options,
    handler: (incomingRequest: Request, response: Response) => ({
      method: () => incomingRequest.method,
      headers: (key) => {
        const header = incomingRequest.headers[key];
        return Array.isArray(header) ? header[0] : header;
      },
      queryString: (key) => {
        const qs = incomingRequest.query[key];
        return Array.isArray(qs) ? qs[0] : qs;
      },
      body: () => incomingRequest.body,
      url: () =>
        new URL(incomingRequest.url, `https://${incomingRequest.headers.get('host') || ''}`),
      transformResponse: ({ body, headers, status }) => {
        Object.entries(headers).forEach(([headerName, headerValue]) => {
          response.setHeader(headerName, headerValue);
        });

        return response.status(status).send(body);
      },
    }),
  });

  return requestHandler.createHandler();
};
```

### What is the difference between tunnel url and bridge url?

### Is it necessary to have bridge url publicly accessible?

### Can endpoint other than /api/novu be used?

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/endpoint.mdx)

[Previous\\
\\
Studio](https://docs.novu.co/framework/studio) [Next\\
\\
Tags](https://docs.novu.co/framework/tags)

### On this page

[The `serve` function](https://docs.novu.co/framework/endpoint#the-serve-function) [Writing a custom `serve` function](https://docs.novu.co/framework/endpoint#writing-a-custom-serve-function)

## In-App Notifications
# In-App Channel

Learn how to configure the In-App channel

Novu extends beyond traditional notification channels like email, SMS, and push by providing a robust framework for in-app notifications. With Novu, you can build reliable, stateful systems that integrate seamlessly into your applications.

Learn more about the [In-App Channel](https://docs.novu.co/platform/inbox/overview).

```
await step.inApp('inbox', async () => {
  return {
    subject: 'Welcome to Acme!',
    body: 'We are excited to have you on board.',
    avatar: 'https://acme.com/avatar.png',
    redirect: {
      url: 'https://acme.com/welcome',
      target: '_blank',
    },
    primaryAction: {
      label: 'Get Started',
      redirect: {
        url: 'https://acme.com/get-started',
        target: '_self',
      },
    },
    secondaryAction: {
      label: 'Learn More',
      redirect: {
        url: 'https://acme.com/learn-more',
        target: '_self',
      },
    },
    data: {
      customData: 'customValue',
      text: payload.text,
    },
  };
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/in-app-channel.mdx)

[Previous\\
\\
Email](https://docs.novu.co/framework/email-channel) [Next\\
\\
Push](https://docs.novu.co/framework/push-channel)

## Novu Framework Overview
# Introduction to Novu Framework

Discover how the Novu Framework empowers you to build, customize, and manage advanced notification workflows with a mix of code and no-code capabilities.

The Novu framework allows you to build and manage advanced notification workflows with code, and expose no-code controls for non-technical users to modify.

Workflows are the building blocks of your customer notification experience, they will define the what, when, how and where of your notifications.

## [Building blocks](https://docs.novu.co/framework/introduction\#building-blocks)

Each Novu workflow is composed of 3 main components:

- **Trigger** \- The event that will start the workflow.
- **Channel steps** \- The delivery method of the notification with the content.
- **Action steps** \- Actions that will happen before and after a given channel step is executed.

Let's take a look at a simple example of a workflow that sends an email after one day:

```
import { workflow } from '@novu/framework';

workflow('sample-workflow', async (step) => {
  await step.delay('delay', async () => {
    return {
      unit: 'days',
      amount: 1,
    };
  });

  await step.email('email-step', async () => {
    return {
      subject: 'Welcome to Novu',
      body: 'Hello, welcome to Novu!',
    };
  });
});
```

### [Trigger](https://docs.novu.co/framework/introduction\#trigger)

The trigger is the event that will start the workflow. In our current example the `sample-workflow` identifier will be used as our trigger id.
Workflow identifiers should be unique to your application and should be descriptive of the workflow's purpose.

### [Channel steps](https://docs.novu.co/framework/introduction\#channel-steps)

Channel Steps are the delivery methods of the notification. In our example, we have an email Channel Step that will send an email with the subject `Welcome to Novu` and the body `Hello, welcome to Novu!`.
Novu's durable workflow execution engine will select the relevant delivery provider configured for this channel and send the notification with the specified content.

Novu supports a variety of common notification channels out-of-the-box, including **email**, **SMS**, **push**, **inbox**, and **chat**.

To read more about the full list of parameters, check out the [full SDK reference](https://docs.novu.co/framework/typescript/overview).

### [Action steps](https://docs.novu.co/framework/introduction\#action-steps)

Action Steps are purpose built functions that help you manage the flow of your workflow. In our example, we have a delay Action Step that will pause the workflow for one day before sending the email.

You can also use Action Steps to perform other tasks such as fetching data from an external API, updating a database, or sending a notification to another channel.

Novu supported the following Action Steps: **delay**, **custom** and **digest**.

## [Create a workflow](https://docs.novu.co/framework/introduction\#create-a-workflow)

Here's a bare-bones example of a workflow to send a notification in response to a trigger:

```
import { workflow } from '@novu/framework';

const myWorkflow = workflow(
  'new-signup',
  async ({ step, payload }) => {
    await step.email('send-email', async () => {
      return {
        subject: `Welcome to Acme, ${payload.name}`,
        body: 'We look forward to helping you achieve mission.',
      };
    });
  },
  { payloadSchema: z.object({ name: z.string() }) }
);
```

We'll build on top of this basic code block in the following examples below.

## [Just-in-time data fetching](https://docs.novu.co/framework/introduction\#just-in-time-data-fetching)

You can add any custom logic needed into your steps. For example, you might want to fetch more information about your new user from a database during the workflow execution. You can achieve this with the following changes:

```
import { workflow } from '@novu/framework';

const myWorkflow = workflow(
  'new-signup',
  async ({ step, payload }) => {
    await step.email('send-email', async () => {
      const user = await db.getUser(payload.userId);
      return {
        subject: `Welcome to Acme ${user.productTier} tier, ${user.name}`,
        body: 'We look forward to helping you achieve mission.',
      };
    });
  },
  { payloadSchema: z.object({ userId: z.string() }) }
);
```

We call this **just-in-time** notification data fetching. It allows you pull in data from the relevant sources during the workflow execution, removing the need to store all of your subscriber data in Novu.

## [Multi-step workflow](https://docs.novu.co/framework/introduction\#multi-step-workflow)

What if you want to send another update to the same user in one week? But you don't want to send the follow-up if the user opted out. We can add more steps to the workflow to achieve this.

```
import { workflow } from '@novu/framework';

const myWorkflow = workflow(
  'new-signup',
  async ({ step, payload }) => {
    await step.email('send-email', async () => {
      const user = await db.getUser(payload.userId);
      return {
        subject: `Welcome to Acme ${user.productTier} tier, ${user.name}`,
        body: 'We look forward to helping you achieve mission.',
      };
    });

    await step.delay('onboarding-follow-up', async () => ({
      amount: 1,
      unit: 'weeks',
    }));

    await step.inApp(
      'onboarding-follow-up',
      async (controls) => {
        const user = await db.getUser(payload.userId);
        return {
          body: `Hey ${user.name}! How do you like the product? Let us know <a href="${controls.feedbackUrl}">here</a> if you have any questions.`,
        };
      },
      {
        skip: () => !payload.shouldFollowUp,
        controlSchema: {
          type: 'object',
          properties: {
            feedbackUrl: {
              type: 'string',
              format: 'uri',
              default: 'https://acme.com/feedback',
            },
          },
          required: ['feedbackUrl'],
          additionalProperties: false,
        } as const,
      }
    );
  },
  {
    payloadSchema: {
      type: 'object',
      properties: {
        userId: { type: 'string' },
        shouldFollowUp: { type: 'boolean', default: true },
      },
      required: ['userId', 'shouldFollowUp'],
      additionalProperties: false,
    } as const,
  }
);
```

With this simple workflow, we:

- Sent a new signup email
- Waited 1 week
- Sent a follow-up notification in-app

That's the flexibility that Novu Framework offers.

Read the section on [Controls](https://docs.novu.co/framework/controls) next to learn how to expose Novu's no-code
editing capabilities to your peers.

## [Payload schema](https://docs.novu.co/framework/introduction\#payload-schema)

Payload schema defines the payload passed during the `novu.trigger` method. This is useful for ensuring that the payload is correctly formatted and that the data is valid.

```
import { workflow } from '@novu/framework';
import { render } from 'react-email';
import { ReactEmailContent } from './ReactEmailContent';

workflow(
  'comment-on-post',
  async ({ step, payload }) => {
    await step.email('send-email', async () => {
      return {
        subject: `You have a new comment from: ${payload.author_name}`,
        body: render(<ReactEmailContent comment={payload.comment} />),
      };
    });
  },
  {
    payloadSchema: {
      type: 'object',
      properties: {
        post_id: { type: 'number' },
        author_name: { type: 'string' },
        comment: { type: 'string', maxLength: 200 },
      },
      required: ['post_id', 'comment'],
      additionalProperties: false,
    } as const,
  }
);
```

## [Tags](https://docs.novu.co/framework/introduction\#tags)

Tags are used to categorize the workflows. They also allow you to filter and group notifications for your [Inbox](https://docs.novu.co/platform/inbox/react/multiple-tabs) tabs.

```
import { workflow } from '@novu/framework';

workflow(
  'acme-login-alert',
  async ({ step, payload }) => {
    await step.inApp('inbox', async () => {
      return {
        subject: 'New Login Detected',
        body: "We noticed a login from a new device or location. If this wasn't you, change your password immediately.",
      };
    });
  },
  {
    tags: ['security'],
  }
);
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx)

[Next\\
\\
Introduction](https://docs.novu.co/framework/overview)

### On this page

[Building blocks](https://docs.novu.co/framework/introduction#building-blocks) [Trigger](https://docs.novu.co/framework/introduction#trigger) [Channel steps](https://docs.novu.co/framework/introduction#channel-steps) [Action steps](https://docs.novu.co/framework/introduction#action-steps) [Create a workflow](https://docs.novu.co/framework/introduction#create-a-workflow) [Just-in-time data fetching](https://docs.novu.co/framework/introduction#just-in-time-data-fetching) [Multi-step workflow](https://docs.novu.co/framework/introduction#multi-step-workflow) [Payload schema](https://docs.novu.co/framework/introduction#payload-schema) [Tags](https://docs.novu.co/framework/introduction#tags)

## Novu Framework Overview
# Novu Framework Overview

Learn how to extend Novu's capabilities by building custom notification workflows with code using the Novu Framework.

Novu Framework enables you to run a part of the core Novu workflow engine from within your network boundary. This also opens up a powerful new capability: **you can create Novu workflows entirely in code**. This is important because:

- You can inject custom code that does nearly anything you can imagine as part of a Novu workflow
- Your code-based workflow lives alongside your application code in source control
- You can hydrate notification content using local data-sources, reducing what you need to sync outside of your IT boundary

### [What it is and how it works](https://docs.novu.co/framework/overview\#what-it-is-and-how-it-works)

Novu Framework is an application and SDK that you run locally, and communicates natively with the Novu Cloud Worker Engine via the Novu API.

Novu Framework requires a single HTTP webhook-like endpoint (/api/novu or similar) to be exposed by your application. This endpoint is called a **Bridge Endpoint** and is used to receive events from our Worker Engine through an encrypted client-initiated tunnel.

When enabled, Novu Cloud will call the Bridge Endpoint when it needs to retrieve contextual information for a given subscriber and notification.

Use the `npx novu init` command to create a sample Bridge application with a built-in Bridge Endpoint.

## [Quickstart](https://docs.novu.co/framework/overview\#quickstart)

To get started with Novu Framework, pick your preferred technology from the list below:

[**Next.js**](https://docs.novu.co/framework/quickstart/nextjs) [**Express.js**](https://docs.novu.co/framework/quickstart/express) [**Remix**](https://docs.novu.co/framework/quickstart/remix) [**NestJS**](https://docs.novu.co/framework/quickstart/nestjs) [**Svelte**](https://docs.novu.co/framework/quickstart/svelte) [**Nuxt**](https://docs.novu.co/framework/quickstart/nuxt) [**H3**](https://docs.novu.co/framework/quickstart/h3) [**Lambda**](https://docs.novu.co/framework/quickstart/lambda)

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/overview.mdx)

[Previous\\
\\
Overview](https://docs.novu.co/framework/introduction) [Next\\
\\
Express](https://docs.novu.co/framework/quickstart/express)

### On this page

[What it is and how it works](https://docs.novu.co/framework/overview#what-it-is-and-how-it-works) [Quickstart](https://docs.novu.co/framework/overview#quickstart)

## Workflow Payload Guide
# Payload

Workflow payload is the data passed during the `novu.trigger` method. This is useful for ensuring that the payload is correctly formatted and that the data is valid.

## [Payload Schema](https://docs.novu.co/framework/payload\#payload-schema)

Payload schema is defining the payload passed during the `novu.trigger` method. This is useful for ensuring that the payload is correctly formatted and that the data is valid.

```
import { ReactEmailContent } from './ReactEmailContent';

workflow(
  'comment-on-post',
  async ({ step, payload }) => {
    await step.email('send-email', async () => {
      return {
        subject: `You have a new comment from: ${payload.author_name}.`,
        body: render(<ReactEmailContent comment={payload.comment} />),
      };
    });
  },
  {
    payloadSchema: {
      // Always `object`
      type: 'object',
      // Specify the properties to validate. Supports deep nesting.
      properties: {
        post_id: { type: 'number' },
        author_name: { type: 'string' },
        comment: { type: 'string', maxLength: 200 },
      },
      // Specify the array of which properties are required.
      required: ['post_id', 'comment'],
      // Used to enforce full type strictness, with no rogue properties.
      additionalProperties: false,
      // The `as const` is important to let Typescript know that this
      // type won't change, enabling strong typing on `inputs` via type
      // inference of the provided JSON Schema.
    } as const,
  }
);
```

## [Passing Payload](https://docs.novu.co/framework/payload\#passing-payload)

Here is an example of the validated payload during trigger:

```
novu.trigger('comment-on-post', {
  to: 'subscriber_id',
  payload: {
    post_id: 1234,
    author_name: 'John Doe',
    comment: 'Looks good!',
  },
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/payload.mdx)

[Previous\\
\\
Tags](https://docs.novu.co/framework/tags) [Next\\
\\
Controls](https://docs.novu.co/framework/controls)

### On this page

[Payload Schema](https://docs.novu.co/framework/payload#payload-schema) [Passing Payload](https://docs.novu.co/framework/payload#passing-payload)

## Push Notification Setup
# Push Channel

Learn how to configure the Push channel

Push notifications are a powerful way to deliver real-time updates, reminders, and personalized messages to your users across mobile and web platforms.
Whether it's a promotional alert, a system notification, or a critical update, push notifications are key to enhancing engagement and retention.

Learn more about the [Push Channel](https://docs.novu.co/platform/integrations/push)

```
await step.push('push', async () => {
  return {
    subject: 'You received a message',
    body: 'A new post has been created',
  };
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/push-channel.mdx)

[Previous\\
\\
In-App](https://docs.novu.co/framework/in-app-channel) [Next\\
\\
SMS](https://docs.novu.co/framework/sms-channel)

## Skip Function
# Skip Function

Skip any step of the workflow based on a condition

The `skip` action is used to skip the next step in the workflow. `skip` function is available for all the steps in the workflow.

## [Common usecases](https://docs.novu.co/framework/skip\#common-usecases)

- Skip the step if the user has already seen the notification
- Skip the step if the user has not completed the previous step

## [Example](https://docs.novu.co/framework/skip\#example)

In this example, we will send an in-app notification for task reminder to the user and then send an email reminder 6 hours later if the user has not read the in-app notification.

```
workflow('skip-email-if-in-app-notification-seen', async ({ payload }) => {
  const inAppNotification = await step.inApp(
    'send-in-app-notification',
    async () => {
      return {
        subject: 'Task reminder!',
        body: 'Task is not yet complete. Please complete the task.',
      };
    },
  );

  // delay for 6 hrs
  await step.delay("delay-step-before-email", async () => {
    return {
      unit: 'hours',
      amount: 6,
    };
  });

  // send email notification after 6 hrs if the in-app notification has not been read
  await step.email(
    'send-email',
    () => {
      return {
        subject: `Task reminder!`,
        body: 'Task is not yet complete. Please complete the task.',
      };
    },
    {
      // skip the in-app step if the in-app notification has been read
      skip: () => inAppNotification.read === true,
    }
  );
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/skip.mdx)

[Previous\\
\\
Custom Step](https://docs.novu.co/framework/custom) [Next\\
\\
Overview](https://docs.novu.co/framework/typescript/overview)

### On this page

[Common usecases](https://docs.novu.co/framework/skip#common-usecases) [Example](https://docs.novu.co/framework/skip#example)

## SMS Channel Setup
# SMS Channel

Learn how to configure the SMS channel

Novu makes SMS notifications simple, scalable, and reliable, enabling seamless integration with your communication stack. Whether you're sending OTPs, updates, or transactional messages, Novu ensures your SMS notifications are delivered efficiently and effectively.

Learn more about the [SMS Channel](https://docs.novu.co/platform/integrations/sms).

```
await step.sms('sms', async () => {
  return {
    body: 'A new post has been created',
  };
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/sms-channel.mdx)

[Previous\\
\\
Push](https://docs.novu.co/framework/push-channel) [Next\\
\\
Chat](https://docs.novu.co/framework/chat-channel)

## Novu Local Studio
# Local Studio

Learn how to use the Local Studio companion app for Novu Framework SDK

The Local Studio is a companion app to the Novu Framework SDK. Its goal is to provide a local environment that lives near your code.

To launch the Local Studio locally you can run the following command in your terminal:

```
npx novu@latest dev
```

Learn how to use the `novu` CLI package and the available [CLI flags](https://docs.novu.co/framework/studio#novu-cli-flags) to use for
customization

The Dev Studio will be started by default on port 2022, and accessible via: [http://localhost:2022](http://localhost:2022/)

After successfully connecting the Studio to your local [Bridge Endpoint](https://docs.novu.co/framework/endpoint), you will be able to preview in real time any workflows and content defined in your code. This is ideal for quick prototyping, debugging, styling, and adjusting your workflows before syncing them to Novu Cloud.

## [Control and Payload forms](https://docs.novu.co/framework/studio\#control-and-payload-forms)

You can quickly modify the Step Controls and workflow Payload to preview your workflow's different states. This is helpful to quickly debug how the email will behave in case of a missing control, or iterate more complex content structures.

## [Syncing State](https://docs.novu.co/framework/studio\#syncing-state)

Syncing state to your Production or Development environment in Novu, is recommended to do via your CI pipeline. However, a sync can be made using the Local Studio for quick experimentation.

Click on the Sync button at the top right corner of the navigation bar. This will open the Sync State modal.

## [Tunnel URL](https://docs.novu.co/framework/studio\#tunnel-url)

By default the Novu CLI will automatically create a tunnel URL connected to your local computer. This tunnel will proxy any workflow engine requests on our cloud to your local machine.

## [Connect Studio to your local server](https://docs.novu.co/framework/studio\#connect-studio-to-your-local-server)

By default, the Studio will connect to the Novu [Bridge Endpoint](https://docs.novu.co/framework/endpoint) running on your local machine at `http://localhost:4000/api/novu` if your server is running on a different port or the workflows are served from a different endpoint path you can use the following optional parameters to connect:

```
npx novu@latest dev --port <YOUR_SERVER_PORT> --route <YOUR_NOVU_ROUTE_PATH>
```

- **YOUR\_SERVER\_PORT** \- This accepts the port number where your server is running. Defaults to 4000.
- **YOUR\_NOVU\_ROUTE\_PATH** \- This is the mounted path of the framework `serve` function. Defaults to `/api/novu`.

## [Novu CLI flags](https://docs.novu.co/framework/studio\#novu-cli-flags)

The Novu CLI command `npx novu@latest dev` supports a number of flags:

| Flag | Long form usage example | Description | Default value |
| --- | --- | --- | --- |
| -p | --port `<port>` | Bridge application port | 4000 |
| -r | --route `<route>` | Bridge application route | /api/novu |
| -o | --origin `<origin>` | Bridge application origin | [http://localhost](http://localhost/) |
| -d | --dashboard-url `<url>` | Novu Cloud dashboard URL | [https://dashboard-v2.novu.co](https://dashboard-v2.novu.co/) |
| -sp | --studio-port `<port>` | Local Studio server port | 2022 |
| -t | --tunnel `<url>` | Self hosted tunnel url | null |
| -H | --headless | Run bridge in headless mode | false |

Example: If bridge application is running on port `3002` and Novu account is in `EU` region.

```
npx novu@latest dev --port 3002 --dashboard-url https://eu.dashboard.novu.co
```

## [FAQ](https://docs.novu.co/framework/studio\#faq)

### Running Studio without a tunnel

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/studio.mdx)

[Previous\\
\\
SvelteKit](https://docs.novu.co/framework/quickstart/svelte) [Next\\
\\
Bridge Endpoint](https://docs.novu.co/framework/endpoint)

### On this page

[Control and Payload forms](https://docs.novu.co/framework/studio#control-and-payload-forms) [Syncing State](https://docs.novu.co/framework/studio#syncing-state) [Tunnel URL](https://docs.novu.co/framework/studio#tunnel-url) [Connect Studio to your local server](https://docs.novu.co/framework/studio#connect-studio-to-your-local-server) [Novu CLI flags](https://docs.novu.co/framework/studio#novu-cli-flags) [FAQ](https://docs.novu.co/framework/studio#faq)

## Notification Tags Guide
# Framework Tags Implementation

Learn how to implement and manage notification tags programmatically using the Novu Framework SDK.

**Tags** act like labels or categories that help you organize and manage notifications in your app. By grouping notifications under specific tags, you can better control how they're filtered, displayed, or managed by both your app and your users.

[Learn more about why and how to use tags](https://docs.novu.co/platform/workflow/tags)

## [How to Add Tags to Notifications](https://docs.novu.co/framework/tags\#how-to-add-tags-to-notifications)

Adding tags to a notification is simple and can be done directly in the workflow configuration.
Here's an example:

```
import { workflow } from '@novu/framework';

workflow(
  'acme-login-alert',
  async ({ step, payload }) => {
    await step.inApp('inbox', async () => {
      return {
        subject: 'New Login Detected',
        body: "We noticed a login from a new device or location. If this wasn't you, change your password immediately.",
      };
    });
  },
  {
    tags: ['security'],
  }
);

workflow(
  'acme-password-change',
  async ({ step, payload }) => {
    await step.inApp('inbox', async () => {
      return {
        subject: 'Password Changed',
        body: "Your password was successfully updated. If you didn't request this, contact support right away.",
      };
    });
  },
  {
    tags: ['security'],
  }
);
```

Let's break it down:
In the above workflows, whenever someone logs in from a new device, or changes their password, the notification is tagged as security.

**Benefits:**

- **Filtered Views**: Users can quickly locate security-related notifications in their inbox.
- **Custom Preferences**: Users who only want security alerts can opt in or out of that tag category.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/tags.mdx)

[Previous\\
\\
Bridge Endpoint](https://docs.novu.co/framework/endpoint) [Next\\
\\
Payload](https://docs.novu.co/framework/payload)

### On this page

[How to Add Tags to Notifications](https://docs.novu.co/framework/tags#how-to-add-tags-to-notifications)

## Webhook Integration Guides
# Guides overview

## [Webhook Integration Guides](https://docs.novu.co/guides/overview\#webhook-integration-guides)

Webhooks enable real-time event-driven communication between applications, making integrations more efficient and responsive.

In Novu, webhooks trigger notification workflows whenever specific events occur in external applications. This ensures notifications are delivered exactly when they’re needed, keeping users informed without delay.

For example, when a user signs up via Clerk or completes a payment through Stripe, a webhook delivers the event payload to Novu, which then processes it and triggers the appropriate workflow.

This allows for real-time notifications—whether it’s a welcome email, payment confirmation SMS, or in-app alert—without the need for constant polling, ensuring efficiency and a seamless user experience.

### Clerk

Use Clerks webhooks events to trigger authentication related notifications workflows.

### Stripe

Use Stripe webhooks events to trigger payment related notifications workflows.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/guides/overview.mdx)

[Next\\
\\
Clerk](https://docs.novu.co/guides/webhooks/clerk)

### On this page

[Webhook Integration Guides](https://docs.novu.co/guides/overview#webhook-integration-guides)

## Novu Notification System
# What is Novu?

The open-source notification infrastructure that simplifies in-app, email, chat, and push notifications.

Novu is an open-source notification infrastructure built for anyone who needs an easy way to implement, manage, and deliver notifications across multi-channels, including in-app, email, chat, push, and SMS.

Novu is designed to fit and scale with your existing system by providing a unified API, customizable Inbox component that can be integrated with six lines of code, a drag-and-drop workflow builder, and an intuitive dashboard for sending and managing notifications.

Trusted by startups and enterprises alike for its ease of use, developer-first design, and cost-effective scalability, Novu ensures that notifications are delivered reliably to users without complexity.

[**Quickstart** \\
Get started in minutes and focus on building, not maintaining notifications.](https://docs.novu.co/quickstart/nextjs)

## [Why Novu?](https://docs.novu.co/platform/what-is-novu\#why-novu)

Novu is designed to provide a powerful, flexible, and easy-to-use notification solution that helps teams save time, reduce complexity, and improve user engagement across multiple platforms. Here’s what sets it apart from other notification infrastructure solutions:

### [The only fully open-source notification infrastructure](https://docs.novu.co/platform/what-is-novu\#the-only-fully-open-source-notification-infrastructure)

- **Backed by a growing open-source community**. Novu is 100% open-source, with a rich community of creative minds constantly contributing to improve its capabilities.
- **Built with an API-first approach**. Developers can deeply customize workflows and automate notifications through Novu APIs.
- **Easily integrates with existing tools**. Novu works with modern development stacks, enabling smooth adoption without disrupting workflows.

### [Best-in-class in-app notification inbox](https://docs.novu.co/platform/what-is-novu\#best-in-class-in-app-notification-inbox)

- **Simplifies in-app notifications**. Developers can integrate real-time notifications in any web or mobile app with six lines of code.
- **Offers full customization**. Developers can use hooks and headless libraries to modify the look and feel of the inbox UI.
- **Empowers users with preferences**. The [<Inbox />](https://docs.novu.co/platform/inbox/react/components/inbox) built-in preference management lets your users control how they receive notifications.

### [True omnichannel notification management](https://docs.novu.co/platform/what-is-novu\#true-omnichannel-notification-management)

- **Unifies all notification channels**. Developers can manage email, in-app, push, SMS, and chat notifications from a single API.
- **Optimizes delivery strategies**. Novu enables multi-step workflows, ensuring users receive messages in the most effective channel.
- **Reduces notification overload**. The digest feature consolidates updates (for example, “10 new likes on your post”), improving user experience.

### [Flexible workflow automation: no-code or code-first](https://docs.novu.co/platform/what-is-novu\#flexible-workflow-automation-no-code-or-code-first)

- **No-code workflow automation**. The drag-and-drop workflow builder makes notification automation accessible to your non-technical teams via the Novu’s dashboard.
- **Provides ultimate control with code-first workflows**. [The Novu Framework SDK](https://docs.novu.co/platform/sdks/overview) lets developers define workflows in code, integrate with CI/CD, and add custom automation logic.
- **Consistent notification experience across teams**. Standardizes notification patterns, preventing each team from implementing separate, inconsistent solutions.

### [Advanced features for power users](https://docs.novu.co/platform/what-is-novu\#advanced-features-for-power-users)

- **Extends functionality with the Novu Framework SDK**. Developers can integrate custom workflows beyond Novu’s default capabilities.
- **Enhances real-time engagement**. Subscriber presence tracking detects if a user is online before sending notifications.
- **Supports multi-tenancy**. Ideal for SaaS businesses managing multiple customer accounts.

### [Cost-effective with clear, transparent pricing](https://docs.novu.co/platform/what-is-novu\#cost-effective-with-clear-transparent-pricing)

- **Eliminates unpredictable costs**. Fixed pricing ensures startups and enterprises can scale without hidden fees.
- **Offers a free tier for easy adoption**. Independent developers and small businesses can get started at no cost.

## [Common Use Cases](https://docs.novu.co/platform/what-is-novu\#common-use-cases)

Here is how developers, startups and enterprises are currently using Novu in real-world projects:

### [Transactional notifications](https://docs.novu.co/platform/what-is-novu\#transactional-notifications)

Order confirmations and shipping updates for e-commerce.

Password reset emails and authentication alerts for SaaS platforms.

Payment failure or subscription renewal reminders.

### [In-app notification feeds](https://docs.novu.co/platform/what-is-novu\#in-app-notification-feeds)

Show unread notifications directly in the app using Novu’s Inbox component.

Customize the notification UI with hooks and headless components.

Deliver updates, such as mentions, comments, or system alerts.

### [Digest and summary notifications](https://docs.novu.co/platform/what-is-novu\#digest-and-summary-notifications)

“10 people liked your post” (similar to Facebook).

A weekly report summarizing account activity.

A daily task reminder for productivity apps.

### [Multi-step notification workflows](https://docs.novu.co/platform/what-is-novu\#multi-step-notification-workflows)

Step 1: Send an in-app notification → Step 2: If unread in 24 hours, send an email → Step 3: If still unread, send an SMS reminder.

Delay and schedule notifications using Novu’s workflow automation.

### [Multi-channel notification delivery](https://docs.novu.co/platform/what-is-novu\#multi-channel-notification-delivery)

Notify VIP customers via SMS while sending regular users an email.

Route system alerts to Slack or Microsoft Teams for internal teams.

Let's users to opt-in to specific channels (e.g., receive marketing updates via email but urgent alerts via push notifications).

### [Customizable notification management](https://docs.novu.co/platform/what-is-novu\#customizable-notification-management)

Let users enable/disable notification channels (email, SMS, push).

Offer per-event notification settings (e.g., only notify me when tagged in a comment).

Manage user preferences with Novu’s built-in preference center.

## [Next steps](https://docs.novu.co/platform/what-is-novu\#next-steps)

Get started with Novu in minutes! Choose a quickstart guide to integrate notifications into your application:

[**Next.js** \\
Get started with our pre-built UI component in Next.js](https://docs.novu.co/platform/quickstart/nextjs) [**React** \\
Get started with our pre-built UI component in React](https://docs.novu.co/platform/quickstart/react) [**Remix** \\
Get started with our pre-built UI component in Remix](https://docs.novu.co/platform/quickstart/remix)

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/platform/what-is-novu.mdx)

[Previous\\
\\
Overview](https://docs.novu.co/platform/overview) [Next\\
\\
Next.js](https://docs.novu.co/platform/quickstart/nextjs)

### On this page

[Why Novu?](https://docs.novu.co/platform/what-is-novu#why-novu) [The only fully open-source notification infrastructure](https://docs.novu.co/platform/what-is-novu#the-only-fully-open-source-notification-infrastructure) [Best-in-class in-app notification inbox](https://docs.novu.co/platform/what-is-novu#best-in-class-in-app-notification-inbox) [True omnichannel notification management](https://docs.novu.co/platform/what-is-novu#true-omnichannel-notification-management) [Flexible workflow automation: no-code or code-first](https://docs.novu.co/platform/what-is-novu#flexible-workflow-automation-no-code-or-code-first) [Advanced features for power users](https://docs.novu.co/platform/what-is-novu#advanced-features-for-power-users) [Cost-effective with clear, transparent pricing](https://docs.novu.co/platform/what-is-novu#cost-effective-with-clear-transparent-pricing) [Common Use Cases](https://docs.novu.co/platform/what-is-novu#common-use-cases) [Transactional notifications](https://docs.novu.co/platform/what-is-novu#transactional-notifications) [In-app notification feeds](https://docs.novu.co/platform/what-is-novu#in-app-notification-feeds) [Digest and summary notifications](https://docs.novu.co/platform/what-is-novu#digest-and-summary-notifications) [Multi-step notification workflows](https://docs.novu.co/platform/what-is-novu#multi-step-notification-workflows) [Multi-channel notification delivery](https://docs.novu.co/platform/what-is-novu#multi-channel-notification-delivery) [Customizable notification management](https://docs.novu.co/platform/what-is-novu#customizable-notification-management) [Next steps](https://docs.novu.co/platform/what-is-novu#next-steps)

## Novu Platform Overview
# Documentation

Novu is the platform for adding real-time Inbox and notifications into your application.

[Create an Account](https://dashboard-v2.novu.co/auth/sign-up)

[**Get started** \\
\\
Learn how to install and configure Novu into your Next.js project.](https://docs.novu.co/platform/quickstart/nextjs) [**The Basics** \\
\\
Learn about the basic concepts of Novu, including workflows, subscribers, etc...](https://docs.novu.co/platform/concepts/workflows)

[**<Inbox />** \\
\\
Learn about the inbox component and how to customize it.](https://docs.novu.co/platform/inbox/overview)

## API Reference

[REST API](https://docs.novu.co/api-reference/overview) [Typescript](https://docs.novu.co/platform/sdks/server/typescript) [Python](https://docs.novu.co/platform/sdks/server/python) [Go](https://docs.novu.co/platform/sdks/server/go) [PHP](https://docs.novu.co/platform/sdks/server/php) [Java](https://docs.novu.co/platform/sdks/server/java) [Laravel](https://docs.novu.co/platform/sdks/server/laravel) [.NET](https://docs.novu.co/platform/sdks/server/dotnet) [Ruby](https://docs.novu.co/platform/sdks/server/ruby) [Kotlin](https://docs.novu.co/platform/sdks/server/kotlin)

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/platform/overview.mdx)

[Next\\
\\
What is Novu?](https://docs.novu.co/platform/what-is-novu)

## Novu Notification System
# What is Novu?

The open-source notification infrastructure that simplifies in-app, email, chat, and push notifications.

Novu is an open-source notification infrastructure built for anyone who needs an easy way to implement, manage, and deliver notifications across multi-channels, including in-app, email, chat, push, and SMS.

Novu is designed to fit and scale with your existing system by providing a unified API, customizable Inbox component that can be integrated with six lines of code, a drag-and-drop workflow builder, and an intuitive dashboard for sending and managing notifications.

Trusted by startups and enterprises alike for its ease of use, developer-first design, and cost-effective scalability, Novu ensures that notifications are delivered reliably to users without complexity.

[**Quickstart** \\
Get started in minutes and focus on building, not maintaining notifications.](https://docs.novu.co/quickstart/nextjs)

## [Why Novu?](https://docs.novu.co/platform/what-is-novu\#why-novu)

Novu is designed to provide a powerful, flexible, and easy-to-use notification solution that helps teams save time, reduce complexity, and improve user engagement across multiple platforms. Here’s what sets it apart from other notification infrastructure solutions:

### [The only fully open-source notification infrastructure](https://docs.novu.co/platform/what-is-novu\#the-only-fully-open-source-notification-infrastructure)

- **Backed by a growing open-source community**. Novu is 100% open-source, with a rich community of creative minds constantly contributing to improve its capabilities.
- **Built with an API-first approach**. Developers can deeply customize workflows and automate notifications through Novu APIs.
- **Easily integrates with existing tools**. Novu works with modern development stacks, enabling smooth adoption without disrupting workflows.

### [Best-in-class in-app notification inbox](https://docs.novu.co/platform/what-is-novu\#best-in-class-in-app-notification-inbox)

- **Simplifies in-app notifications**. Developers can integrate real-time notifications in any web or mobile app with six lines of code.
- **Offers full customization**. Developers can use hooks and headless libraries to modify the look and feel of the inbox UI.
- **Empowers users with preferences**. The [<Inbox />](https://docs.novu.co/platform/inbox/react/components/inbox) built-in preference management lets your users control how they receive notifications.

### [True omnichannel notification management](https://docs.novu.co/platform/what-is-novu\#true-omnichannel-notification-management)

- **Unifies all notification channels**. Developers can manage email, in-app, push, SMS, and chat notifications from a single API.
- **Optimizes delivery strategies**. Novu enables multi-step workflows, ensuring users receive messages in the most effective channel.
- **Reduces notification overload**. The digest feature consolidates updates (for example, “10 new likes on your post”), improving user experience.

### [Flexible workflow automation: no-code or code-first](https://docs.novu.co/platform/what-is-novu\#flexible-workflow-automation-no-code-or-code-first)

- **No-code workflow automation**. The drag-and-drop workflow builder makes notification automation accessible to your non-technical teams via the Novu’s dashboard.
- **Provides ultimate control with code-first workflows**. [The Novu Framework SDK](https://docs.novu.co/platform/sdks/overview) lets developers define workflows in code, integrate with CI/CD, and add custom automation logic.
- **Consistent notification experience across teams**. Standardizes notification patterns, preventing each team from implementing separate, inconsistent solutions.

### [Advanced features for power users](https://docs.novu.co/platform/what-is-novu\#advanced-features-for-power-users)

- **Extends functionality with the Novu Framework SDK**. Developers can integrate custom workflows beyond Novu’s default capabilities.
- **Enhances real-time engagement**. Subscriber presence tracking detects if a user is online before sending notifications.
- **Supports multi-tenancy**. Ideal for SaaS businesses managing multiple customer accounts.

### [Cost-effective with clear, transparent pricing](https://docs.novu.co/platform/what-is-novu\#cost-effective-with-clear-transparent-pricing)

- **Eliminates unpredictable costs**. Fixed pricing ensures startups and enterprises can scale without hidden fees.
- **Offers a free tier for easy adoption**. Independent developers and small businesses can get started at no cost.

## [Common Use Cases](https://docs.novu.co/platform/what-is-novu\#common-use-cases)

Here is how developers, startups and enterprises are currently using Novu in real-world projects:

### [Transactional notifications](https://docs.novu.co/platform/what-is-novu\#transactional-notifications)

Order confirmations and shipping updates for e-commerce.

Password reset emails and authentication alerts for SaaS platforms.

Payment failure or subscription renewal reminders.

### [In-app notification feeds](https://docs.novu.co/platform/what-is-novu\#in-app-notification-feeds)

Show unread notifications directly in the app using Novu’s Inbox component.

Customize the notification UI with hooks and headless components.

Deliver updates, such as mentions, comments, or system alerts.

### [Digest and summary notifications](https://docs.novu.co/platform/what-is-novu\#digest-and-summary-notifications)

“10 people liked your post” (similar to Facebook).

A weekly report summarizing account activity.

A daily task reminder for productivity apps.

### [Multi-step notification workflows](https://docs.novu.co/platform/what-is-novu\#multi-step-notification-workflows)

Step 1: Send an in-app notification → Step 2: If unread in 24 hours, send an email → Step 3: If still unread, send an SMS reminder.

Delay and schedule notifications using Novu’s workflow automation.

### [Multi-channel notification delivery](https://docs.novu.co/platform/what-is-novu\#multi-channel-notification-delivery)

Notify VIP customers via SMS while sending regular users an email.

Route system alerts to Slack or Microsoft Teams for internal teams.

Let's users to opt-in to specific channels (e.g., receive marketing updates via email but urgent alerts via push notifications).

### [Customizable notification management](https://docs.novu.co/platform/what-is-novu\#customizable-notification-management)

Let users enable/disable notification channels (email, SMS, push).

Offer per-event notification settings (e.g., only notify me when tagged in a comment).

Manage user preferences with Novu’s built-in preference center.

## [Next steps](https://docs.novu.co/platform/what-is-novu\#next-steps)

Get started with Novu in minutes! Choose a quickstart guide to integrate notifications into your application:

[**Next.js** \\
Get started with our pre-built UI component in Next.js](https://docs.novu.co/platform/quickstart/nextjs) [**React** \\
Get started with our pre-built UI component in React](https://docs.novu.co/platform/quickstart/react) [**Remix** \\
Get started with our pre-built UI component in Remix](https://docs.novu.co/platform/quickstart/remix)

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/platform/what-is-novu.mdx)

[Previous\\
\\
Overview](https://docs.novu.co/platform/overview) [Next\\
\\
Next.js](https://docs.novu.co/platform/quickstart/nextjs)

### On this page

[Why Novu?](https://docs.novu.co/platform/what-is-novu#why-novu) [The only fully open-source notification infrastructure](https://docs.novu.co/platform/what-is-novu#the-only-fully-open-source-notification-infrastructure) [Best-in-class in-app notification inbox](https://docs.novu.co/platform/what-is-novu#best-in-class-in-app-notification-inbox) [True omnichannel notification management](https://docs.novu.co/platform/what-is-novu#true-omnichannel-notification-management) [Flexible workflow automation: no-code or code-first](https://docs.novu.co/platform/what-is-novu#flexible-workflow-automation-no-code-or-code-first) [Advanced features for power users](https://docs.novu.co/platform/what-is-novu#advanced-features-for-power-users) [Cost-effective with clear, transparent pricing](https://docs.novu.co/platform/what-is-novu#cost-effective-with-clear-transparent-pricing) [Common Use Cases](https://docs.novu.co/platform/what-is-novu#common-use-cases) [Transactional notifications](https://docs.novu.co/platform/what-is-novu#transactional-notifications) [In-app notification feeds](https://docs.novu.co/platform/what-is-novu#in-app-notification-feeds) [Digest and summary notifications](https://docs.novu.co/platform/what-is-novu#digest-and-summary-notifications) [Multi-step notification workflows](https://docs.novu.co/platform/what-is-novu#multi-step-notification-workflows) [Multi-channel notification delivery](https://docs.novu.co/platform/what-is-novu#multi-channel-notification-delivery) [Customizable notification management](https://docs.novu.co/platform/what-is-novu#customizable-notification-management) [Next steps](https://docs.novu.co/platform/what-is-novu#next-steps)

## Broadcast Event to All
# Broadcast event to all

Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.
In the future could be used to trigger events to a subset of subscribers based on defined filters.

POST `/v1/events/trigger/broadcast`

Hide sidebar

^



K

.:=+++++=================- .\-\-#\\* :. .\-:\-\\*\\* -. .:\-::\-\+\\* =: .:-:::-=# :: .\-:::\-\-\-\-\\*\\* .. .-:::::---=# .. :\-::::::\-\-\-\-\\*\\* ...:-::::::::----\*= ...\-::::::::\-\-\-\-\-\-\+\- ....::::::::-------= .. .:::::\-\-\-\-\-\-\-\-\-\-\+\+ .. .:::----------+\*\*+\*++\*+\*++\*+++\*++++++++++:. ------------+\*+=-=======================. .----------+\*+=========================:. :--------+\*+=-========================. .=------+\*+=-========================:. .=----+\*+=-------=================+-. .----+\*+=----------================. .:=-+\*+=----------=-==============- .-+\*+=----------------===========. .-+=------------------====-====:.

Test

## [Authorization](https://docs.novu.co/api-reference/events/events-controller_broadcast-event-to-all\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/events/events-controller_broadcast-event-to-all\#request-body)

`application/json` Required

`name` Requiredstring

The trigger identifier associated for the template you wish to send. This identifier can be found on the template page.

`payload` Requiredobject

The payload object is used to pass additional information that
could be used to render the template, or perform routing rules based on it.
For In-App channel, payload data are also available in

Show Attributes

`overrides` object

This could be used to override provider specific configurations

Show Attributes

`transactionId` string

A unique identifier for this transaction, we will generated a UUID if not provided.

`actor` string \| object

It is used to display the Avatar of the provided actor's subscriber id or actor object.
If a new actor object is provided, we will create a new subscriber in our system

Show Attributes

`tenant` string \| object

It is used to specify a tenant context during trigger event.
If a new tenant object is provided, we will create a new tenant.

Show Attributes

## [Header Parameters](https://docs.novu.co/api-reference/events/events-controller_broadcast-event-to-all\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/events/trigger/broadcast" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "string",
    "payload": {
      "comment_id": "string",
      "post": {
        "text": "string"
      }
    },
    "overrides": {
      "fcm": {
        "data": {
          "key": "value"
        }
      }
    },
    "transactionId": "string",
    "actor": "string",
    "tenant": "string"
  }'
```

200201400401403404405409413414415422429500503

OK

### Response

```
{
  "acknowledged": true,
  "status": "error",
  "error": [\
    "string"\
  ],
  "transactionId": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/events/events-controller_broadcast-event-to-all.mdx)

[Previous\\
\\
Cancel triggered eventDELETE](https://docs.novu.co/api-reference/events/events-controller_cancel) [Next\\
\\
Create subscriberPOST](https://docs.novu.co/api-reference/subscribers/subscribers-controller_create-subscriber)

## Cancel Triggered Event
# Cancel triggered event

Using a previously generated transactionId during the event trigger,
will cancel any active or pending workflows. This is useful to cancel active digests, delays etc...


DELETE `/v1/events/trigger/{transactionId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/events/events-controller_cancel\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/events/events-controller_cancel\#path-parameters)

`transactionId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/events/events-controller_cancel\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v1/events/trigger/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

### Response

```
true
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/events/events-controller_cancel.mdx)

[Previous\\
\\
Bulk trigger eventPOST](https://docs.novu.co/api-reference/events/events-controller_trigger-bulk) [Next\\
\\
Broadcast event to allPOST](https://docs.novu.co/api-reference/events/events-controller_broadcast-event-to-all)

## Bulk Event Trigger
# Bulk trigger event

Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.
The bulk API is limited to 100 events per request.


POST `/v1/events/trigger/bulk`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/events/events-controller_trigger-bulk\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/events/events-controller_trigger-bulk\#request-body)

`application/json` Required

`events` Requiredarray<object>

Show Attributes

## [Header Parameters](https://docs.novu.co/api-reference/events/events-controller_trigger-bulk\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/events/trigger/bulk" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "events": [\
      {\
        "name": "workflow_identifier",\
        "payload": {\
          "comment_id": "string",\
          "post": {\
            "text": "string"\
          }\
        },\
        "overrides": {\
          "fcm": {\
            "data": {\
              "key": "value"\
            }\
          }\
        },\
        "to": [\
          {\
            "subscriberId": "string",\
            "email": "string",\
            "firstName": "string",\
            "lastName": "string",\
            "phone": "string",\
            "avatar": "string",\
            "locale": "string",\
            "data": {\
              "property1": "string",\
              "property2": "string"\
            },\
            "channels": [\
              {\
                "providerId": "slack",\
                "integrationIdentifier": "string",\
                "credentials": {\
                  "webhookUrl": "string",\
                  "deviceTokens": [\
                    "string"\
                  ]\
                }\
              }\
            ],\
            "timezone": "string"\
          }\
        ],\
        "transactionId": "string",\
        "actor": "string",\
        "tenant": "string"\
      }\
    ]
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
[\
  {\
    "acknowledged": true,\
    "status": "error",\
    "error": [\
      "string"\
    ],\
    "transactionId": "string"\
  }\
]
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/events/events-controller_trigger-bulk.mdx)

[Previous\\
\\
Trigger eventPOST](https://docs.novu.co/api-reference/events/events-controller_trigger) [Next\\
\\
Cancel triggered eventDELETE](https://docs.novu.co/api-reference/events/events-controller_cancel)

## Trigger Event API
# Trigger event

Trigger event is the main (and only) way to send notifications to subscribers.
The trigger identifier is used to match the particular workflow associated with it.
Additional information can be passed according the body interface below.


POST `/v1/events/trigger`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/events/events-controller_trigger\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/events/events-controller_trigger\#request-body)

`application/json` Required

`name` Requiredstring

The trigger identifier of the workflow you wish to send. This identifier can be found on the workflow page.

`payload` object

The payload object is used to pass additional custom information that could be
used to render the workflow, or perform routing rules based on it.
This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.

Show Attributes

`overrides` object

This could be used to override provider specific configurations

Show Attributes

`to` Requiredarray<object \| object \| string> \| string \| object \| object

The recipients list of people who will receive the notification.

Object 1

Object 2

Object 3

`transactionId` string

A unique identifier for this transaction, we will generate a UUID if not provided.

`actor` string \| object

It is used to display the Avatar of the provided actor's subscriber id or actor object.
If a new actor object is provided, we will create a new subscriber in our system

Show Attributes

`tenant` string \| object

It is used to specify a tenant context during trigger event.
Existing tenants will be updated with the provided details.

Show Attributes

## [Header Parameters](https://docs.novu.co/api-reference/events/events-controller_trigger\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/events/trigger" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "workflow_identifier",
    "payload": {
      "comment_id": "string",
      "post": {
        "text": "string"
      }
    },
    "overrides": {
      "fcm": {
        "data": {
          "key": "value"
        }
      }
    },
    "to": [\
      {\
        "subscriberId": "string",\
        "email": "string",\
        "firstName": "string",\
        "lastName": "string",\
        "phone": "string",\
        "avatar": "string",\
        "locale": "string",\
        "data": {\
          "property1": "string",\
          "property2": "string"\
        },\
        "channels": [\
          {\
            "providerId": "slack",\
            "integrationIdentifier": "string",\
            "credentials": {\
              "webhookUrl": "string",\
              "deviceTokens": [\
                "string"\
              ]\
            }\
          }\
        ],\
        "timezone": "string"\
      }\
    ],
    "transactionId": "string",
    "actor": "string",
    "tenant": "string"
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
{
  "acknowledged": true,
  "status": "error",
  "error": [\
    "string"\
  ],
  "transactionId": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/events/events-controller_trigger.mdx)

[Previous\\
\\
Rate Limiting](https://docs.novu.co/api-reference/rate-limiting) [Next\\
\\
Bulk trigger eventPOST](https://docs.novu.co/api-reference/events/events-controller_trigger-bulk)

## Create Integration
# Create integration

Create an integration for the current environment the user is based on the API key provided

POST `/v1/integrations`

Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_create-integration\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/integrations/integrations-controller_create-integration\#request-body)

`application/json` Required

`name` string

The name of the integration

`identifier` string

The unique identifier for the integration

`_environmentId` string

The ID of the associated environment

Format: `"uuid"`

`providerId` Requiredstring

The provider ID for the integration

`channel` Requiredstring

The channel type for the integration

Value in: `"in_app" | "email" | "sms" | "chat" | "push"`

`credentials` object

The credentials for the integration

`active` boolean

If the integration is active, the validation on the credentials field will run

`check` boolean

Flag to check the integration status

`conditions` array<object>

Conditions for the integration

Show Attributes

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_create-integration\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/integrations" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "string",
    "identifier": "string",
    "_environmentId": "4ddd0a4a-e7ba-4cb7-9228-83cb6c8a2123",
    "providerId": "string",
    "channel": "in_app",
    "credentials": {
      "apiKey": "string",
      "user": "string",
      "secretKey": "string",
      "domain": "string",
      "password": "string",
      "host": "string",
      "port": "string",
      "secure": true,
      "region": "string",
      "accountSid": "string",
      "messageProfileId": "string",
      "token": "string",
      "from": "string",
      "senderName": "string",
      "projectName": "string",
      "applicationId": "string",
      "clientId": "string",
      "requireTls": true,
      "ignoreTls": true,
      "tlsOptions": {},
      "baseUrl": "string",
      "webhookUrl": "string",
      "redirectUrl": "string",
      "hmac": true,
      "serviceAccount": "string",
      "ipPoolName": "string",
      "apiKeyRequestHeader": "string",
      "secretKeyRequestHeader": "string",
      "idPath": "string",
      "datePath": "string",
      "apiToken": "string",
      "authenticateByToken": true,
      "authenticationTokenKey": "string",
      "instanceId": "string",
      "alertUid": "string",
      "title": "string",
      "imageUrl": "string",
      "state": "string",
      "externalLink": "string",
      "channelId": "string",
      "phoneNumberIdentification": "string",
      "accessKey": "string"
    },
    "active": true,
    "check": true,
    "conditions": [\
      {\
        "isNegated": true,\
        "type": "BOOLEAN",\
        "value": "AND",\
        "children": [\
          {\
            "field": "string",\
            "value": "string",\
            "operator": "LARGER",\
            "on": "subscriber"\
          }\
        ]\
      }\
    ]
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
{
  "_id": "string",
  "_environmentId": "string",
  "_organizationId": "string",
  "name": "string",
  "identifier": "string",
  "providerId": "string",
  "channel": "in_app",
  "credentials": {
    "apiKey": "string",
    "user": "string",
    "secretKey": "string",
    "domain": "string",
    "password": "string",
    "host": "string",
    "port": "string",
    "secure": true,
    "region": "string",
    "accountSid": "string",
    "messageProfileId": "string",
    "token": "string",
    "from": "string",
    "senderName": "string",
    "projectName": "string",
    "applicationId": "string",
    "clientId": "string",
    "requireTls": true,
    "ignoreTls": true,
    "tlsOptions": {},
    "baseUrl": "string",
    "webhookUrl": "string",
    "redirectUrl": "string",
    "hmac": true,
    "serviceAccount": "string",
    "ipPoolName": "string",
    "apiKeyRequestHeader": "string",
    "secretKeyRequestHeader": "string",
    "idPath": "string",
    "datePath": "string",
    "apiToken": "string",
    "authenticateByToken": true,
    "authenticationTokenKey": "string",
    "instanceId": "string",
    "alertUid": "string",
    "title": "string",
    "imageUrl": "string",
    "state": "string",
    "externalLink": "string",
    "channelId": "string",
    "phoneNumberIdentification": "string",
    "accessKey": "string"
  },
  "active": true,
  "deleted": true,
  "deletedAt": "string",
  "deletedBy": "string",
  "primary": true,
  "conditions": [\
    {\
      "isNegated": true,\
      "type": "BOOLEAN",\
      "value": "AND",\
      "children": [\
        {\
          "field": "string",\
          "value": "string",\
          "operator": "LARGER",\
          "on": "subscriber"\
        }\
      ]\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_create-integration.mdx)

[Previous\\
\\
Get messagesGET](https://docs.novu.co/api-reference/messages/messages-controller_get-messages) [Next\\
\\
Get active integrationsGET](https://docs.novu.co/api-reference/integrations/integrations-controller_get-active-integrations)

## Active Integrations
# Get active integrations

Return all the active integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change

GET `/v1/integrations/active`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_get-active-integrations\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_get-active-integrations\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/integrations/active" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

The list of active integrations belonging to the organization that are successfully returned.

### Response

```
[\
  {\
    "_id": "string",\
    "_environmentId": "string",\
    "_organizationId": "string",\
    "name": "string",\
    "identifier": "string",\
    "providerId": "string",\
    "channel": "in_app",\
    "credentials": {\
      "apiKey": "string",\
      "user": "string",\
      "secretKey": "string",\
      "domain": "string",\
      "password": "string",\
      "host": "string",\
      "port": "string",\
      "secure": true,\
      "region": "string",\
      "accountSid": "string",\
      "messageProfileId": "string",\
      "token": "string",\
      "from": "string",\
      "senderName": "string",\
      "projectName": "string",\
      "applicationId": "string",\
      "clientId": "string",\
      "requireTls": true,\
      "ignoreTls": true,\
      "tlsOptions": {},\
      "baseUrl": "string",\
      "webhookUrl": "string",\
      "redirectUrl": "string",\
      "hmac": true,\
      "serviceAccount": "string",\
      "ipPoolName": "string",\
      "apiKeyRequestHeader": "string",\
      "secretKeyRequestHeader": "string",\
      "idPath": "string",\
      "datePath": "string",\
      "apiToken": "string",\
      "authenticateByToken": true,\
      "authenticationTokenKey": "string",\
      "instanceId": "string",\
      "alertUid": "string",\
      "title": "string",\
      "imageUrl": "string",\
      "state": "string",\
      "externalLink": "string",\
      "channelId": "string",\
      "phoneNumberIdentification": "string",\
      "accessKey": "string"\
    },\
    "active": true,\
    "deleted": true,\
    "deletedAt": "string",\
    "deletedBy": "string",\
    "primary": true,\
    "conditions": [\
      {\
        "isNegated": true,\
        "type": "BOOLEAN",\
        "value": "AND",\
        "children": [\
          {\
            "field": "string",\
            "value": "string",\
            "operator": "LARGER",\
            "on": "subscriber"\
          }\
        ]\
      }\
    ]\
  }\
]
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_get-active-integrations.mdx)

[Previous\\
\\
Create integrationPOST](https://docs.novu.co/api-reference/integrations/integrations-controller_create-integration) [Next\\
\\
Get webhook support status for providerGET](https://docs.novu.co/api-reference/integrations/integrations-controller_get-webhook-support-status)

## Webhook Support Status
# Get webhook support status for provider

Return the status of the webhook for this provider, if it is supported or if it is not based on a boolean value

GET `/v1/integrations/webhook/provider/{providerOrIntegrationId}/status`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_get-webhook-support-status\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_get-webhook-support-status\#path-parameters)

`providerOrIntegrationId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_get-webhook-support-status\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/integrations/webhook/provider/<string>/status" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

The status of the webhook for the provider requested

### Response

```
true
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_get-webhook-support-status.mdx)

[Previous\\
\\
Get active integrationsGET](https://docs.novu.co/api-reference/integrations/integrations-controller_get-active-integrations) [Next\\
\\
Get integrationsGET](https://docs.novu.co/api-reference/integrations/integrations-controller_list-integrations)

## List Integrations
# Get integrations

Return all the integrations the user has created for that organization. Review v.0.17.0 changelog for a breaking change

GET `/v1/integrations`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_list-integrations\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_list-integrations\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/integrations" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

The list of integrations belonging to the organization that are successfully returned.

### Response

```
[\
  {\
    "_id": "string",\
    "_environmentId": "string",\
    "_organizationId": "string",\
    "name": "string",\
    "identifier": "string",\
    "providerId": "string",\
    "channel": "in_app",\
    "credentials": {\
      "apiKey": "string",\
      "user": "string",\
      "secretKey": "string",\
      "domain": "string",\
      "password": "string",\
      "host": "string",\
      "port": "string",\
      "secure": true,\
      "region": "string",\
      "accountSid": "string",\
      "messageProfileId": "string",\
      "token": "string",\
      "from": "string",\
      "senderName": "string",\
      "projectName": "string",\
      "applicationId": "string",\
      "clientId": "string",\
      "requireTls": true,\
      "ignoreTls": true,\
      "tlsOptions": {},\
      "baseUrl": "string",\
      "webhookUrl": "string",\
      "redirectUrl": "string",\
      "hmac": true,\
      "serviceAccount": "string",\
      "ipPoolName": "string",\
      "apiKeyRequestHeader": "string",\
      "secretKeyRequestHeader": "string",\
      "idPath": "string",\
      "datePath": "string",\
      "apiToken": "string",\
      "authenticateByToken": true,\
      "authenticationTokenKey": "string",\
      "instanceId": "string",\
      "alertUid": "string",\
      "title": "string",\
      "imageUrl": "string",\
      "state": "string",\
      "externalLink": "string",\
      "channelId": "string",\
      "phoneNumberIdentification": "string",\
      "accessKey": "string"\
    },\
    "active": true,\
    "deleted": true,\
    "deletedAt": "string",\
    "deletedBy": "string",\
    "primary": true,\
    "conditions": [\
      {\
        "isNegated": true,\
        "type": "BOOLEAN",\
        "value": "AND",\
        "children": [\
          {\
            "field": "string",\
            "value": "string",\
            "operator": "LARGER",\
            "on": "subscriber"\
          }\
        ]\
      }\
    ]\
  }\
]
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_list-integrations.mdx)

[Previous\\
\\
Get webhook support status for providerGET](https://docs.novu.co/api-reference/integrations/integrations-controller_get-webhook-support-status) [Next\\
\\
Delete integrationDELETE](https://docs.novu.co/api-reference/integrations/integrations-controller_remove-integration)

## Delete Integration API
# Delete integration

DELETE `/v1/integrations/{integrationId}`

Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_remove-integration\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_remove-integration\#path-parameters)

`integrationId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_remove-integration\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v1/integrations/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
[\
  {\
    "_id": "string",\
    "_environmentId": "string",\
    "_organizationId": "string",\
    "name": "string",\
    "identifier": "string",\
    "providerId": "string",\
    "channel": "in_app",\
    "credentials": {\
      "apiKey": "string",\
      "user": "string",\
      "secretKey": "string",\
      "domain": "string",\
      "password": "string",\
      "host": "string",\
      "port": "string",\
      "secure": true,\
      "region": "string",\
      "accountSid": "string",\
      "messageProfileId": "string",\
      "token": "string",\
      "from": "string",\
      "senderName": "string",\
      "projectName": "string",\
      "applicationId": "string",\
      "clientId": "string",\
      "requireTls": true,\
      "ignoreTls": true,\
      "tlsOptions": {},\
      "baseUrl": "string",\
      "webhookUrl": "string",\
      "redirectUrl": "string",\
      "hmac": true,\
      "serviceAccount": "string",\
      "ipPoolName": "string",\
      "apiKeyRequestHeader": "string",\
      "secretKeyRequestHeader": "string",\
      "idPath": "string",\
      "datePath": "string",\
      "apiToken": "string",\
      "authenticateByToken": true,\
      "authenticationTokenKey": "string",\
      "instanceId": "string",\
      "alertUid": "string",\
      "title": "string",\
      "imageUrl": "string",\
      "state": "string",\
      "externalLink": "string",\
      "channelId": "string",\
      "phoneNumberIdentification": "string",\
      "accessKey": "string"\
    },\
    "active": true,\
    "deleted": true,\
    "deletedAt": "string",\
    "deletedBy": "string",\
    "primary": true,\
    "conditions": [\
      {\
        "isNegated": true,\
        "type": "BOOLEAN",\
        "value": "AND",\
        "children": [\
          {\
            "field": "string",\
            "value": "string",\
            "operator": "LARGER",\
            "on": "subscriber"\
          }\
        ]\
      }\
    ]\
  }\
]
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_remove-integration.mdx)

[Previous\\
\\
Get integrationsGET](https://docs.novu.co/api-reference/integrations/integrations-controller_list-integrations) [Next\\
\\
Set integration as primaryPOST](https://docs.novu.co/api-reference/integrations/integrations-controller_set-integration-as-primary)

## Set Primary Integration
# Set integration as primary

POST `/v1/integrations/{integrationId}/set-primary`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_set-integration-as-primary\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_set-integration-as-primary\#path-parameters)

`integrationId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_set-integration-as-primary\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/integrations/<string>/set-primary" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "_environmentId": "string",
  "_organizationId": "string",
  "name": "string",
  "identifier": "string",
  "providerId": "string",
  "channel": "in_app",
  "credentials": {
    "apiKey": "string",
    "user": "string",
    "secretKey": "string",
    "domain": "string",
    "password": "string",
    "host": "string",
    "port": "string",
    "secure": true,
    "region": "string",
    "accountSid": "string",
    "messageProfileId": "string",
    "token": "string",
    "from": "string",
    "senderName": "string",
    "projectName": "string",
    "applicationId": "string",
    "clientId": "string",
    "requireTls": true,
    "ignoreTls": true,
    "tlsOptions": {},
    "baseUrl": "string",
    "webhookUrl": "string",
    "redirectUrl": "string",
    "hmac": true,
    "serviceAccount": "string",
    "ipPoolName": "string",
    "apiKeyRequestHeader": "string",
    "secretKeyRequestHeader": "string",
    "idPath": "string",
    "datePath": "string",
    "apiToken": "string",
    "authenticateByToken": true,
    "authenticationTokenKey": "string",
    "instanceId": "string",
    "alertUid": "string",
    "title": "string",
    "imageUrl": "string",
    "state": "string",
    "externalLink": "string",
    "channelId": "string",
    "phoneNumberIdentification": "string",
    "accessKey": "string"
  },
  "active": true,
  "deleted": true,
  "deletedAt": "string",
  "deletedBy": "string",
  "primary": true,
  "conditions": [\
    {\
      "isNegated": true,\
      "type": "BOOLEAN",\
      "value": "AND",\
      "children": [\
        {\
          "field": "string",\
          "value": "string",\
          "operator": "LARGER",\
          "on": "subscriber"\
        }\
      ]\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_set-integration-as-primary.mdx)

[Previous\\
\\
Delete integrationDELETE](https://docs.novu.co/api-reference/integrations/integrations-controller_remove-integration) [Next\\
\\
Update integrationPUT](https://docs.novu.co/api-reference/integrations/integrations-controller_update-integration-by-id)

## Update Integration API
# Update integration

PUT `/v1/integrations/{integrationId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/integrations/integrations-controller_update-integration-by-id\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/integrations/integrations-controller_update-integration-by-id\#request-body)

`application/json` Required

`name` string

`identifier` string

`_environmentId` string

`active` boolean

If the integration is active the validation on the credentials field will run

`credentials` object

Show Attributes

`removeNovuBranding` boolean

If true, the Novu branding will be removed from the Inbox component

`check` boolean

`conditions` array<object>

Show Attributes

## [Path Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_update-integration-by-id\#path-parameters)

`integrationId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/integrations/integrations-controller_update-integration-by-id\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X PUT "https://api.novu.co/v1/integrations/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "string",
    "identifier": "string",
    "_environmentId": "string",
    "active": true,
    "credentials": {
      "apiKey": "string",
      "user": "string",
      "secretKey": "string",
      "domain": "string",
      "password": "string",
      "host": "string",
      "port": "string",
      "secure": true,
      "region": "string",
      "accountSid": "string",
      "messageProfileId": "string",
      "token": "string",
      "from": "string",
      "senderName": "string",
      "projectName": "string",
      "applicationId": "string",
      "clientId": "string",
      "requireTls": true,
      "ignoreTls": true,
      "tlsOptions": {},
      "baseUrl": "string",
      "webhookUrl": "string",
      "redirectUrl": "string",
      "hmac": true,
      "serviceAccount": "string",
      "ipPoolName": "string",
      "apiKeyRequestHeader": "string",
      "secretKeyRequestHeader": "string",
      "idPath": "string",
      "datePath": "string",
      "apiToken": "string",
      "authenticateByToken": true,
      "authenticationTokenKey": "string",
      "instanceId": "string",
      "alertUid": "string",
      "title": "string",
      "imageUrl": "string",
      "state": "string",
      "externalLink": "string",
      "channelId": "string",
      "phoneNumberIdentification": "string",
      "accessKey": "string"
    },
    "removeNovuBranding": true,
    "check": true,
    "conditions": [\
      {\
        "isNegated": true,\
        "type": "BOOLEAN",\
        "value": "AND",\
        "children": [\
          {\
            "field": "string",\
            "value": "string",\
            "operator": "LARGER",\
            "on": "subscriber"\
          }\
        ]\
      }\
    ]
  }'
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "_environmentId": "string",
  "_organizationId": "string",
  "name": "string",
  "identifier": "string",
  "providerId": "string",
  "channel": "in_app",
  "credentials": {
    "apiKey": "string",
    "user": "string",
    "secretKey": "string",
    "domain": "string",
    "password": "string",
    "host": "string",
    "port": "string",
    "secure": true,
    "region": "string",
    "accountSid": "string",
    "messageProfileId": "string",
    "token": "string",
    "from": "string",
    "senderName": "string",
    "projectName": "string",
    "applicationId": "string",
    "clientId": "string",
    "requireTls": true,
    "ignoreTls": true,
    "tlsOptions": {},
    "baseUrl": "string",
    "webhookUrl": "string",
    "redirectUrl": "string",
    "hmac": true,
    "serviceAccount": "string",
    "ipPoolName": "string",
    "apiKeyRequestHeader": "string",
    "secretKeyRequestHeader": "string",
    "idPath": "string",
    "datePath": "string",
    "apiToken": "string",
    "authenticateByToken": true,
    "authenticationTokenKey": "string",
    "instanceId": "string",
    "alertUid": "string",
    "title": "string",
    "imageUrl": "string",
    "state": "string",
    "externalLink": "string",
    "channelId": "string",
    "phoneNumberIdentification": "string",
    "accessKey": "string"
  },
  "active": true,
  "deleted": true,
  "deletedAt": "string",
  "deletedBy": "string",
  "primary": true,
  "conditions": [\
    {\
      "isNegated": true,\
      "type": "BOOLEAN",\
      "value": "AND",\
      "children": [\
        {\
          "field": "string",\
          "value": "string",\
          "operator": "LARGER",\
          "on": "subscriber"\
        }\
      ]\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_update-integration-by-id.mdx)

[Previous\\
\\
Set integration as primaryPOST](https://docs.novu.co/api-reference/integrations/integrations-controller_set-integration-as-primary)

## Delete Message API
# Delete message

Deletes a message entity from the Novu platform

DELETE `/v1/messages/{messageId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/messages/messages-controller_delete-message\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/messages/messages-controller_delete-message\#path-parameters)

`messageId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/messages/messages-controller_delete-message\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v1/messages/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "acknowledged": true,
  "status": "deleted"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/messages/messages-controller_delete-message.mdx)

[Previous\\
\\
Rename a topicPATCH](https://docs.novu.co/api-reference/topics/topics-controller_rename-topic) [Next\\
\\
Delete messages by transactionIdDELETE](https://docs.novu.co/api-reference/messages/messages-controller_delete-messages-by-transaction-id)

## Delete Messages by Transaction ID
# Delete messages by transactionId

Deletes messages entity from the Novu platform using TransactionId of message

DELETE `/v1/messages/transaction/{transactionId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/messages/messages-controller_delete-messages-by-transaction-id\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/messages/messages-controller_delete-messages-by-transaction-id\#path-parameters)

`transactionId` Requiredstring

## [Query Parameters](https://docs.novu.co/api-reference/messages/messages-controller_delete-messages-by-transaction-id\#query-parameters)

`channel` string

The channel of the message to be deleted

Value in: `"in_app" | "email" | "sms" | "chat" | "push"`

## [Header Parameters](https://docs.novu.co/api-reference/messages/messages-controller_delete-messages-by-transaction-id\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v1/messages/transaction/<string>?channel=in_app" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

204400401403404405409413414415422429500503

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/messages/messages-controller_delete-messages-by-transaction-id.mdx)

[Previous\\
\\
Delete messageDELETE](https://docs.novu.co/api-reference/messages/messages-controller_delete-message) [Next\\
\\
Get messagesGET](https://docs.novu.co/api-reference/messages/messages-controller_get-messages)

## Get Messages API
# Get messages

Returns a list of messages, could paginate using the \`page\` query parameter

GET `/v1/messages`

Test

## [Authorization](https://docs.novu.co/api-reference/messages/messages-controller_get-messages\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Query Parameters](https://docs.novu.co/api-reference/messages/messages-controller_get-messages\#query-parameters)

`channel` string

Channel type through which the message is sent

Value in: `"in_app" | "email" | "sms" | "chat" | "push"`

`subscriberId` string

`transactionId` array<string>

`page` number

Default: `0`

`limit` number

Default: `10`

## [Header Parameters](https://docs.novu.co/api-reference/messages/messages-controller_get-messages\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/messages?channel=in_app&subscriberId=%3Cstring%3E&transactionId=string&page=0&limit=10" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

### Response

```
{
  "hasMore": true,
  "data": [\
    {\
      "_id": "string",\
      "_environmentId": "string",\
      "_organizationId": "string",\
      "_subscriberId": "string",\
      "transactionId": "string",\
      "_templateId": "string",\
      "_digestedNotificationId": "string",\
      "createdAt": "string",\
      "updatedAt": "string",\
      "channels": [\
        "in_app"\
      ],\
      "subscriber": {\
        "firstName": "string",\
        "subscriberId": "string",\
        "_id": "string",\
        "lastName": "string",\
        "email": "string",\
        "phone": "string"\
      },\
      "template": {\
        "_id": "string",\
        "name": "string",\
        "origin": "novu-cloud",\
        "triggers": [\
          {\
            "type": "event",\
            "identifier": "string",\
            "variables": [\
              {\
                "name": "string"\
              }\
            ],\
            "subscriberVariables": [\
              {\
                "name": "string"\
              }\
            ]\
          }\
        ]\
      },\
      "jobs": [\
        {\
          "_id": "string",\
          "type": "in_app",\
          "digest": {\
            "digestKey": "string",\
            "amount": 0,\
            "unit": "seconds",\
            "type": "regular",\
            "events": [\
              {}\
            ],\
            "backoff": true,\
            "backoffAmount": 0,\
            "backoffUnit": "seconds",\
            "updateMode": true,\
            "timed": {\
              "atTime": "string",\
              "weekDays": [\
                "monday"\
              ],\
              "monthDays": [\
                0\
              ],\
              "ordinal": "1",\
              "ordinalValue": "day",\
              "monthlyType": "each",\
              "cronExpression": "string"\
            }\
          },\
          "executionDetails": [\
            {\
              "_id": "string",\
              "createdAt": "string",\
              "status": "Success",\
              "detail": "string",\
              "isRetry": true,\
              "isTest": true,\
              "providerId": "emailjs",\
              "raw": "string",\
              "source": "Credentials"\
            }\
          ],\
          "step": {\
            "_id": "string",\
            "active": true,\
            "replyCallback": {},\
            "controlVariables": {},\
            "metadata": {},\
            "issues": {},\
            "filters": [\
              {\
                "isNegated": true,\
                "type": "BOOLEAN",\
                "value": "AND",\
                "children": [\
                  {\
                    "field": "string",\
                    "value": "string",\
                    "operator": "LARGER",\
                    "on": "subscriber"\
                  }\
                ]\
              }\
            ],\
            "template": {},\
            "variants": [\
              {\
                "_id": "string",\
                "active": true,\
                "replyCallback": {},\
                "controlVariables": {},\
                "metadata": {},\
                "issues": {},\
                "filters": [\
                  {\
                    "isNegated": true,\
                    "type": "BOOLEAN",\
                    "value": "AND",\
                    "children": [\
                      {\
                        "field": "string",\
                        "value": "string",\
                        "operator": "LARGER",\
                        "on": "subscriber"\
                      }\
                    ]\
                  }\
                ],\
                "template": {},\
                "variants": [],\
                "_templateId": "string",\
                "name": "string",\
                "_parentId": "string"\
              }\
            ],\
            "_templateId": "string",\
            "name": "string",\
            "_parentId": "string"\
          },\
          "overrides": {\
            "workflowId": "some_wf_id",\
            "stepId": "some_wf_id"\
          },\
          "payload": {},\
          "providerId": "emailjs",\
          "status": "string",\
          "updatedAt": "string"\
        }\
      ],\
      "payload": {},\
      "tags": [\
        "string"\
      ],\
      "controls": {},\
      "to": {}\
    }\
  ],
  "pageSize": 0,
  "page": 0
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/messages/messages-controller_get-messages.mdx)

[Previous\\
\\
Delete messages by transactionIdDELETE](https://docs.novu.co/api-reference/messages/messages-controller_delete-messages-by-transaction-id) [Next\\
\\
Create integrationPOST](https://docs.novu.co/api-reference/integrations/integrations-controller_create-integration)

## Notification Graph Stats
# Get notification graph statistics

GET `/v1/notifications/graph/stats`

Hide sidebar

^

.:=+++++=================- .\-\-#\\* :. .\-:\-\\*\\* -. .:\-::\-\+\\* =: .:-:::-=# :: .\-:::\-\-\-\-\\*\\* .. .-:::::---=# .. :\-::::::\-\-\-\-\\*\\* ...:-::::::::----\*= ...\-::::::::\-\-\-\-\-\-\+\- ....::::::::-------= .. .:::::\-\-\-\-\-\-\-\-\-\-\+\+ .. .:::----------+\*\*+\*++\*+\*++\*+++\*++++++++++:. ------------+\*+=-=======================. .----------+\*+=========================:. :--------+\*+=-========================. .=------+\*+=-========================:. .=----+\*+=-------=================+-. .----+\*+=----------================. .:=-+\*+=----------=-==============- .-+\*+=----------------===========. .-+=------------------====-====:.

K



Test

## [Authorization](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-graph-stats\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Query Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-graph-stats\#query-parameters)

`days` number

## [Header Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-graph-stats\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/notifications/graph/stats?days=0" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
[\
  {\
    "_id": "string",\
    "count": 0,\
    "templates": [\
      "string"\
    ],\
    "channels": [\
      "in_app"\
    ]\
  }\
]
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/notifications/notifications-controller_get-activity-graph-stats.mdx)

[Previous\\
\\
Marks all the subscriber messages as read, unread, seen or unseen. Optionally you can pass feed id (or array) to mark messages of a particular feed.POST](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read) [Next\\
\\
Get notification statisticsGET](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-stats)

## Notification Statistics API
# Get notification statistics

GET `/v1/notifications/stats`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-stats\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Header Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-stats\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/notifications/stats" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "weeklySent": 0,
  "monthlySent": 0
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/notifications/notifications-controller_get-activity-stats.mdx)

[Previous\\
\\
Get notification graph statisticsGET](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-graph-stats) [Next\\
\\
Get notificationGET](https://docs.novu.co/api-reference/notifications/notifications-controller_get-notification)

## Get Notification Details
# Get notification

GET `/v1/notifications/{notificationId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/notifications/notifications-controller_get-notification\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_get-notification\#path-parameters)

`notificationId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_get-notification\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/notifications/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "_environmentId": "string",
  "_organizationId": "string",
  "_subscriberId": "string",
  "transactionId": "string",
  "_templateId": "string",
  "_digestedNotificationId": "string",
  "createdAt": "string",
  "updatedAt": "string",
  "channels": [\
    "in_app"\
  ],
  "subscriber": {
    "firstName": "string",
    "subscriberId": "string",
    "_id": "string",
    "lastName": "string",
    "email": "string",
    "phone": "string"
  },
  "template": {
    "_id": "string",
    "name": "string",
    "origin": "novu-cloud",
    "triggers": [\
      {\
        "type": "event",\
        "identifier": "string",\
        "variables": [\
          {\
            "name": "string"\
          }\
        ],\
        "subscriberVariables": [\
          {\
            "name": "string"\
          }\
        ]\
      }\
    ]
  },
  "jobs": [\
    {\
      "_id": "string",\
      "type": "in_app",\
      "digest": {\
        "digestKey": "string",\
        "amount": 0,\
        "unit": "seconds",\
        "type": "regular",\
        "events": [\
          {}\
        ],\
        "backoff": true,\
        "backoffAmount": 0,\
        "backoffUnit": "seconds",\
        "updateMode": true,\
        "timed": {\
          "atTime": "string",\
          "weekDays": [\
            "monday"\
          ],\
          "monthDays": [\
            0\
          ],\
          "ordinal": "1",\
          "ordinalValue": "day",\
          "monthlyType": "each",\
          "cronExpression": "string"\
        }\
      },\
      "executionDetails": [\
        {\
          "_id": "string",\
          "createdAt": "string",\
          "status": "Success",\
          "detail": "string",\
          "isRetry": true,\
          "isTest": true,\
          "providerId": "emailjs",\
          "raw": "string",\
          "source": "Credentials"\
        }\
      ],\
      "step": {\
        "_id": "string",\
        "active": true,\
        "replyCallback": {},\
        "controlVariables": {},\
        "metadata": {},\
        "issues": {},\
        "filters": [\
          {\
            "isNegated": true,\
            "type": "BOOLEAN",\
            "value": "AND",\
            "children": [\
              {\
                "field": "string",\
                "value": "string",\
                "operator": "LARGER",\
                "on": "subscriber"\
              }\
            ]\
          }\
        ],\
        "template": {},\
        "variants": [\
          {\
            "_id": "string",\
            "active": true,\
            "replyCallback": {},\
            "controlVariables": {},\
            "metadata": {},\
            "issues": {},\
            "filters": [\
              {\
                "isNegated": true,\
                "type": "BOOLEAN",\
                "value": "AND",\
                "children": [\
                  {\
                    "field": "string",\
                    "value": "string",\
                    "operator": "LARGER",\
                    "on": "subscriber"\
                  }\
                ]\
              }\
            ],\
            "template": {},\
            "variants": [],\
            "_templateId": "string",\
            "name": "string",\
            "_parentId": "string"\
          }\
        ],\
        "_templateId": "string",\
        "name": "string",\
        "_parentId": "string"\
      },\
      "overrides": {\
        "workflowId": "some_wf_id",\
        "stepId": "some_wf_id"\
      },\
      "payload": {},\
      "providerId": "emailjs",\
      "status": "string",\
      "updatedAt": "string"\
    }\
  ],
  "payload": {},
  "tags": [\
    "string"\
  ],
  "controls": {},
  "to": {}
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/notifications/notifications-controller_get-notification.mdx)

[Previous\\
\\
Get notification statisticsGET](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-stats) [Next\\
\\
Get notificationsGET](https://docs.novu.co/api-reference/notifications/notifications-controller_list-notifications)

## List Notifications API
# Get notifications

GET `/v1/notifications`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/notifications/notifications-controller_list-notifications\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Query Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_list-notifications\#query-parameters)

`channels` array<string>

Array of channel types

`templates` array<string>

Array of template IDs or a single template ID

`emails` array<string>

Array of email addresses or a single email address

`search` Deprecatedstring

Search term (deprecated)

`subscriberIds` array<string>

Array of subscriber IDs or a single subscriber ID

`page` number

Page number for pagination

Default: `0`Minimum: `0`

`limit` number

Limit for pagination

Default: `10`Minimum: `1`Maximum: `50`

`transactionId` string

Transaction ID for filtering

`after` string

Date filter for records after this timestamp. Defaults to earliest date allowed by subscription plan

`before` string

Date filter for records before this timestamp. Defaults to current time of request (now)

## [Header Parameters](https://docs.novu.co/api-reference/notifications/notifications-controller_list-notifications\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/notifications?channels=in_app&templates=string&emails=string&search=%3Cstring%3E&subscriberIds=string&page=0&limit=10&transactionId=%3Cstring%3E&after=%3Cstring%3E&before=%3Cstring%3E" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

### Response

```
{
  "hasMore": true,
  "data": [\
    {\
      "_id": "string",\
      "_environmentId": "string",\
      "_organizationId": "string",\
      "_subscriberId": "string",\
      "transactionId": "string",\
      "_templateId": "string",\
      "_digestedNotificationId": "string",\
      "createdAt": "string",\
      "updatedAt": "string",\
      "channels": [\
        "in_app"\
      ],\
      "subscriber": {\
        "firstName": "string",\
        "subscriberId": "string",\
        "_id": "string",\
        "lastName": "string",\
        "email": "string",\
        "phone": "string"\
      },\
      "template": {\
        "_id": "string",\
        "name": "string",\
        "origin": "novu-cloud",\
        "triggers": [\
          {\
            "type": "event",\
            "identifier": "string",\
            "variables": [\
              {\
                "name": "string"\
              }\
            ],\
            "subscriberVariables": [\
              {\
                "name": "string"\
              }\
            ]\
          }\
        ]\
      },\
      "jobs": [\
        {\
          "_id": "string",\
          "type": "in_app",\
          "digest": {\
            "digestKey": "string",\
            "amount": 0,\
            "unit": "seconds",\
            "type": "regular",\
            "events": [\
              {}\
            ],\
            "backoff": true,\
            "backoffAmount": 0,\
            "backoffUnit": "seconds",\
            "updateMode": true,\
            "timed": {\
              "atTime": "string",\
              "weekDays": [\
                "monday"\
              ],\
              "monthDays": [\
                0\
              ],\
              "ordinal": "1",\
              "ordinalValue": "day",\
              "monthlyType": "each",\
              "cronExpression": "string"\
            }\
          },\
          "executionDetails": [\
            {\
              "_id": "string",\
              "createdAt": "string",\
              "status": "Success",\
              "detail": "string",\
              "isRetry": true,\
              "isTest": true,\
              "providerId": "emailjs",\
              "raw": "string",\
              "source": "Credentials"\
            }\
          ],\
          "step": {\
            "_id": "string",\
            "active": true,\
            "replyCallback": {},\
            "controlVariables": {},\
            "metadata": {},\
            "issues": {},\
            "filters": [\
              {\
                "isNegated": true,\
                "type": "BOOLEAN",\
                "value": "AND",\
                "children": [\
                  {\
                    "field": "string",\
                    "value": "string",\
                    "operator": "LARGER",\
                    "on": "subscriber"\
                  }\
                ]\
              }\
            ],\
            "template": {},\
            "variants": [\
              {\
                "_id": "string",\
                "active": true,\
                "replyCallback": {},\
                "controlVariables": {},\
                "metadata": {},\
                "issues": {},\
                "filters": [\
                  {\
                    "isNegated": true,\
                    "type": "BOOLEAN",\
                    "value": "AND",\
                    "children": [\
                      {\
                        "field": "string",\
                        "value": "string",\
                        "operator": "LARGER",\
                        "on": "subscriber"\
                      }\
                    ]\
                  }\
                ],\
                "template": {},\
                "variants": [],\
                "_templateId": "string",\
                "name": "string",\
                "_parentId": "string"\
              }\
            ],\
            "_templateId": "string",\
            "name": "string",\
            "_parentId": "string"\
          },\
          "overrides": {\
            "workflowId": "some_wf_id",\
            "stepId": "some_wf_id"\
          },\
          "payload": {},\
          "providerId": "emailjs",\
          "status": "string",\
          "updatedAt": "string"\
        }\
      ],\
      "payload": {},\
      "tags": [\
        "string"\
      ],\
      "controls": {},\
      "to": {}\
    }\
  ],
  "pageSize": 0,
  "page": 0
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/notifications/notifications-controller_list-notifications.mdx)

[Previous\\
\\
Get notificationGET](https://docs.novu.co/api-reference/notifications/notifications-controller_get-notification) [Next\\
\\
Subscribers additionPOST](https://docs.novu.co/api-reference/topics/topics-controller_assign)

## Create Subscriber API
# Create subscriber

Create subscriber with the given data

POST `/v2/subscribers`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_create-subscriber\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-controller_create-subscriber\#request-body)

`application/json` Required

`subscriberId` Requiredstring

Unique identifier of the subscriber

`firstName` string

First name of the subscriber

`lastName` string

Last name of the subscriber

`email` string

Email address of the subscriber

`phone` string

Phone number of the subscriber

`avatar` string

Avatar URL or identifier

`timezone` string

Timezone of the subscriber

`locale` string

Locale of the subscriber

`data` object

Additional custom data for the subscriber

Show Attributes

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_create-subscriber\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v2/subscribers" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "subscriberId": "string",
    "firstName": "string",
    "lastName": "string",
    "email": "string",
    "phone": "string",
    "avatar": "string",
    "timezone": "string",
    "locale": "string",
    "data": {}
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
{
  "_id": "string",
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "phone": "string",
  "avatar": "string",
  "locale": "string",
  "subscriberId": "string",
  "channels": [\
    {\
      "providerId": "slack",\
      "integrationIdentifier": "string",\
      "credentials": {\
        "webhookUrl": "https://example.com/webhook",\
        "channel": "general",\
        "deviceTokens": [\
          "token1",\
          "token2",\
          "token3"\
        ],\
        "alertUid": "12345-abcde",\
        "title": "Critical Alert",\
        "imageUrl": "https://example.com/image.png",\
        "state": "resolved",\
        "externalUrl": "https://example.com/details"\
      },\
      "_integrationId": "string"\
    }\
  ],
  "topics": [\
    "string"\
  ],
  "isOnline": true,
  "lastOnlineAt": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "deleted": true,
  "createdAt": "string",
  "updatedAt": "string",
  "__v": 0,
  "data": {},
  "timezone": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_create-subscriber.mdx)

[Previous\\
\\
Broadcast event to allPOST](https://docs.novu.co/api-reference/events/events-controller_broadcast-event-to-all) [Next\\
\\
Patch subscriberPATCH](https://docs.novu.co/api-reference/subscribers/subscribers-controller_patch-subscriber)

## Get Subscriber Preferences
# Get subscriber preferences

Get subscriber global and workflow specific preferences

GET `/v2/subscribers/{subscriberId}/preferences`

Hide sidebar

^

.:=+++++=================- .\-\-#\\* :. .\-:\-\\*\\* -. .:\-::\-\+\\* =: .:-:::-=# :: .\-:::\-\-\-\-\\*\\* .. .-:::::---=# .. :\-::::::\-\-\-\-\\*\\* ...:-::::::::----\*= ...\-::::::::\-\-\-\-\-\-\+\- ....::::::::-------= .. .:::::\-\-\-\-\-\-\-\-\-\-\+\+ .. .:::----------+\*\*+\*++\*+\*++\*+++\*++++++++++:. ------------+\*+=-=======================. .----------+\*+=========================:. :--------+\*+=-========================. .=------+\*+=-========================:. .=----+\*+=-------=================+-. .----+\*+=----------================. .:=-+\*+=----------=-==============- .-+\*+=----------------===========. .-+=------------------====-====:.

K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber-preferences\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber-preferences\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber-preferences\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v2/subscribers/<string>/preferences" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "global": {
    "enabled": true,
    "channels": {
      "email": true,
      "sms": true,
      "in_app": true,
      "chat": true,
      "push": true
    }
  },
  "workflows": [\
    {\
      "enabled": true,\
      "channels": {\
        "email": true,\
        "sms": true,\
        "in_app": true,\
        "chat": true,\
        "push": true\
      },\
      "overrides": [\
        {\
          "channel": "in_app",\
          "source": "subscriber"\
        }\
      ],\
      "workflow": {\
        "slug": "string",\
        "identifier": "string",\
        "name": "string"\
      }\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_get-subscriber-preferences.mdx)

[Previous\\
\\
Search for subscribersGET](https://docs.novu.co/api-reference/subscribers/subscribers-controller_search-subscribers) [Next\\
\\
Update subscriber global or workflow specific preferencesPATCH](https://docs.novu.co/api-reference/subscribers/subscribers-controller_update-subscriber-preferences)

## Get Subscriber Details
# Get subscriber

Get subscriber by your internal id used to identify the subscriber

GET `/v2/subscribers/{subscriberId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v2/subscribers/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "phone": "string",
  "avatar": "string",
  "locale": "string",
  "subscriberId": "string",
  "channels": [\
    {\
      "providerId": "slack",\
      "integrationIdentifier": "string",\
      "credentials": {\
        "webhookUrl": "https://example.com/webhook",\
        "channel": "general",\
        "deviceTokens": [\
          "token1",\
          "token2",\
          "token3"\
        ],\
        "alertUid": "12345-abcde",\
        "title": "Critical Alert",\
        "imageUrl": "https://example.com/image.png",\
        "state": "resolved",\
        "externalUrl": "https://example.com/details"\
      },\
      "_integrationId": "string"\
    }\
  ],
  "topics": [\
    "string"\
  ],
  "isOnline": true,
  "lastOnlineAt": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "deleted": true,
  "createdAt": "string",
  "updatedAt": "string",
  "__v": 0,
  "data": {},
  "timezone": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_get-subscriber.mdx)

[Previous\\
\\
Delete subscriberDELETE](https://docs.novu.co/api-reference/subscribers/subscribers-controller_remove-subscriber) [Next\\
\\
Search for subscribersGET](https://docs.novu.co/api-reference/subscribers/subscribers-controller_search-subscribers)

## Patch Subscriber
# Patch subscriber

Patch subscriber by your internal id used to identify the subscriber

PATCH `/v2/subscribers/{subscriberId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_patch-subscriber\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-controller_patch-subscriber\#request-body)

`application/json` Required

`firstName` string

First name of the subscriber

`lastName` string

Last name of the subscriber

`email` string

Email address of the subscriber

`phone` string

Phone number of the subscriber

`avatar` string

Avatar URL or identifier

`timezone` string

Timezone of the subscriber

`locale` string

Locale of the subscriber

`data` object

Additional custom data for the subscriber

Show Attributes

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_patch-subscriber\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_patch-subscriber\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X PATCH "https://api.novu.co/v2/subscribers/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "string",
    "lastName": "string",
    "email": "string",
    "phone": "string",
    "avatar": "string",
    "timezone": "string",
    "locale": "string",
    "data": {}
  }'
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "phone": "string",
  "avatar": "string",
  "locale": "string",
  "subscriberId": "string",
  "channels": [\
    {\
      "providerId": "slack",\
      "integrationIdentifier": "string",\
      "credentials": {\
        "webhookUrl": "https://example.com/webhook",\
        "channel": "general",\
        "deviceTokens": [\
          "token1",\
          "token2",\
          "token3"\
        ],\
        "alertUid": "12345-abcde",\
        "title": "Critical Alert",\
        "imageUrl": "https://example.com/image.png",\
        "state": "resolved",\
        "externalUrl": "https://example.com/details"\
      },\
      "_integrationId": "string"\
    }\
  ],
  "topics": [\
    "string"\
  ],
  "isOnline": true,
  "lastOnlineAt": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "deleted": true,
  "createdAt": "string",
  "updatedAt": "string",
  "__v": 0,
  "data": {},
  "timezone": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_patch-subscriber.mdx)

[Previous\\
\\
Create subscriberPOST](https://docs.novu.co/api-reference/subscribers/subscribers-controller_create-subscriber) [Next\\
\\
Delete subscriberDELETE](https://docs.novu.co/api-reference/subscribers/subscribers-controller_remove-subscriber)

## Delete Subscriber API
# Delete subscriber

Deletes a subscriber entity from the Novu platform

DELETE `/v2/subscribers/{subscriberId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_remove-subscriber\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_remove-subscriber\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_remove-subscriber\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v2/subscribers/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "acknowledged": true,
  "status": "success"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_remove-subscriber.mdx)

[Previous\\
\\
Patch subscriberPATCH](https://docs.novu.co/api-reference/subscribers/subscribers-controller_patch-subscriber) [Next\\
\\
Get subscriberGET](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber)

## Search Subscribers API
# Search for subscribers

GET `/v2/subscribers`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_search-subscribers\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Query Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_search-subscribers\#query-parameters)

`after` string

Cursor for pagination indicating the starting point after which to fetch results.

`before` string

Cursor for pagination indicating the ending point before which to fetch results.

`email` string

Email address of the subscriber to filter results.

`name` string

Name of the subscriber to filter results.

`phone` string

Phone number of the subscriber to filter results.

`subscriberId` string

Unique identifier of the subscriber to filter results.

`limit` number

`orderDirection` string

Value in: `"ASC" | "DESC"`

`orderBy` unknown

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_search-subscribers\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v2/subscribers?after=%3Cstring%3E&before=%3Cstring%3E&email=%3Cstring%3E&name=%3Cstring%3E&phone=%3Cstring%3E&subscriberId=%3Cstring%3E&limit=0&orderDirection=ASC&orderBy=null" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "data": [\
    {\
      "_id": "string",\
      "firstName": "string",\
      "lastName": "string",\
      "email": "string",\
      "phone": "string",\
      "avatar": "string",\
      "locale": "string",\
      "subscriberId": "string",\
      "channels": [\
        {\
          "providerId": "slack",\
          "integrationIdentifier": "string",\
          "credentials": {\
            "webhookUrl": "https://example.com/webhook",\
            "channel": "general",\
            "deviceTokens": [\
              "token1",\
              "token2",\
              "token3"\
            ],\
            "alertUid": "12345-abcde",\
            "title": "Critical Alert",\
            "imageUrl": "https://example.com/image.png",\
            "state": "resolved",\
            "externalUrl": "https://example.com/details"\
          },\
          "_integrationId": "string"\
        }\
      ],\
      "topics": [\
        "string"\
      ],\
      "isOnline": true,\
      "lastOnlineAt": "string",\
      "_organizationId": "string",\
      "_environmentId": "string",\
      "deleted": true,\
      "createdAt": "string",\
      "updatedAt": "string",\
      "__v": 0,\
      "data": {},\
      "timezone": "string"\
    }\
  ],
  "next": "string",
  "previous": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_search-subscribers.mdx)

[Previous\\
\\
Get subscriberGET](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber) [Next\\
\\
Get subscriber preferencesGET](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber-preferences)

## Update Subscriber Preferences
# Update subscriber global or workflow specific preferences

Update subscriber global or workflow specific preferences

PATCH `/v2/subscribers/{subscriberId}/preferences`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-controller_update-subscriber-preferences\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-controller_update-subscriber-preferences\#request-body)

`application/json` Required

`channels` Requiredobject

Channel-specific preference settings

`workflowId` string

If provided, update workflow specific preferences, otherwise update global preferences

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_update-subscriber-preferences\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-controller_update-subscriber-preferences\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X PATCH "https://api.novu.co/v2/subscribers/<string>/preferences" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "channels": {
      "email": true,
      "sms": true,
      "in_app": true,
      "push": true,
      "chat": true
    },
    "workflowId": "string"
  }'
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "global": {
    "enabled": true,
    "channels": {
      "email": true,
      "sms": true,
      "in_app": true,
      "chat": true,
      "push": true
    }
  },
  "workflows": [\
    {\
      "enabled": true,\
      "channels": {\
        "email": true,\
        "sms": true,\
        "in_app": true,\
        "chat": true,\
        "push": true\
      },\
      "overrides": [\
        {\
          "channel": "in_app",\
          "source": "subscriber"\
        }\
      ],\
      "workflow": {\
        "slug": "string",\
        "identifier": "string",\
        "name": "string"\
      }\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_update-subscriber-preferences.mdx)

[Previous\\
\\
Get subscriber preferencesGET](https://docs.novu.co/api-reference/subscribers/subscribers-controller_get-subscriber-preferences) [Next\\
\\
Bulk create subscribersPOST](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers)

## Bulk Create Subscribers
# Bulk create subscribers

Using this endpoint you can create multiple subscribers at once, to avoid multiple calls to the API.
The bulk API is limited to 500 subscribers per request.


POST `/v1/subscribers/bulk`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers\#request-body)

`application/json` Required

`subscribers` Requiredarray<object>

An array of subscribers to be created in bulk.

Show Attributes

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/subscribers/bulk" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "subscribers": [\
      {\
        "subscriberId": "string",\
        "firstName": "string",\
        "lastName": "string",\
        "email": "string",\
        "phone": "string",\
        "avatar": "string",\
        "timezone": "string",\
        "locale": "string",\
        "data": {}\
      }\
    ]
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
{
  "updated": [\
    {\
      "subscriberId": "string"\
    }\
  ],
  "created": [\
    {\
      "subscriberId": "string"\
    }\
  ],
  "failed": [\
    {\
      "message": "string",\
      "subscriberId": "string"\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers.mdx)

[Previous\\
\\
Update subscriber global or workflow specific preferencesPATCH](https://docs.novu.co/api-reference/subscribers/subscribers-controller_update-subscriber-preferences) [Next\\
\\
Update subscriber credentialsPUT](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel)

## Chat OAuth Access
# Handle chat oauth

GET `/v1/subscribers/{subscriberId}/credentials/{providerId}/oauth`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-access-oauth\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-access-oauth\#path-parameters)

`subscriberId` Requiredstring

`providerId` Requiredunknown

## [Query Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-access-oauth\#query-parameters)

`hmacHash` Requiredstring

HMAC hash for the request

`environmentId` Requiredstring

The ID of the environment, must be a valid MongoDB ID

`integrationIdentifier` string

Optional integration identifier

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-access-oauth\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/subscribers/<string>/credentials/null/oauth?hmacHash=%3Cstring%3E&environmentId=%3Cstring%3E&integrationIdentifier=%3Cstring%3E" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_chat-access-oauth.mdx)

## OAuth Redirect Handling
# Handle providers oauth redirect

GET `/v1/subscribers/{subscriberId}/credentials/{providerId}/oauth/callback`

Hide sidebar

^

.:=+++++=================- .\-\-#\\* :. .\-:\-\\*\\* -. .:\-::\-\+\\* =: .:-:::-=# :: .\-:::\-\-\-\-\\*\\* .. .-:::::---=# .. :\-::::::\-\-\-\-\\*\\* ...:-::::::::----\*= ...\-::::::::\-\-\-\-\-\-\+\- ....::::::::-------= .. .:::::\-\-\-\-\-\-\-\-\-\-\+\+ .. .:::----------+\*\*+\*++\*+\*++\*+++\*++++++++++:. ------------+\*+=-=======================. .----------+\*+=========================:. :--------+\*+=-========================. .=------+\*+=-========================:. .=----+\*+=-------=================+-. .----+\*+=----------================. .:=-+\*+=----------=-==============- .-+\*+=----------------===========. .-+=------------------====-====:.

K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-oauth-callback\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-oauth-callback\#path-parameters)

`subscriberId` Requiredstring

`providerId` Requiredunknown

## [Query Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-oauth-callback\#query-parameters)

`hmacHash` Requiredstring

HMAC hash for the request

`environmentId` Requiredstring

The ID of the environment, must be a valid MongoDB ID

`integrationIdentifier` string

Optional integration identifier

`code` Requiredstring

Optional authorization code returned from the OAuth provider

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_chat-oauth-callback\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/subscribers/<string>/credentials/null/oauth/callback?hmacHash=%3Cstring%3E&environmentId=%3Cstring%3E&integrationIdentifier=%3Cstring%3E&code=%3Cstring%3E" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200302400401403404405409413414415422429500503

Returns plain text response.

### Response

```
"string"
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_chat-oauth-callback.mdx)

## Delete Subscriber Credentials
# Delete subscriber credentials by providerId

Delete subscriber credentials such as slack and expo tokens.

DELETE `/v1/subscribers/{subscriberId}/credentials/{providerId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_delete-subscriber-credentials\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_delete-subscriber-credentials\#path-parameters)

`subscriberId` Requiredstring

`providerId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_delete-subscriber-credentials\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v1/subscribers/<string>/credentials/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

204400401403404405409413414415422429500503

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_delete-subscriber-credentials.mdx)

## Subscriber Notification Feed
# Get in-app notification feed for a particular subscriber

GET `/v1/subscribers/{subscriberId}/notifications/feed`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed\#path-parameters)

`subscriberId` Requiredstring

## [Query Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed\#query-parameters)

`page` number

`limit` number

Default: `10`Maximum: `100`

`read` boolean

`seen` boolean

`payload` string

Base64 encoded string of the partial payload JSON object

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/subscribers/<string>/notifications/feed?page=0&limit=10&read=true&seen=true&payload=btoa%28JSON.stringify%28%7B+foo%3A+123+%7D%29%29+results+in+base64+encoded+string+like+eyJmb28iOjEyM30%3D" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "totalCount": 5,
  "hasMore": true,
  "data": [\
    {\
      "_id": "615c1f2f9b0c5b001f8e4e3b",\
      "_templateId": "template_12345",\
      "_environmentId": "env_67890",\
      "_messageTemplateId": "message_template_54321",\
      "_organizationId": "org_98765",\
      "_notificationId": "notification_123456",\
      "_subscriberId": "subscriber_112233",\
      "_feedId": "feed_445566",\
      "_jobId": "job_778899",\
      "createdAt": "2024-12-10T10:10:59.639Z",\
      "updatedAt": "2024-12-10T10:10:59.639Z",\
      "actor": {\
        "data": null,\
        "type": "none"\
      },\
      "subscriber": {\
        "_id": "string",\
        "firstName": "string",\
        "lastName": "string",\
        "avatar": "string",\
        "subscriberId": "string"\
      },\
      "transactionId": "transaction_123456",\
      "templateIdentifier": "template_abcdef",\
      "providerId": "provider_xyz",\
      "content": "This is a test notification content.",\
      "subject": "Test Notification Subject",\
      "channel": "in_app",\
      "read": false,\
      "seen": true,\
      "deleted": false,\
      "deviceTokens": [\
        "token1",\
        "token2"\
      ],\
      "cta": {\
        "type": "redirect",\
        "data": {\
          "url": "string"\
        },\
        "action": {\
          "status": "pending",\
          "buttons": [\
            {\
              "type": "primary",\
              "content": "string",\
              "resultContent": "string"\
            }\
          ],\
          "result": {\
            "payload": {},\
            "type": "primary"\
          }\
        }\
      },\
      "status": "sent",\
      "payload": {\
        "key": "value"\
      },\
      "overrides": {\
        "overrideKey": "overrideValue"\
      }\
    }\
  ],
  "pageSize": 2,
  "page": 1
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed.mdx)

[Previous\\
\\
Modify subscriber credentialsPATCH](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel) [Next\\
\\
Get the unseen in-app notifications count for subscribers feedGET](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-unseen-count)

## Unseen Notifications Count
# Get the unseen in-app notifications count for subscribers feed

GET `/v1/subscribers/{subscriberId}/notifications/unseen`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-unseen-count\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-unseen-count\#path-parameters)

`subscriberId` Requiredstring

## [Query Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-unseen-count\#query-parameters)

`seen` boolean

Indicates whether to count seen notifications.

Default: `false`

`limit` number

The maximum number of notifications to return.

Default: `100`

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-unseen-count\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/subscribers/<string>/notifications/unseen?seen=false&limit=100" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "count": 0
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_get-unseen-count.mdx)

[Previous\\
\\
Get in-app notification feed for a particular subscriberGET](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed) [Next\\
\\
Mark message action as seenPOST](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen)

## List Subscribers API
# Get subscribers

Returns a list of subscribers, could paginated using the \`page\` and \`limit\` query parameter

GET `/v1/subscribers`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_list-subscribers\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Query Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_list-subscribers\#query-parameters)

`page` number

`limit` number

Default: `10`Maximum: `100`

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_list-subscribers\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/subscribers?page=0&limit=10" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

### Response

```
{
  "page": 0,
  "hasMore": true,
  "pageSize": 0,
  "data": [\
    {\
      "_id": "string",\
      "firstName": "string",\
      "lastName": "string",\
      "email": "string",\
      "phone": "string",\
      "avatar": "string",\
      "locale": "string",\
      "subscriberId": "string",\
      "channels": [\
        {\
          "providerId": "slack",\
          "integrationIdentifier": "string",\
          "credentials": {\
            "webhookUrl": "https://example.com/webhook",\
            "channel": "general",\
            "deviceTokens": [\
              "token1",\
              "token2",\
              "token3"\
            ],\
            "alertUid": "12345-abcde",\
            "title": "Critical Alert",\
            "imageUrl": "https://example.com/image.png",\
            "state": "resolved",\
            "externalUrl": "https://example.com/details"\
          },\
          "_integrationId": "string"\
        }\
      ],\
      "topics": [\
        "string"\
      ],\
      "isOnline": true,\
      "lastOnlineAt": "string",\
      "_organizationId": "string",\
      "_environmentId": "string",\
      "deleted": true,\
      "createdAt": "string",\
      "updatedAt": "string",\
      "__v": 0,\
      "data": {},\
      "timezone": "string"\
    }\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_list-subscribers.mdx)

## Mark Message Action Seen
# Mark message action as seen

POST `/v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen\#request-body)

`application/json` Required

`status` Requiredstring

Message action status

Value in: `"pending" | "done"`

`payload` object

Message action payload

Show Attributes

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen\#path-parameters)

`messageId` Requiredstring

`type` Requiredunknown

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/subscribers/<string>/messages/<string>/actions/null" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "status": "pending",
    "payload": {}
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
{
  "_id": "string",
  "_templateId": "string",
  "_environmentId": "string",
  "_messageTemplateId": "string",
  "_organizationId": "string",
  "_notificationId": "string",
  "_subscriberId": "string",
  "subscriber": {
    "_id": "string",
    "firstName": "string",
    "lastName": "string",
    "email": "string",
    "phone": "string",
    "avatar": "string",
    "locale": "string",
    "subscriberId": "string",
    "channels": [\
      {\
        "providerId": "slack",\
        "integrationIdentifier": "string",\
        "credentials": {\
          "webhookUrl": "https://example.com/webhook",\
          "channel": "general",\
          "deviceTokens": [\
            "token1",\
            "token2",\
            "token3"\
          ],\
          "alertUid": "12345-abcde",\
          "title": "Critical Alert",\
          "imageUrl": "https://example.com/image.png",\
          "state": "resolved",\
          "externalUrl": "https://example.com/details"\
        },\
        "_integrationId": "string"\
      }\
    ],
    "topics": [\
      "string"\
    ],
    "isOnline": true,
    "lastOnlineAt": "string",
    "_organizationId": "string",
    "_environmentId": "string",
    "deleted": true,
    "createdAt": "string",
    "updatedAt": "string",
    "__v": 0,
    "data": {},
    "timezone": "string"
  },
  "template": {
    "_id": "string",
    "name": "string",
    "description": "string",
    "active": true,
    "draft": true,
    "preferenceSettings": {
      "email": true,
      "sms": true,
      "in_app": true,
      "chat": true,
      "push": true
    },
    "critical": true,
    "tags": [\
      "string"\
    ],
    "steps": [\
      {\
        "_id": "string",\
        "uuid": "string",\
        "name": "string",\
        "_templateId": "string",\
        "active": true,\
        "shouldStopOnFail": true,\
        "template": {},\
        "filters": [\
          {\
            "isNegated": true,\
            "type": "BOOLEAN",\
            "value": "AND",\
            "children": [\
              {\
                "field": "string",\
                "value": "string",\
                "operator": "LARGER",\
                "on": "subscriber"\
              }\
            ]\
          }\
        ],\
        "_parentId": "string",\
        "metadata": {\
          "amount": 0,\
          "unit": "seconds",\
          "digestKey": "string",\
          "type": "regular",\
          "backoff": true,\
          "backoffAmount": 0,\
          "backoffUnit": "seconds",\
          "updateMode": true\
        },\
        "replyCallback": {\
          "active": true,\
          "url": "string"\
        },\
        "variants": [\
          {\
            "_id": "string",\
            "uuid": "string",\
            "name": "string",\
            "_templateId": "string",\
            "active": true,\
            "shouldStopOnFail": true,\
            "template": {},\
            "filters": [\
              {\
                "isNegated": true,\
                "type": "BOOLEAN",\
                "value": "AND",\
                "children": [\
                  {\
                    "field": "string",\
                    "value": "string",\
                    "operator": "LARGER",\
                    "on": "subscriber"\
                  }\
                ]\
              }\
            ],\
            "_parentId": "string",\
            "metadata": {\
              "amount": 0,\
              "unit": "seconds",\
              "digestKey": "string",\
              "type": "regular",\
              "backoff": true,\
              "backoffAmount": 0,\
              "backoffUnit": "seconds",\
              "updateMode": true\
            },\
            "replyCallback": {\
              "active": true,\
              "url": "string"\
            }\
          }\
        ]\
      }\
    ],
    "_organizationId": "string",
    "_creatorId": "string",
    "_environmentId": "string",
    "triggers": [\
      {\
        "type": "event",\
        "identifier": "string",\
        "variables": [\
          {\
            "name": "string"\
          }\
        ],\
        "subscriberVariables": [\
          {\
            "name": "string"\
          }\
        ]\
      }\
    ],
    "_notificationGroupId": "string",
    "_parentId": "string",
    "deleted": true,
    "deletedAt": "string",
    "deletedBy": "string",
    "notificationGroup": {
      "_id": "string",
      "name": "string",
      "_environmentId": "string",
      "_organizationId": "string",
      "_parentId": "string"
    },
    "data": {},
    "workflowIntegrationStatus": {}
  },
  "templateIdentifier": "string",
  "createdAt": "string",
  "lastSeenDate": "string",
  "lastReadDate": "string",
  "content": {
    "type": "button",
    "content": "string",
    "url": "string",
    "styles": {
      "textAlign": "center"
    }
  },
  "transactionId": "string",
  "subject": "string",
  "channel": "in_app",
  "read": true,
  "seen": true,
  "email": "string",
  "phone": "string",
  "directWebhookUrl": "string",
  "providerId": "string",
  "deviceTokens": [\
    "string"\
  ],
  "title": "string",
  "cta": {
    "type": "redirect",
    "data": {
      "url": "string"
    },
    "action": {
      "status": "pending",
      "buttons": [\
        {\
          "type": "primary",\
          "content": "string",\
          "resultContent": "string"\
        }\
      ],
      "result": {
        "payload": {},
        "type": "primary"
      }
    }
  },
  "_feedId": "string",
  "status": "sent",
  "errorId": "string",
  "errorText": "string",
  "payload": {},
  "overrides": {}
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen.mdx)

[Previous\\
\\
Get the unseen in-app notifications count for subscribers feedGET](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-unseen-count) [Next\\
\\
Marks all the subscriber messages as read, unread, seen or unseen. Optionally you can pass feed id (or array) to mark messages of a particular feed.POST](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read)

## Mark Subscriber Messages
# Marks all the subscriber messages as read, unread, seen or unseen. Optionally you can pass feed id (or array) to mark messages of a particular feed.

POST `/v1/subscribers/{subscriberId}/messages/mark-all`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read\#request-body)

`application/json` Required

`feedIdentifier` string \| array<string>

Optional feed identifier or array of feed identifiers

Show Attributes

`markAs` Requiredstring

Mark all subscriber messages as read, unread, seen or unseen

Value in: `"read" | "seen" | "unread" | "unseen"`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/subscribers/<string>/messages/mark-all" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "feedIdentifier": "string",
    "markAs": "read"
  }'
```

201400401403404405409413414415422429500503

### Example 1

```
0
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read.mdx)

[Previous\\
\\
Mark message action as seenPOST](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen) [Next\\
\\
Get notification graph statisticsGET](https://docs.novu.co/api-reference/notifications/notifications-controller_get-activity-graph-stats)

## Mark Messages Status
# Mark a subscriber messages as seen, read, unseen or unread

POST `/v1/subscribers/{subscriberId}/messages/mark-as`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-messages-as\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-messages-as\#request-body)

`application/json` Required

`messageId` Requiredstring \| array<string>

Show Attributes

`markAs` Requiredstring

Value in: `"read" | "seen" | "unread" | "unseen"`

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-messages-as\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_mark-messages-as\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/subscribers/<string>/messages/mark-as" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "messageId": "string",
    "markAs": "read"
  }'
```

201400401403404405409413414415422429500503

Created

### Response

```
[\
  {\
    "_id": "string",\
    "_templateId": "string",\
    "_environmentId": "string",\
    "_messageTemplateId": "string",\
    "_organizationId": "string",\
    "_notificationId": "string",\
    "_subscriberId": "string",\
    "subscriber": {\
      "_id": "string",\
      "firstName": "string",\
      "lastName": "string",\
      "email": "string",\
      "phone": "string",\
      "avatar": "string",\
      "locale": "string",\
      "subscriberId": "string",\
      "channels": [\
        {\
          "providerId": "slack",\
          "integrationIdentifier": "string",\
          "credentials": {\
            "webhookUrl": "https://example.com/webhook",\
            "channel": "general",\
            "deviceTokens": [\
              "token1",\
              "token2",\
              "token3"\
            ],\
            "alertUid": "12345-abcde",\
            "title": "Critical Alert",\
            "imageUrl": "https://example.com/image.png",\
            "state": "resolved",\
            "externalUrl": "https://example.com/details"\
          },\
          "_integrationId": "string"\
        }\
      ],\
      "topics": [\
        "string"\
      ],\
      "isOnline": true,\
      "lastOnlineAt": "string",\
      "_organizationId": "string",\
      "_environmentId": "string",\
      "deleted": true,\
      "createdAt": "string",\
      "updatedAt": "string",\
      "__v": 0,\
      "data": {},\
      "timezone": "string"\
    },\
    "template": {\
      "_id": "string",\
      "name": "string",\
      "description": "string",\
      "active": true,\
      "draft": true,\
      "preferenceSettings": {\
        "email": true,\
        "sms": true,\
        "in_app": true,\
        "chat": true,\
        "push": true\
      },\
      "critical": true,\
      "tags": [\
        "string"\
      ],\
      "steps": [\
        {\
          "_id": "string",\
          "uuid": "string",\
          "name": "string",\
          "_templateId": "string",\
          "active": true,\
          "shouldStopOnFail": true,\
          "template": {},\
          "filters": [\
            {\
              "isNegated": true,\
              "type": "BOOLEAN",\
              "value": "AND",\
              "children": [\
                {\
                  "field": "string",\
                  "value": "string",\
                  "operator": "LARGER",\
                  "on": "subscriber"\
                }\
              ]\
            }\
          ],\
          "_parentId": "string",\
          "metadata": {\
            "amount": 0,\
            "unit": "seconds",\
            "digestKey": "string",\
            "type": "regular",\
            "backoff": true,\
            "backoffAmount": 0,\
            "backoffUnit": "seconds",\
            "updateMode": true\
          },\
          "replyCallback": {\
            "active": true,\
            "url": "string"\
          },\
          "variants": [\
            {\
              "_id": "string",\
              "uuid": "string",\
              "name": "string",\
              "_templateId": "string",\
              "active": true,\
              "shouldStopOnFail": true,\
              "template": {},\
              "filters": [\
                {\
                  "isNegated": true,\
                  "type": "BOOLEAN",\
                  "value": "AND",\
                  "children": [\
                    {\
                      "field": "string",\
                      "value": "string",\
                      "operator": "LARGER",\
                      "on": "subscriber"\
                    }\
                  ]\
                }\
              ],\
              "_parentId": "string",\
              "metadata": {\
                "amount": 0,\
                "unit": "seconds",\
                "digestKey": "string",\
                "type": "regular",\
                "backoff": true,\
                "backoffAmount": 0,\
                "backoffUnit": "seconds",\
                "updateMode": true\
              },\
              "replyCallback": {\
                "active": true,\
                "url": "string"\
              }\
            }\
          ]\
        }\
      ],\
      "_organizationId": "string",\
      "_creatorId": "string",\
      "_environmentId": "string",\
      "triggers": [\
        {\
          "type": "event",\
          "identifier": "string",\
          "variables": [\
            {\
              "name": "string"\
            }\
          ],\
          "subscriberVariables": [\
            {\
              "name": "string"\
            }\
          ]\
        }\
      ],\
      "_notificationGroupId": "string",\
      "_parentId": "string",\
      "deleted": true,\
      "deletedAt": "string",\
      "deletedBy": "string",\
      "notificationGroup": {\
        "_id": "string",\
        "name": "string",\
        "_environmentId": "string",\
        "_organizationId": "string",\
        "_parentId": "string"\
      },\
      "data": {},\
      "workflowIntegrationStatus": {}\
    },\
    "templateIdentifier": "string",\
    "createdAt": "string",\
    "lastSeenDate": "string",\
    "lastReadDate": "string",\
    "content": {\
      "type": "button",\
      "content": "string",\
      "url": "string",\
      "styles": {\
        "textAlign": "center"\
      }\
    },\
    "transactionId": "string",\
    "subject": "string",\
    "channel": "in_app",\
    "read": true,\
    "seen": true,\
    "email": "string",\
    "phone": "string",\
    "directWebhookUrl": "string",\
    "providerId": "string",\
    "deviceTokens": [\
      "string"\
    ],\
    "title": "string",\
    "cta": {\
      "type": "redirect",\
      "data": {\
        "url": "string"\
      },\
      "action": {\
        "status": "pending",\
        "buttons": [\
          {\
            "type": "primary",\
            "content": "string",\
            "resultContent": "string"\
          }\
        ],\
        "result": {\
          "payload": {},\
          "type": "primary"\
        }\
      }\
    },\
    "_feedId": "string",\
    "status": "sent",\
    "errorId": "string",\
    "errorText": "string",\
    "payload": {},\
    "overrides": {}\
  }\
]
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_mark-messages-as.mdx)

## Modify Subscriber Credentials
# Modify subscriber credentials

Subscriber credentials associated to the delivery methods such as slack and push tokens.
This endpoint appends provided credentials and deviceTokens to the existing ones.

PATCH `/v1/subscribers/{subscriberId}/credentials`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel\#request-body)

`application/json` Required

`providerId` Requiredstring

The provider identifier for the credentials

Value in: `"slack" | "discord" | "msteams" | "mattermost" | "ryver" | "zulip" | "grafana-on-call" | "getstream" | "rocket-chat" | "whatsapp-business" | "fcm" | "apns" | "expo" | "one-signal" | "pushpad" | "push-webhook" | "pusher-beams"`

`integrationIdentifier` string

The integration identifier

`credentials` Requiredobject

Credentials payload for the specified provider

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X PATCH "https://api.novu.co/v1/subscribers/<string>/credentials" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "providerId": "slack",
    "integrationIdentifier": "string",
    "credentials": {
      "webhookUrl": "https://example.com/webhook",
      "channel": "general",
      "deviceTokens": [\
        "token1",\
        "token2",\
        "token3"\
      ],
      "alertUid": "12345-abcde",
      "title": "Critical Alert",
      "imageUrl": "https://example.com/image.png",
      "state": "resolved",
      "externalUrl": "https://example.com/details"
    }
  }'
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "phone": "string",
  "avatar": "string",
  "locale": "string",
  "subscriberId": "string",
  "channels": [\
    {\
      "providerId": "slack",\
      "integrationIdentifier": "string",\
      "credentials": {\
        "webhookUrl": "https://example.com/webhook",\
        "channel": "general",\
        "deviceTokens": [\
          "token1",\
          "token2",\
          "token3"\
        ],\
        "alertUid": "12345-abcde",\
        "title": "Critical Alert",\
        "imageUrl": "https://example.com/image.png",\
        "state": "resolved",\
        "externalUrl": "https://example.com/details"\
      },\
      "_integrationId": "string"\
    }\
  ],
  "topics": [\
    "string"\
  ],
  "isOnline": true,
  "lastOnlineAt": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "deleted": true,
  "createdAt": "string",
  "updatedAt": "string",
  "__v": 0,
  "data": {},
  "timezone": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel.mdx)

[Previous\\
\\
Update subscriber credentialsPUT](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel) [Next\\
\\
Get in-app notification feed for a particular subscriberGET](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed)

## Update Subscriber Credentials
# Update subscriber credentials

Subscriber credentials associated to the delivery methods such as slack and push tokens.

PUT `/v1/subscribers/{subscriberId}/credentials`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel\#request-body)

`application/json` Required

`providerId` Requiredstring

The provider identifier for the credentials

Value in: `"slack" | "discord" | "msteams" | "mattermost" | "ryver" | "zulip" | "grafana-on-call" | "getstream" | "rocket-chat" | "whatsapp-business" | "fcm" | "apns" | "expo" | "one-signal" | "pushpad" | "push-webhook" | "pusher-beams"`

`integrationIdentifier` string

The integration identifier

`credentials` Requiredobject

Credentials payload for the specified provider

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X PUT "https://api.novu.co/v1/subscribers/<string>/credentials" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "providerId": "slack",
    "integrationIdentifier": "string",
    "credentials": {
      "webhookUrl": "https://example.com/webhook",
      "channel": "general",
      "deviceTokens": [\
        "token1",\
        "token2",\
        "token3"\
      ],
      "alertUid": "12345-abcde",
      "title": "Critical Alert",
      "imageUrl": "https://example.com/image.png",
      "state": "resolved",
      "externalUrl": "https://example.com/details"
    }
  }'
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "phone": "string",
  "avatar": "string",
  "locale": "string",
  "subscriberId": "string",
  "channels": [\
    {\
      "providerId": "slack",\
      "integrationIdentifier": "string",\
      "credentials": {\
        "webhookUrl": "https://example.com/webhook",\
        "channel": "general",\
        "deviceTokens": [\
          "token1",\
          "token2",\
          "token3"\
        ],\
        "alertUid": "12345-abcde",\
        "title": "Critical Alert",\
        "imageUrl": "https://example.com/image.png",\
        "state": "resolved",\
        "externalUrl": "https://example.com/details"\
      },\
      "_integrationId": "string"\
    }\
  ],
  "topics": [\
    "string"\
  ],
  "isOnline": true,
  "lastOnlineAt": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "deleted": true,
  "createdAt": "string",
  "updatedAt": "string",
  "__v": 0,
  "data": {},
  "timezone": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel.mdx)

[Previous\\
\\
Bulk create subscribersPOST](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers) [Next\\
\\
Modify subscriber credentialsPATCH](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel)

## Update Subscriber Status
# Update subscriber online status

Used to update the subscriber isOnline flag.

PATCH `/v1/subscribers/{subscriberId}/online-status`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag\#request-body)

`application/json` Required

`isOnline` Requiredboolean

## [Path Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag\#path-parameters)

`subscriberId` Requiredstring

## [Header Parameters](https://docs.novu.co/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X PATCH "https://api.novu.co/v1/subscribers/<string>/online-status" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "isOnline": true
  }'
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "firstName": "string",
  "lastName": "string",
  "email": "string",
  "phone": "string",
  "avatar": "string",
  "locale": "string",
  "subscriberId": "string",
  "channels": [\
    {\
      "providerId": "slack",\
      "integrationIdentifier": "string",\
      "credentials": {\
        "webhookUrl": "https://example.com/webhook",\
        "channel": "general",\
        "deviceTokens": [\
          "token1",\
          "token2",\
          "token3"\
        ],\
        "alertUid": "12345-abcde",\
        "title": "Critical Alert",\
        "imageUrl": "https://example.com/image.png",\
        "state": "resolved",\
        "externalUrl": "https://example.com/details"\
      },\
      "_integrationId": "string"\
    }\
  ],
  "topics": [\
    "string"\
  ],
  "isOnline": true,
  "lastOnlineAt": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "deleted": true,
  "createdAt": "string",
  "updatedAt": "string",
  "__v": 0,
  "data": {},
  "timezone": "string"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag.mdx)

## Add Subscribers to Topic
# Subscribers addition

Add subscribers to a topic by key

POST `/v1/topics/{topicKey}/subscribers`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/topics/topics-controller_assign\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/topics/topics-controller_assign\#request-body)

`application/json` Required

`subscribers` Requiredarray<string>

List of subscriber identifiers that will be associated to the topic

## [Path Parameters](https://docs.novu.co/api-reference/topics/topics-controller_assign\#path-parameters)

`topicKey` Requiredstring

The topic key

## [Header Parameters](https://docs.novu.co/api-reference/topics/topics-controller_assign\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/topics/<string>/subscribers" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "subscribers": [\
      "string"\
    ]
  }'
```

200400401403404405409413414415422429500503

### Response

```
{
  "succeeded": [\
    "string"\
  ],
  "failed": {
    "notFound": [\
      "string"\
    ]
  }
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_assign.mdx)

[Previous\\
\\
Get notificationsGET](https://docs.novu.co/api-reference/notifications/notifications-controller_list-notifications) [Next\\
\\
Topic creationPOST](https://docs.novu.co/api-reference/topics/topics-controller_create-topic)

## Delete Topic API
# Delete topic

Delete a topic by its topic key if it has no subscribers

DELETE `/v1/topics/{topicKey}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/topics/topics-controller_delete-topic\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/topics/topics-controller_delete-topic\#path-parameters)

`topicKey` Requiredstring

The topic key

## [Header Parameters](https://docs.novu.co/api-reference/topics/topics-controller_delete-topic\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X DELETE "https://api.novu.co/v1/topics/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

204400401403404405409413414415422429500503

The topic has been deleted correctly

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_delete-topic.mdx)

[Previous\\
\\
Topic creationPOST](https://docs.novu.co/api-reference/topics/topics-controller_create-topic) [Next\\
\\
Get topicGET](https://docs.novu.co/api-reference/topics/topics-controller_get-topic)

## Check Topic Subscriber
# Check topic subscriber

Check if a subscriber belongs to a certain topic

GET `/v1/topics/{topicKey}/subscribers/{externalSubscriberId}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/topics/topics-controller_get-topic-subscriber\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/topics/topics-controller_get-topic-subscriber\#path-parameters)

`externalSubscriberId` Requiredstring

The external subscriber id

`topicKey` Requiredstring

The topic key

## [Header Parameters](https://docs.novu.co/api-reference/topics/topics-controller_get-topic-subscriber\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/topics/<string>/subscribers/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

### Response

```
{
  "_organizationId": "org_123456789",
  "_environmentId": "env_123456789",
  "_subscriberId": "sub_123456789",
  "_topicId": "topic_123456789",
  "topicKey": "my_topic_key",
  "externalSubscriberId": "external_subscriber_123"
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_get-topic-subscriber.mdx)

[Previous\\
\\
Get topicGET](https://docs.novu.co/api-reference/topics/topics-controller_get-topic) [Next\\
\\
Get topic list filtered GET](https://docs.novu.co/api-reference/topics/topics-controller_list-topics)

## Get Topic by Key
# Get topic

Get a topic by its topic key

GET `/v1/topics/{topicKey}`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/topics/topics-controller_get-topic\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Path Parameters](https://docs.novu.co/api-reference/topics/topics-controller_get-topic\#path-parameters)

`topicKey` Requiredstring

The topic key

## [Header Parameters](https://docs.novu.co/api-reference/topics/topics-controller_get-topic\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/topics/<string>" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

OK

### Response

```
{
  "_id": "string",
  "_organizationId": "string",
  "_environmentId": "string",
  "key": "string",
  "name": "string",
  "subscribers": [\
    "string"\
  ]
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_get-topic.mdx)

[Previous\\
\\
Delete topicDELETE](https://docs.novu.co/api-reference/topics/topics-controller_delete-topic) [Next\\
\\
Check topic subscriberGET](https://docs.novu.co/api-reference/topics/topics-controller_get-topic-subscriber)

## Paginated Topic List
# Get topic list filtered

Returns a list of topics that can be paginated using the \`page\` query parameter and filtered by the topic key with the \`key\` query parameter

GET `/v1/topics`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/topics/topics-controller_list-topics\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Query Parameters](https://docs.novu.co/api-reference/topics/topics-controller_list-topics\#query-parameters)

`page` integer

The page number to retrieve (starts from 0)

Default: `0`Format: `"int64"`

`pageSize` integer

The number of items to return per page (default: 10)

Default: `10`Format: `"int64"`

`key` string

A filter key to apply to the results

## [Header Parameters](https://docs.novu.co/api-reference/topics/topics-controller_list-topics\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X GET "https://api.novu.co/v1/topics?page=0&pageSize=10&key=exampleKey" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>"
```

200400401403404405409413414415422429500503

### Response

```
{
  "data": [],
  "page": 1,
  "pageSize": 10,
  "totalCount": 10
}
```

### TypeScript

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_list-topics.mdx)

[Previous\\
\\
Check topic subscriberGET](https://docs.novu.co/api-reference/topics/topics-controller_get-topic-subscriber) [Next\\
\\
Subscribers removalPOST](https://docs.novu.co/api-reference/topics/topics-controller_remove-subscribers)

## Remove Topic Subscribers
# Subscribers removal

Remove subscribers from a topic

POST `/v1/topics/{topicKey}/subscribers/removal`

Hide sidebar

^



K



Test

## [Authorization](https://docs.novu.co/api-reference/topics/topics-controller_remove-subscribers\#authorization)

`Authorization` <token>

API key authentication. Allowed headers-- "Authorization: ApiKey <api\_key>".

In: `header`

## [Request Body](https://docs.novu.co/api-reference/topics/topics-controller_remove-subscribers\#request-body)

`application/json` Required

`subscribers` Requiredarray<string>

List of subscriber identifiers that will be removed to the topic

## [Path Parameters](https://docs.novu.co/api-reference/topics/topics-controller_remove-subscribers\#path-parameters)

`topicKey` Requiredstring

The topic key

## [Header Parameters](https://docs.novu.co/api-reference/topics/topics-controller_remove-subscribers\#header-parameters)

`idempotency-key` string

A header for idempotency purposes

cURLJavaScriptPHPGoPythonTypeScript

```
curl -X POST "https://api.novu.co/v1/topics/<string>/subscribers/removal" \
  -H "idempotency-key: <string>" \
  -H "Authorization: <token>" \
  -H "Content-Type: application/json" \
  -d '{
    "subscribers": [\
      "string"\
    ]
  }'
```

204400401403404405409413414415422429500503

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_remove-subscribers.mdx)

[Previous\\
\\
Get topic list filtered GET](https://docs.novu.co/api-reference/topics/topics-controller_list-topics) [Next\\
\\
Rename a topicPATCH](https://docs.novu.co/api-reference/topics/topics-controller_rename-topic)

## Self-Hosting Novu
Self hosting novu

# Deploy with Docker

Learn how to deploy Novu with Docker

Docker compose is the easiest way to get started with self-hosted Novu. This guide will walk you through the steps to run all services in single virtual machine using docker compose. This guide uses latest docker images. If you are looking to self host 0.24.x version, checkout [0.24.x docs](https://v0.x-docs.novu.co/self-hosting-novu/deploy-with-docker)

## [Prerequisites](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#prerequisites)

You need the following installed in your system:

- [Docker](https://docs.docker.com/engine/install/) and [docker-compose](https://docs.docker.com/compose/install/)
- [Git](https://git-scm.com/downloads)

## [Quick Start](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#quick-start)

### [Get the code](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#get-the-code)

Clone the Novu repo and enter the docker directory:

```
# Get the code
git clone --depth 1 https://github.com/novuhq/novu

# Go to the docker community folder
cd novu/docker/community

# Copy the example env file
cp .env.example .env
```

### [Configure Environment](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#configure-environment)

#### [Local Deployment](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#local-deployment)

To run Novu in local machine, default configuration can be used. Start Novu with:

novu/docker/community

```
docker-compose up

## if above command is not working, use docker compose
docker compose up
```

Now visit [http://localhost:4200](http://localhost:4200/) to start using Novu.

#### [VPS Deployment](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#vps-deployment)

When deploying to a VPS, update your `.env` file with your server's information:

```
# Replace <vps-ip-address> with your VPS IP address
HOST_NAME=http://<vps-ip-address>
```

Start Novu on your VPS:

```
docker-compose -f docker-compose.yml up
```

Access your dashboard at [http://vps-ip-address:4200](http://vps-ip-address:4200/).

## [Securing Your Setup](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#securing-your-setup)

While we provide example secrets for getting started, you should NEVER deploy your Novu setup using the defaults provided.

Update the `.env` file with your own secrets.

### [Required Variables:](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#required-variables)

- `JWT_SECRET`: Used by the API to generate JWT keys.
- `STORE_ENCRYPTION_KEY`: Used to encrypt/decrypt the provider credentials. It must be 32 characters long.
- `HOST_NAME`: Host name of your installation:
  - To run in local machine: `http://localhost`
  - To run in VPS: Your server's IP address (e.g., `http://<vps-ip-address>`) or domain name
- `REDIS_CACHE_SERVICE_HOST` and `REDIS_HOST` can have same value for small deployments. For larger deployments, it is recommended to use separate Redis instances for caching and queue management.

## [Configuration](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#configuration)

To keep the setup simple, we made some choices that may not be optimal for production:

- the database is in the same machine as the servers
- the storage uses localstack instead of S3

We strongly recommend that you decouple your database before deploying.

### [Setting Up local studio and bridge application](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#setting-up-local-studio-and-bridge-application)

#### [Setting Up the bridge application](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#setting-up-the-bridge-application)

The bridge application is application where workflow definition are written using `@novu/framework`. Here's how to set it up:

```
# Initialize the bridge application
npx novu@latest init \
  --secret-key=<secret_key> \
  --api-url=http://localhost:3000

# Install dependencies
npm install

# Start the bridge application
npm run dev
```

Nextjs based bridge application having one test workflow written using `@novu/framework` will be running on `http://localhost:4000`, Go to [http://localhost:4000/api/novu](http://localhost:4000/api/novu) to see status.

#### [Setting Up Novu Studio](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#setting-up-novu-studio)

[Novu Local Studio](https://docs.novu.co/framework/studio) is a development environment that allows you to test and manage your workflows. The setup varies based on your deployment:

1. Running in local machine

if novu is run using above docker compose command in local machine, use below commmand

```
npx novu@latest dev -d http://localhost:4200 -p <bridge_application_port>
```

Following actions will occur:

- Novu local studio will be started on default port 2002,
- Novu will generate a tunnel url that will forward the request to bridge application running on `<bridge_application_port>`
- Studio will use `http://localhost:4200` as dashboard url

**Using bridge application url as bridge url**

To use bridge application url as bridge url, use below command:

```
npx novu@latest dev -d http://localhost:4200 -p <bridge_application_port> -t http://host.docker.internal:<bridge_application_port>

# example:
npx novu@latest dev -d http://localhost:4200 -p 4000 -t http://host.docker.internal:4000
```

In Windows OS, there are some additional steps:

- stop the running docker compose process using `ctrl + c`
- update the `docker-compose.yml` file and add below config with each service (api, web, worker and ws)

```
extra_hosts:
    - "host.docker.internal:host-gateway"
```

- start the docker compose process again using `docker compose up`
- now you can use `host.docker.internal` as bridge url hostname inplace of `localhost`

2. Running in VPS

```
# update the bridge .env file with below variables
NOVU_API_URL=http://<vps-ip-address>:3000

# Start Novu Studio with your VPS dashboard URL and bridge application URL
npx novu@latest dev -d http://<vps-ip-address>:4200
```

Check all [available flags](https://docs.novu.co/framework/studio#novu-cli-flags) with `npx novu dev` command

### [Synchronizing Workflows](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#synchronizing-workflows)

1. For local deployment:

```
npx novu@latest sync \
  --bridge-url <tunnel-url>/api/novu \
  --api-url http://localhost:3000 \
  --secret-key <secret_key>
```

2. For VPS deployment:

```
npx novu@latest sync \
  --bridge-url <tunnel_url>/api/novu \
  --api-url http://<vps-ip-address>:3000 \
  --secret-key <secret_key>
```

### [VPS Security Considerations](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#vps-security-considerations)

When deploying to a VPS, consider these additional security measures:

1. Use a firewall to restrict access to only necessary ports
2. Set up SSL/TLS certificates for HTTPS access
3. Regularly update your Docker images and host system
4. Use strong, unique secrets in your `.env` file
5. Consider using a reverse proxy like Nginx for additional security layers

### [Triggering events with custom installation](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#triggering-events-with-custom-installation)

When self-hosting Novu, in order to trigger an event you must first create a new `Novu` object and configure it with the proper `backendUrl`.

```
import { Novu } from '@novu/node';

const config = {
  backendUrl: '<REPLACE_WITH_SELF_HOSTED_BACKEND_URL>',
};

const novu = new Novu('<API_KEY>', config);

await novu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {
  to: {
    subscriberId: '<SUBSCRIBER_ID>',
  },
  payload: {},
});
```

### [Caching](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#caching)

We are introducing the first stage of caching in our system to improve performance and efficiency. Caching is turned off by default, but can easily be activated by setting the following environment variables:

- REDIS\_CACHE\_SERVICE\_HOST
- REDIS\_CACHE\_SERVICE\_PORT

Currently, we are caching data in the most heavily loaded areas of the system: the widget requests such as feed and unseen count, as well as common DAL requests during the execution of trigger event flow. These are the most heavily used areas of our system, and we hope that by implementing caching in these areas, we can improve performance in the near future.

### [Reverse-Proxy / Load Balancers](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#reverse-proxy--load-balancers)

To implement a reverse-proxy or load balancer in front of Novu, you need to set the GLOBAL\_CONTEXT\_PATH for the base path of the application. This is the path that the application will be served from after the domain. For example: - company.com/novu This is used to set the base path for the application, and is used to set the base path for the API, web, and websocket connections.

The following environment variables are used to set the context path for each public service that Novu provides: API\_CONTEXT\_PATH WIDGET\_CONTEXT\_PATH WS\_CONTEXT\_PATH WEB\_CONTEXT\_PATH

These allow you to set the context path for each service independently or dependently of the GLOBAL\_CONTEXT\_PATH.

For example, if I was using a reverse proxy to serve Novu from company.com/novu, I would set the GLOBAL\_CONTEXT\_PATH to novu, and then set the API\_CONTEXT\_PATH to api, the WIDGET\_CONTEXT\_PATH to widget, the WS\_CONTEXT\_PATH to ws, and the WEB\_CONTEXT\_PATH to web.

This would produce the following urls: - API: company.com/novu/api - WIDGET: company.com/novu/widget - WS: company.com/novu/ws - WEB: company.com/novu/web

However the Service context path can be used entirely independently of the GLOBAL\_CONTEXT\_PATH.

For example, if I wanted to expose the api as novu-api, I would set the API\_CONTEXT\_PATH to novu-api without setting the GLOBAL\_CONTEXT\_PATH. This would producte the following url: - API: company.com/novu-api

These env variables should be present on all services novu provides due to tight coupling.

## [FAQs](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#faqs)

### [Local Tunnel and Self-Hosted Deployments](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#local-tunnel-and-self-hosted-deployments)

Novu uses a local tunnel as bridge url. It can be used as bridge url with local studio and for testing purpose in development environment. It should not be used in production environment. It is recommended to use deployed application url as bridge url

#### [When is Local Tunnel Not Required?](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#when-is-local-tunnel-not-required)

If the customer's application and the self-hosted Novu deployment are within the same network, there is no need for a local tunnel. In this case, the application can communicate directly with Novu through the internal network. Checkout `Using bridge application url as bridge url` section to learn more.

#### [When is Local Tunnel Required?](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker\#when-is-local-tunnel-required)

If the application and Novu deployment reside on different networks, you can still interact with your self-hosted Novu instance using the Novu CLI. The CLI allows you to specify the Dashboard URL and Bridge Endpoint Origin to enable communication across networks via the Novu Cloud Local Tunnel.

For example, you can use the following command:

```
npx novu@latest dev -d http://my-self-hosted-novu-domain.com:my-port
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/deploy-with-docker.mdx)

[Previous\\
\\
Overview](https://docs.novu.co/community/self-hosting-novu/overview) [Next\\
\\
Telemetry](https://docs.novu.co/community/self-hosting-novu/telemetry)

### On this page

[Prerequisites](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#prerequisites) [Quick Start](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#quick-start) [Get the code](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#get-the-code) [Configure Environment](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#configure-environment) [Local Deployment](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#local-deployment) [VPS Deployment](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#vps-deployment) [Securing Your Setup](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#securing-your-setup) [Required Variables:](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#required-variables) [Configuration](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#configuration) [Setting Up local studio and bridge application](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#setting-up-local-studio-and-bridge-application) [Setting Up the bridge application](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#setting-up-the-bridge-application) [Setting Up Novu Studio](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#setting-up-novu-studio) [Synchronizing Workflows](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#synchronizing-workflows) [VPS Security Considerations](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#vps-security-considerations) [Triggering events with custom installation](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#triggering-events-with-custom-installation) [Caching](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#caching) [Reverse-Proxy / Load Balancers](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#reverse-proxy--load-balancers) [FAQs](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#faqs) [Local Tunnel and Self-Hosted Deployments](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#local-tunnel-and-self-hosted-deployments) [When is Local Tunnel Not Required?](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#when-is-local-tunnel-not-required) [When is Local Tunnel Required?](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker#when-is-local-tunnel-required)

## Self-Hosting Novu Overview
Self hosting novu

# Overview

Self-hosting Novu provides full control and flexibility over your notification infrastructure, with specific system requirements for optimal performance across VMs, Redis, MongoDB, and S3 storage.

When self-hosting Novu, you take full control over your communication infrastructure by deploying it on your own servers. While this setup allows for customization and greater flexibility, it is important to note that some features exclusive to Novu's cloud-managed solution will not be available in a self-hosted environment.

## [System requirements overview](https://docs.novu.co/community/self-hosting-novu/overview\#system-requirements-overview)

### [Hosting Novu services on separate VMs](https://docs.novu.co/community/self-hosting-novu/overview\#hosting-novu-services-on-separate-vms)

For optimal performance, we recommend hosting Novu's core services across multiple virtual machines (VMs).

- **Novu services:**
  - 3 VMs per service
  - Each VM: 2 vCPUs and 4GB of RAM
- **Redis:**
  - 2 Redis clusters (one dedicated to queues with Append-Only Log (AOL) enabled)
  - Minimum: 8GB RAM per cluster
- **MongoDB:**
  - 1 MongoDB cluster (M20 or higher on MongoDB Atlas)
- **Storage:**
  - 10GB of S3 storage

### [Hosting all Novu services on a single VM](https://docs.novu.co/community/self-hosting-novu/overview\#hosting-all-novu-services-on-a-single-vm)

If resources are limited or simplicity is a priority, Novu services can be hosted on a single VM.

- **All services:** 36 vCPUs and 64GB of RAM
- **Storage:** 10GB of S3 storage

### [Redis requirements](https://docs.novu.co/community/self-hosting-novu/overview\#redis-requirements)

- **Redis Clusters:** 2 (one for queues with AOL enabled)
- **Memory:** 8GB RAM per cluster
- **AOL:** Active Append-Only Log (AOL) for data persistence and to prevent job loss during outages.

### [MongoDB requirements](https://docs.novu.co/community/self-hosting-novu/overview\#mongodb-requirements)

- **MongoDB cluster:** M20 or higher (recommended) on MongoDB Atlas.

### [Storage requirements](https://docs.novu.co/community/self-hosting-novu/overview\#storage-requirements)

- **S3 storage:** Minimum 10GB for file storage.

The above specifications are general recommendations. Adjust them based on your system load, usage
patterns, and scale of operations.

Self-hosting Novu does not support GitHub login. To access your account, please use the email and
password associated with your Novu account.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/overview.mdx)

[Previous\\
\\
Run Novu in local machine](https://docs.novu.co/community/run-in-local-machine) [Next\\
\\
Deploy with Docker](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker)

### On this page

[System requirements overview](https://docs.novu.co/community/self-hosting-novu/overview#system-requirements-overview) [Hosting Novu services on separate VMs](https://docs.novu.co/community/self-hosting-novu/overview#hosting-novu-services-on-separate-vms) [Hosting all Novu services on a single VM](https://docs.novu.co/community/self-hosting-novu/overview#hosting-all-novu-services-on-a-single-vm) [Redis requirements](https://docs.novu.co/community/self-hosting-novu/overview#redis-requirements) [MongoDB requirements](https://docs.novu.co/community/self-hosting-novu/overview#mongodb-requirements) [Storage requirements](https://docs.novu.co/community/self-hosting-novu/overview#storage-requirements)

## Novu Telemetry Configuration
Self hosting novu

# Telemetry

Learn about Novu's telemetry data collection and how to configure it

Telemetry in Novu encompasses the collection of data regarding user interactions with the platform. This data enables the Novu team to identify usage patterns, troubleshoot issues, and make informed decisions about new features and improvements.

## [Data collected by Novu](https://docs.novu.co/community/self-hosting-novu/telemetry\#data-collected-by-novu)

Novu does not capture any data from your APIs, databases, or third-party tools. All information collected from self-hosted instances is completely anonymized to protect user privacy.

### [Keep Alive Beacon](https://docs.novu.co/community/self-hosting-novu/telemetry\#keep-alive-beacon)

The Novu server sends a keep-alive ping every hour to confirm its operational status without errors. This data is collected regardless of whether telemetry is enabled or disabled.

```
{
  "freeMemory": 115703808,
  "hostname": "somemachine",
  "instanceId": "ba54fb29-6422-4a83-a0e4-951d767efa73",
  "ipAddress": "192.168.1.4",
  "platform": "darwin",
  "release": "23.6.0",
  "timestamp": "2024-10-04T11:54:14",
  "totalMemory": 8589934592
}
```

### [Usage Statistics](https://docs.novu.co/community/self-hosting-novu/telemetry\#usage-statistics)

When telemetry is enabled, the server collects anonymous information regarding users, organizations, events, notifications, and more. This data provides insights into platform usage and helps us improve the Novu Project for all users.

```
{
  "eventCount": 1,
  "integrationCount": [\
    {\
      "count": 1,\
      "providerId": "example"\
    },\
    {\
      "count": 1,\
      "providerId": "novu"\
    }\
  ],
  "orgCount": 1,
  "subscriberCount": 1,
  "timestamp": "2024-10-04T11:54:30",
  "topicCount": 3,
  "totalSteps": 10,
  "userCount": 3,
  "workflowCount": 6
}
```

## [Disable telemetry](https://docs.novu.co/community/self-hosting-novu/telemetry\#disable-telemetry)

Sharing telemetry data is optional. You can disable telemetry via the Admin Settings or by modifying the relevant environment variable.

### [Environment variable](https://docs.novu.co/community/self-hosting-novu/telemetry\#environment-variable)

To disable telemetry using the `NOVU_TELEMETRY` environment variable, follow these steps:

1. Go to the directory where the .env file is located.
2. Open the file in an editor and search for `NOVU_TELEMETRY`.
3. Change the value of `NOVU_TELEMETRY` to `false`.
4. Restart the Docker container.

Once the container restarts, Novu will be running with telemetry disabled.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/telemetry.mdx)

[Previous\\
\\
Deploy with Docker](https://docs.novu.co/community/self-hosting-novu/deploy-with-docker)

### On this page

[Data collected by Novu](https://docs.novu.co/community/self-hosting-novu/telemetry#data-collected-by-novu) [Keep Alive Beacon](https://docs.novu.co/community/self-hosting-novu/telemetry#keep-alive-beacon) [Usage Statistics](https://docs.novu.co/community/self-hosting-novu/telemetry#usage-statistics) [Disable telemetry](https://docs.novu.co/community/self-hosting-novu/telemetry#disable-telemetry) [Environment variable](https://docs.novu.co/community/self-hosting-novu/telemetry#environment-variable)

## GitHub Actions Deployment
# GitHub Actions

Learn how to deploy your Novu workflows with our built-in GitHub Action command:

```
name: Deploy workflow State to Novu

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # https://github.com/novuhq/actions-novu-sync
      - name: Sync State to Novu
        uses: novuhq/actions-novu-sync@v2
        with:
          # The secret key used to authenticate with Novu Cloud
          # To get the secret key, go to https://web.novu.co/api-keys.
          # Required.
          secret-key: ${{ secrets.NOVU_SECRET_KEY }}

          # The publicly available endpoint hosting the bridge application
          # where notification entities (eg. workflows, topics) are defined.
          # Required.
          bridge-url: ${{ secrets.NOVU_BRIDGE_URL }}

          # The Novu Cloud API URL to sync with.
          # Optional.
          # Defaults to https://api.novu.co
          api-url: https://api.novu.co
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/actions.mdx)

[Previous\\
\\
CLI](https://docs.novu.co/framework/deployment/cli)

## Novu CLI Workflow Sync
# CLI

The Novu CLI provides a mechanism for you to synchronize your workflows into Novu Cloud so that non-technical Novu users can control the workflow and Step-level controls and enable your workflows to be triggered via Novu API.

US RegionEU Region

```
npx novu@latest sync \
  --bridge-url <YOUR_DEPLOYED_URL_WITH_BRIDGE_ENDPOINT> \
  --secret-key <NOVU_SECRET_KEY> \
  --api-url https://api.novu.co
```

- If your application api server is running at URL **[https://api.domain.com](https://api.domain.com/)** and **/api/novu** endpoint is serving Novu workflows created using Novu Framework, then `<YOUR_DEPLOYED_URL>` in above command will be `https://api.domain.com/api/novu`

- If your application is running in local machine with a local studio server, the tunnel URL can be used as `<YOUR_DEPLOYED_URL>`. The tunnel URL follows the format of `https://<UUID>.novu.sh/api/novu`, and example is `https://041e553c-0dbf-47e0-8ffa-c4536f390145.novu.sh/api/novu`. In this example `041e553c-0dbf-47e0-8ffa-c4536f390145` is the unique tunnel identifier which is generated for each Novu user when starting a tunnel via `npx novu@latest dev`. The tunnel identifier is persisted to your local machine to guarantee the same tunnel URL each time you invoke `npx novu@latest dev`.


## [Using vercel preview url](https://docs.novu.co/framework/deployment/cli\#using-vercel-preview-url)

In free tier, vercel preview urls for non production deployments are not publicly accessible. You will need to enable [Protection Bypass for Automation](https://vercel.com/docs/security/deployment-protection/methods-to-bypass-deployment-protection/protection-bypass-automation#protection-bypass-for-automation) from settings to make the preview url publicly accessible. Use vercel generated secret key in query params with bridge url to make the bridge url accessible to novu.

Example: `https://my-app-preview-url.vercel.app/api/novu?x-vercel-protection-bypass=BYPASS_SECRET_KEY`

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/cli.mdx)

[Previous\\
\\
Syncing](https://docs.novu.co/framework/deployment/syncing) [Next\\
\\
GitHub Actions](https://docs.novu.co/framework/deployment/actions)

### On this page

[Using vercel preview url](https://docs.novu.co/framework/deployment/cli#using-vercel-preview-url)

## Production Deployment Guide
# Production Deployment Guide

Learn how to deploy your Novu Framework application to production including networking, security, and HMAC verification setup.

## [Networking](https://docs.novu.co/framework/deployment/production\#networking)

Novu Cloud workers will need to be able to communicate with your [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint). You will need to ensure that your firewall rules allow traffic from the internet.
Due to the autoscaling nature of Novu Cloud, we don't have a set of IP Addresses that you can whitelist.

## [Security](https://docs.novu.co/framework/deployment/production\#security)

Novu Cloud workers are GDPR, SOC2 type II and ISO 27001 compliant. We take security very seriously and have implemented a number of security measures to ensure that your data is safe.
Novu Framework has a builtin security mechanism that ensures that the requests are authentic from Novu Cloud using an HMAC signature.

HMAC Verification is turned on by default for all "production" NODE\_ENV environments

For `NODE_ENV=development` the HMAC validation is turned off, for the Studio to be able to reach
your endpoint.

The `Novu-Signature` header included in each signed event contains a timestamp and one or more signatures that we verify.
The timestamp is prefixed by `t=`, and each signature is prefixed by a scheme.
Schemes start with `v`, followed by an integer. Currently, the only valid live signature scheme is v1.

Handling the signature verification is done by the Novu Framework, so you don't need to perform any action.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/production.mdx)

[Previous\\
\\
Integrate Zod](https://docs.novu.co/framework/schema/zod) [Next\\
\\
Syncing](https://docs.novu.co/framework/deployment/syncing)

### On this page

[Networking](https://docs.novu.co/framework/deployment/production#networking) [Security](https://docs.novu.co/framework/deployment/production#security)

## Syncing Changes to Novu
# Syncing your local changes to the Novu Cloud Dashboard

Novu operates in a multi environment setup, with the currently available environments:

- **Local Studio** \- Running against your local machine, this is where you can create, edit, and preview workflows.
- **Development** \- Acts as a Staging environment, where your non-technical peers can view and modify controls.
- **Production** \- For triggering workflows to your customers.

## [Sync changes to Novu Cloud](https://docs.novu.co/framework/deployment/syncing\#sync-changes-to-novu-cloud)

Novu Framework operates in a GitOps model. This means that the source of truth for your workflows and configurations are located in your Git as Code.

The general workflow for pushing changes to Novu Cloud is as follows:

- Create a feature branch
- Develop workflows locally in your bridge application
- Sync changes to the Development environment to test e2e
- Merge the feature branch to your `dev` branch
  - This will trigger a CI/CD pipeline that will deploy the changes to the Development environment
- Test the changes in the Development environment
- Merge the `dev` branch to the `main` branch
  - This will trigger a CI/CD pipeline that will deploy the changes to the Production environment

## [CI/CD Integrations](https://docs.novu.co/framework/deployment/syncing\#cicd-integrations)

Novu currently supports the following CI integrations:

- **GitHub Actions** \- [Direct Integration](https://docs.novu.co/framework/deployment/actions)
- **GitLab CI** \- Using our [CLI command](https://docs.novu.co/framework/deployment/cli)
- **Jenkins** \- Using our [CLI command](https://docs.novu.co/framework/deployment/cli)
- **CircleCI** \- Using our [CLI command](https://docs.novu.co/framework/deployment/cli)
- **Bitbucket Pipelines** \- Using our [CLI command](https://docs.novu.co/framework/deployment/cli)
- **Azure DevOps** \- Using our [CLI command](https://docs.novu.co/framework/deployment/cli)
- **Travis CI** \- Using our [CLI command](https://docs.novu.co/framework/deployment/cli)
- **Other** \- For any other CI/CD tool, you can use our [CLI command](https://docs.novu.co/framework/deployment/cli)

Direct integration with other CI/CD tools is on our roadmap. If you would like to see a specific
CI/CD tool integrated, please reach out to us.

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/syncing.mdx)

[Previous\\
\\
Production Deployment Guide](https://docs.novu.co/framework/deployment/production) [Next\\
\\
CLI](https://docs.novu.co/framework/deployment/cli)

### On this page

[Sync changes to Novu Cloud](https://docs.novu.co/framework/deployment/syncing#sync-changes-to-novu-cloud) [CI/CD Integrations](https://docs.novu.co/framework/deployment/syncing#cicd-integrations)

## React Email Templates
# React Email

Learn how to use React Email to build beautiful email templates

React Email is a collection of high-quality, unstyled components for creating beautiful emails using React and TypeScript.
It's a great way to build email templates that are consistent with your brand and easy to maintain.

## [Getting Started](https://docs.novu.co/framework/content/react-email\#getting-started)

Install React.Email components

```
npm install @react-email/components react-email
```

Write your email

```
import {
    Body,
    Container,
    Head,
    Html,
    render,
} from '@react-email/components';
import * as React from "react";

interface TestEmailProps {
    name: string
}

export const TestEmailTemplate = ({ name }: TestEmailProps) => {
    return (
        <Html>
            <Head />
            <Body>
                <Container>
                    Hello {name} welcome to your first React E-mail template!
                </Container>
            </Body>
        </Html>
    );
};

export default TestEmailTemplate;

export function renderEmail(name: string) {
    return render(<TestEmailTemplate name={name} />);
}
```

Write your workflow

```
import { workflow } from '@novu/framework';
import { renderEmail } from './emails/test-email';
import { z } from 'zod';

export const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {
    await step.email('send-email', async (controls) => {
        return {
            subject: controls.subject,
            body: renderEmail(payload.userName),
        };
    },
    {
        controlSchema: z.object({
            subject: z.string().default('A Successful Test on Novu from {{userName}}'),
        }),
    });
}, {
    payloadSchema: z.object({
        userName: z.string().default('John Doe'),
    }),
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/content/react-email.mdx)

[Previous\\
\\
Chat](https://docs.novu.co/framework/chat-channel) [Next\\
\\
Remix & React Email](https://docs.novu.co/framework/content/remix-react-email)

### On this page

[Getting Started](https://docs.novu.co/framework/content/react-email#getting-started)

## Remix & React Email
# Remix & React Email

Learn how to integrate React Email with Novu Framework in a Remix application

Integrating Novu Framework with [React email](https://react.email/) for your Remix application can be done in three steps. If you don't have an app, you can [clone our Remix example](https://github.com/novuhq/novu-framework-remix-example).

Install React email components

Install the required React email components.

```
  npm i @react-email/components react-email
```

Create email templates folder

Create an `emails` folder in the `app` directory of your Remix app.

Write your email

Create a new `sample-email.tsx` file for your email template.

```
import { Button, Html } from "@react-email/components";

function Email(props) {
  return (
    <Html>
      <Button
        href="https://example.com"
        style={{ background: "#000", color: "#fff", padding: "12px 20px" }}
      >
        Click me
      </Button>
    </Html>
  );
}

export function renderEmail(inputs) {
  return render(<Email {...inputs} />);
}
```

Write your workflow

Define your workflow using the above template

```
import { renderEmail } from './sample-email.tsx';
import { workflow } from '@novu/framework';

workflow('new-signup', async ({ step, payload }) => {
  await step.email('send-email', async (inputs) => {
    return {
      subject: `Welcome to Remix and React E-mail`,
      body: renderEmail(inputs),
    }
  });
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/content/remix-react-email.mdx)

[Previous\\
\\
React Email](https://docs.novu.co/framework/content/react-email) [Next\\
\\
Svelte Email](https://docs.novu.co/framework/content/svelte-email)

## Svelte Email Guide
# Svelte Email

Learn how to use Svelte Email to build beautiful email templates

Integrating Novu Framework with [Svelte email](https://react.email/) for your Svelte application can be done in three steps. If you don't have an app, you can [clone our Svelte example](https://github.com/novuhq/novu-svelte-email).

Install Svelte email components

Install the required Svelte email components.

```
  npm install svelte-email
```

Create email templates folder

Create a new folder called `emails` in your `src` folder.

Write your email

Create a new file called `test-email.svelte` in your `emails` folder.

```
<script lang="ts">
    import {
        Body,
        Container,
        Head,
        Html,
        Preview,
    } from 'svelte-email';

    export let name: string;
</script>

<Html>
    <Head />
    <Preview>Welcome to Svelte Email</Preview>
    <Body>
        <Container>
            <h1>Welcome, {name}!</h1>
            <p>Thanks for trying Svelte Email. We're thrilled to have you on board.</p>
        </Container>
    </Body>
</Html>
```

Create a new file called `test-email.ts` in your `emails` folder.

```
import { render } from 'svelte-email';
import TestEmail from './test-email.svelte';

export function renderEmail(name: string) {
    return render({
        template: TestEmail,
        props: {
            name,
        },
    });
}
```

Write your workflow

Define your workflow using the above template

```
import { workflow } from '@novu/framework';
import { renderEmail } from './emails/test-email';
import { z } from 'zod';

export const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {
    await step.email('send-email', async (controls) => {
        return {
            subject: controls.subject,
            body: renderEmail(payload.userName),
        };
    },
    {
        controlSchema: z.object({
            subject: z.string().default('A Successful Test on Novu from {{userName}}'),
        }),
    });
}, {
    payloadSchema: z.object({
        userName: z.string().default('John Doe'),
    }),
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/content/svelte-email.mdx)

[Previous\\
\\
Remix & React Email](https://docs.novu.co/framework/content/remix-react-email) [Next\\
\\
Vue Email](https://docs.novu.co/framework/content/vue-email)

## Vue Email Guide
# Vue Email

Learn how to use Vue Email to build beautiful email templates

You can integrate Novu Framework with [Vue Email](https://vuemail.net/) in a few simple steps. This guide will walk you through the process of creating a new email template using Vue Email and Nuxt.

For a Quickstart Boilerplate project using Nuxt.js, and Vue Email, check out the [Vue Email Starter repository](https://github.com/novuhq/novu-framework-nuxt-example/)

## [Quickstart](https://docs.novu.co/framework/content/vue-email\#quickstart)

Install Vue.Email components

```
npm install @vue-email/components
```

Create templates folder

Create a new folder called `emails` in your `src` folder.

Update nuxt.config.ts File

```
export default defineNuxtConfig({
    build: {
        transpile: ['@vue/email'],
    },
    nitro: {
        esbuild: {
            options: {
                target: 'esnext',
            },
        },
    },
});
```

Write your email

```
<script setup lang="ts">
import { VueEmail, Button, Container, Head, Html, Preview } from '@vue-email/components';

defineProps<{
    name: string;
}>();
</script>

<template>
    <VueEmail>
        <Html>
            <Head />
            <Preview>Welcome to Vue Email</Preview>
            <Container>
                <h1>Welcome, {{ name }}!</h1>
                <p>Thanks for trying Vue Email. We're thrilled to have you on board.</p>
            </Container>
        </Html>
    </VueEmail>
</template>
```

Write your workflow

```
import { workflow } from '@novu/framework';
import { renderEmail } from './emails/test-email';
import { z } from 'zod';

export const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {
    await step.email('send-email', async (controls) => {
        return {
            subject: controls.subject,
            body: renderEmail(payload.userName),
        };
    },
    {
        controlSchema: z.object({
            subject: z.string().default('A Successful Test on Novu from {{userName}}'),
        }),
    });
}, {
    payloadSchema: z.object({
        userName: z.string().default('John Doe'),
    }),
});
```

## [Learn More](https://docs.novu.co/framework/content/vue-email\#learn-more)

To learn more, refer to [Vue Email documentation](https://vuemail.net/).

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/content/vue-email.mdx)

[Previous\\
\\
Svelte Email](https://docs.novu.co/framework/content/svelte-email) [Next\\
\\
Digest Action](https://docs.novu.co/framework/digest)

### On this page

[Quickstart](https://docs.novu.co/framework/content/vue-email#quickstart) [Learn More](https://docs.novu.co/framework/content/vue-email#learn-more)

## Novu Express Quickstart
Quickstart

# Express Quickstart

Get started with Novu Framework in an Express application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a Express.js application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/express\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/express\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

### [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/express\#add-a-novu-api-endpoint)

```
import { serve } from "@novu/framework/express";
import { testWorkflow } from "../novu/workflows";

app.use(express.json()); // Required for Novu POST requests
app.use( "/api/novu", serve({ workflows: [testWorkflow] }) );
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/express\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/express\#create-your-workflow-definition)

Add a `novu` folder in your app folder as such `novu/workflows.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/express\#start-your-application)

Start your Express server with the Novu Endpoint configured.

If your Express application is running on other than `4000` port, restart the `npx novu dev` command with the port:

```
npx novu@latest dev --port <YOUR_EXPRESS_JS_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/express\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/express\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/express.mdx)

[Previous\\
\\
Introduction](https://docs.novu.co/framework/overview) [Next\\
\\
H3](https://docs.novu.co/framework/quickstart/h3)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/express#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/express#install-packages) [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/express#add-a-novu-api-endpoint) [Configure your secret key](https://docs.novu.co/framework/quickstart/express#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/express#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/express#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/express#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/express#deploy-your-application)

## Novu H3 Quickstart
Quickstart

# H3 Quickstart

Get started with Novu Framework in an H3 application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a H3 application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/h3\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/h3\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

### [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/h3\#add-a-novu-api-endpoint)

```
import { createApp, eventHandler, toNodeListener } from "h3";
import { serve } from "@novu/framework/h3";
import { createServer } from "node:http";
import { testWorkflow } from "./novu/workflows";

const app = createApp();

app.use("/api/novu", eventHandler(serve({ workflows: [testWorkflow] }) ));

createServer(toNodeListener(app)).listen(4000);
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/h3\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/h3\#create-your-workflow-definition)

Add a `novu` folder in your app folder as such `novu/workflows.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/h3\#start-your-application)

Start your H3 server with the Novu Endpoint configured.

If your H3 application is running on other than `4000` port, restart the `npx novu dev` command with the port:

```
npx novu@latest dev --port <YOUR_H3_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/h3\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/h3\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/h3.mdx)

[Previous\\
\\
Express](https://docs.novu.co/framework/quickstart/express) [Next\\
\\
AWS Lambda](https://docs.novu.co/framework/quickstart/lambda)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/h3#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/h3#install-packages) [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/h3#add-a-novu-api-endpoint) [Configure your secret key](https://docs.novu.co/framework/quickstart/h3#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/h3#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/h3#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/h3#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/h3#deploy-your-application)

## Novu AWS Lambda Guide
Quickstart

# AWS Lambda Quickstart

Get started with Novu Framework in an AWS Lambda function

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a AWS Lambda application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/lambda\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/lambda\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

### [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/lambda\#add-a-novu-api-endpoint)

```
import { serve } from "@novu/framework/lambda";
import { workflow } from "@novu/framework";
import { testWorkflow } from "../novu/workflows";

module.exports.novu = serve({
    workflows: [testWorkflow],
});
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/lambda\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/lambda\#create-your-workflow-definition)

Add a `novu` folder in your app folder as such `novu/workflows.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/lambda\#start-your-application)

Start your AWS Lambda server with the Novu Endpoint configured.

If your Local Lambda application is running on other than `4000` port, restart the `npx novu dev` command with the port:

```
npx novu@latest dev --port <YOUR_AWS LAMBDA_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/lambda\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/lambda\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/lambda.mdx)

[Previous\\
\\
H3](https://docs.novu.co/framework/quickstart/h3) [Next\\
\\
NestJS](https://docs.novu.co/framework/quickstart/nestjs)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/lambda#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/lambda#install-packages) [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/lambda#add-a-novu-api-endpoint) [Configure your secret key](https://docs.novu.co/framework/quickstart/lambda#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/lambda#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/lambda#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/lambda#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/lambda#deploy-your-application)

## Novu NestJS Quickstart
Quickstart

# NestJS Quickstart

Get started with Novu Framework in a NestJS application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a NestJS application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/nestjs\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/nestjs\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

Add the NovuModule to your application

The `NovuModule` is a NestJS module that registers the Novu Endpoint in your application.

The following example does not support NestJS dependency injection. If you need to `@Injectable` dependencies in your workflow definition, see [Advanced Usage](https://docs.novu.co/framework/quickstart/nestjs#advanced-usage-dependency-injection).

```
import { Module } from '@nestjs/common';
import { NovuModule } from '@novu/framework/nest';
import { testWorkflow } from './novu/workflows';

@Module({
    imports: [\
        NovuModule.register({\
            apiPath: '/api/novu',\
            workflows: [testWorkflow],\
        }),\
    ],
})
export class AppModule {}
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/nestjs\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/nestjs\#create-your-workflow-definition)

Add a `novu` folder in your `src` folder as such `src/novu/workflows.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/nestjs\#start-your-application)

Start your NestJS application with the Novu Endpoint configured.

If your NestJS application is running on other than `4000` port, restart the `npx novu dev` command with the port:

```
npx novu@latest dev --port <YOUR_NESTJS_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/nestjs\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/nestjs\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

## [Advanced Usage (Dependency Injection)](https://docs.novu.co/framework/quickstart/nestjs\#advanced-usage-dependency-injection)

If you need to inject dependencies into your workflow definition, you can use the `registerAsync` method.

Add the `NovuModule` using the `registerAsync` method to your `AppModule`.

```
import { Module } from '@nestjs/common';
import { NovuModule } from '@novu/framework/nest';
import { NotificationService } from './notification.service';
import { UserService } from './user.service';

@Module({
  imports: [\
    NovuModule.registerAsync({\
      imports: [AppModule],\
      useFactory: (notificationService: NotificationService) => ({\
        apiPath: '/api/novu',\
        workflows: [notificationService.welcomeWorkflow()],\
      }),\
      inject: [NotificationService],\
    }),\
  ],
  providers: [NotificationService, UserService],
  exports: [NotificationService],
})
export class AppModule {}
```

For example, you might need to inject a service that fetches the user's name from a database. This is useful when you need to fetch data in realtime during the execution of your workflow.

An example `UserService` is available below with hardcoded values, but in a real-world application you might use a database or an external API to fetch the user's name.

```
import { Injectable } from '@nestjs/common';

@Injectable()
export class UserService {
  getUser(id: string) {
    return {
      name: 'John Doe',
      email: `john.doe.${id}@example.com`,
    };
  }
}
```

Finally, configure your `NotificationService` to use the injected `UserService`.

```
import { Injectable } from '@nestjs/common';
import { workflow } from '@novu/framework';
import { z } from 'zod';
import { UserService } from './user.service';

@Injectable()
export class NotificationService {
  constructor(private readonly userService: UserService) {}

  public welcomeWorkflow() {
    return workflow(
      'welcome-email',
      async ({ step, payload }) => {
        await step.email('send-email', async () => {
          const user = this.userService.getUser(payload.userId);

          return {
            subject: `Hello, ${user.name}`,
            body: `We are glad you are here!`,
          };
        });
      },
      {
        payloadSchema: z.object({
          userId: z.string(),
        }),
      }
    );
  }
}
```

A full example NestJS application demonstrating dependency injection is available [here](https://github.com/novuhq/novu/tree/next/playground/nestjs).

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nestjs.mdx)

[Previous\\
\\
AWS Lambda](https://docs.novu.co/framework/quickstart/lambda) [Next\\
\\
Next.js](https://docs.novu.co/framework/quickstart/nextjs)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/nestjs#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/nestjs#install-packages) [Configure your secret key](https://docs.novu.co/framework/quickstart/nestjs#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/nestjs#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/nestjs#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/nestjs#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/nestjs#deploy-your-application) [Advanced Usage (Dependency Injection)](https://docs.novu.co/framework/quickstart/nestjs#advanced-usage-dependency-injection)

## Next.js Quickstart Guide
Quickstart

# Next.js Quickstart

Get started with Novu Framework in a Next.js application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a Next.js application and send our first test workflow.

Create a Next.js application

This link can be copied right from the onboarding guide on the Novu Studio or can always be copied from the [API Keys](https://dashboard-v2.novu.co/api-keys) page on the Novu Dashboard.

```
npx novu init --secret-key=<YOUR_NOVU_SECRET_KEY>
```

The sample application will create an `.env` file containing the `NOVU_SECRET_KEY` environment variable required
for securing your endpoint. And a sample workflow demonstrating the flexibility of Novu using Step Controls.

### Manually add to an existing application (5 minutes)

### [Start your application](https://docs.novu.co/framework/quickstart/nextjs\#start-your-application)

To start your boilerplate Next.js server with the Novu Endpoint configured, run the following command:

```
cd my-novu-app && npm run dev
```

The sample application will start on [`https://localhost:4000`](https://localhost:4000/) and your novu endpoint will be exposed at `/api/novu` served by the Next.js API.

If your Next.js application is running on other than `4000` port, restart the `novu dev` command with the port:

```
npx novu@latest dev --port <YOUR_NEXTJS_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/nextjs\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/nextjs\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx)

[Previous\\
\\
NestJS](https://docs.novu.co/framework/quickstart/nestjs) [Next\\
\\
Nuxt](https://docs.novu.co/framework/quickstart/nuxt)

### On this page

[Start your application](https://docs.novu.co/framework/quickstart/nextjs#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/nextjs#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/nextjs#deploy-your-application)

## Novu Nuxt Quickstart
Quickstart

# Nuxt Quickstart

Get started with Novu Framework in a Nuxt application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a Nuxt application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/nuxt\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/nuxt\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

### [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/nuxt\#add-a-novu-api-endpoint)

```
import { serve } from '@novu/framework/nuxt';
import { testWorkflow } from "../novu/workflows";

export default defineEventHandler(serve({ workflows: [myWorkflow] }));
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/nuxt\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/nuxt\#create-your-workflow-definition)

Add a `novu` folder in your app folder as such `app/server/api/novu.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/nuxt\#start-your-application)

Start your Nuxt application with the Novu Endpoint configured.

```
cd my-novu-app && npm run dev
```

If your Nuxt application is running on other than `4000` port, restart the `npx novu dev` command with the port:

```
npx novu@latest dev --port <YOUR_NUXT_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/nuxt\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/nuxt\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nuxt.mdx)

[Previous\\
\\
Next.js](https://docs.novu.co/framework/quickstart/nextjs) [Next\\
\\
Remix](https://docs.novu.co/framework/quickstart/remix)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/nuxt#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/nuxt#install-packages) [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/nuxt#add-a-novu-api-endpoint) [Configure your secret key](https://docs.novu.co/framework/quickstart/nuxt#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/nuxt#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/nuxt#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/nuxt#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/nuxt#deploy-your-application)

## Novu Remix Quickstart
Quickstart

# Remix Quickstart

Get started with Novu Framework in a Remix application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a Remix application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/remix\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/remix\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

### [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/remix\#add-a-novu-api-endpoint)

This guide is based on Remix Offical [Quick Start](https://remix.run/docs/en/main/start/quickstart).

```
import { serve } from "@novu/framework/remix";
import { testWorkflow } from "../novu/workflows";

const handler = serve({
    workflows: [testWorkflow]
});

export { handler as action, handler as loader };
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/remix\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/remix\#create-your-workflow-definition)

Add a `novu` folder in your app folder as such `app/novu/workflows.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/remix\#start-your-application)

To start your Remix server with the Novu Endpoint configured, run the following command:

```
cd my-novu-app && npm run dev
```

Remix application default port is 5173. For that to work, restart Novu Studio and point it to the right port:

```
npx novu@latest dev --port <YOUR_REMIX_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/remix\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/remix\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/remix.mdx)

[Previous\\
\\
Nuxt](https://docs.novu.co/framework/quickstart/nuxt) [Next\\
\\
SvelteKit](https://docs.novu.co/framework/quickstart/svelte)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/remix#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/remix#install-packages) [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/remix#add-a-novu-api-endpoint) [Configure your secret key](https://docs.novu.co/framework/quickstart/remix#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/remix#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/remix#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/remix#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/remix#deploy-your-application)

## Novu SvelteKit Setup
Quickstart

# SvelteKit Quickstart

Get started with Novu Framework in a SvelteKit application

In this guide, we will add a Novu [Bridge Endpoint](https://docs.novu.co/platform/concepts/endpoint) to a Svelte application and send our first test workflow.

### [Set up your local environment](https://docs.novu.co/framework/quickstart/svelte\#set-up-your-local-environment)

Start the Local Studio by running:

```
npx novu dev
```

The Local Studio will be available at: [http://localhost:2022](http://localhost:2022/). This is where you can preview and test your workflows.

### [Install packages](https://docs.novu.co/framework/quickstart/svelte\#install-packages)

Install the Novu Framework package:

```
npm install @novu/framework
```

This package provides all the necessary tools to build and manage your notification workflows.

### [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/svelte\#add-a-novu-api-endpoint)

```
import { testWorkflow } from '$lib/novu/workflows';
import { serve } from '@novu/framework/sveltekit';

export const { GET, POST, OPTIONS } = serve({ workflows: [testWorkflow] });
```

### [Configure your secret key](https://docs.novu.co/framework/quickstart/svelte\#configure-your-secret-key)

.env

```
NOVU_SECRET_KEY=your_secret_key
```

### [Create your workflow definition](https://docs.novu.co/framework/quickstart/svelte\#create-your-workflow-definition)

Add a `novu` folder in your lib folder as such `src/lib/novu/workflows.ts` that will contain your workflow definitions.

app/novu/workflows.ts

```
import { workflow } from '@novu/framework';

export const testWorkflow = workflow('test-workflow', async ({ step }) => {
  await step.email('test-email', async () => {
    return {
      subject: 'Test Email',
      body: 'This is a test email from Novu Framework!',
    };
  });
});
```

### [Start your application](https://docs.novu.co/framework/quickstart/svelte\#start-your-application)

To start your Svelte server with the Novu Endpoint configured, run the following command:

```
cd my-novu-app && npm run dev
```

Svelte application default port is 5173. For that to work, restart Novu Studio and point it to the right port:

```
npx novu@latest dev --port <YOUR_SVELTE_APPLICATION_PORT>
```

### [Test your endpoint](https://docs.novu.co/framework/quickstart/svelte\#test-your-endpoint)

Test your workflow by triggering it from the Local Studio or using the Novu API:

```
curl -X  POST https://api.novu.co/v1/events/trigger   -H 'Authorization: ApiKey YOUR_API_KEY'    -H 'Content-Type: application/json'    -d '{
    "name": "my-workflow",
    "to": "subscriber-id",
    "payload": {}
  }'
```

You should see the notification being processed in your Local Studio.

### [Deploy your application](https://docs.novu.co/framework/quickstart/svelte\#deploy-your-application)

Deploy your application to your preferred hosting provider. Make sure the `/api/novu` endpoint is accessible from the internet.

For local development and testing, you can use tools like ngrok to expose your local server to the internet.

Now that you have your first workflow running, you can:

- Learn about [Workflow Controls](https://docs.novu.co/framework/controls) to expose no-code editing capabilities
- Explore different [Channel Steps](https://docs.novu.co/framework/email-channel) like Email, SMS, Push, and more
- Set up [Action Steps](https://docs.novu.co/framework/digest) like Delay and Digest
- Check out our [React Email integration](https://docs.novu.co/framework/content/react-email) for building beautiful email templates

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/svelte.mdx)

[Previous\\
\\
Remix](https://docs.novu.co/framework/quickstart/remix) [Next\\
\\
Studio](https://docs.novu.co/framework/studio)

### On this page

[Set up your local environment](https://docs.novu.co/framework/quickstart/svelte#set-up-your-local-environment) [Install packages](https://docs.novu.co/framework/quickstart/svelte#install-packages) [Add a Novu API Endpoint](https://docs.novu.co/framework/quickstart/svelte#add-a-novu-api-endpoint) [Configure your secret key](https://docs.novu.co/framework/quickstart/svelte#configure-your-secret-key) [Create your workflow definition](https://docs.novu.co/framework/quickstart/svelte#create-your-workflow-definition) [Start your application](https://docs.novu.co/framework/quickstart/svelte#start-your-application) [Test your endpoint](https://docs.novu.co/framework/quickstart/svelte#test-your-endpoint) [Deploy your application](https://docs.novu.co/framework/quickstart/svelte#deploy-your-application)

## JSON Schema Overview
# JSON Schema

JSON Schema can be used to define the [workflow payload](https://docs.novu.co/framework/payload) and [step inputs](https://docs.novu.co/framework/steps).
It provides a strongly-typed way to define the structure of the data that is expected by the workflow or Step.
And also as a contract for changing the workflow behaviour using the Platform User Interface.

Learn more about JSON schema at [json-schema.org](https://json-schema.org/).

## [Examples](https://docs.novu.co/framework/schema/json-schema\#examples)

### [Simple](https://docs.novu.co/framework/schema/json-schema\#simple)

```
{
  "type": "object",
  "required": ["firstName", "lastName"],
  "properties": {
    "firstName": {
      "type": "string",
      "title": "First name",
      "default": "Chuck"
    },
    "lastName": {
      "type": "string",
      "title": "Last name"
    },
    "age": {
      "type": "integer",
      "title": "Age"
    }
  }
}
```

### [Nested array structure](https://docs.novu.co/framework/schema/json-schema\#nested-array-structure)

```
{
  "type": "object",
  "required": ["title"],
  "properties": {
    "title": {
      "type": "string",
      "title": "Task list title"
    },
    "tasks": {
      "type": "array",
      "title": "Tasks",
      "items": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "A sample title"
          },
          "details": {
            "type": "string",
            "title": "Task details",
            "description": "Enter the task details"
          },
          "done": {
            "type": "boolean",
            "title": "Done?",
            "default": false
          }
        }
      }
    }
  }
}
```

### [Reference and reuse blocks](https://docs.novu.co/framework/schema/json-schema\#reference-and-reuse-blocks)

```
{
  "definitions": {
    "address": {
      "type": "object",
      "properties": {
        "street_address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      },
      "required": ["street_address", "city", "state"]
    },
    "node": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/node"
          }
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "billing_address": {
      "title": "Billing address",
      "$ref": "#/definitions/address"
    },
    "shipping_address": {
      "title": "Shipping address",
      "$ref": "#/definitions/address"
    },
    "tree": {
      "title": "Recursive references",
      "$ref": "#/definitions/node"
    }
  }
}
```

### [Any of schemas](https://docs.novu.co/framework/schema/json-schema\#any-of-schemas)

```
{
  "type": "object",
  "properties": {
    "age": {
      "type": "integer",
      "title": "Age"
    },
    "items": {
      "type": "array",
      "items": {
        "type": "object",
        "anyOf": [\
          {\
            "properties": {\
              "foo": {\
                "type": "string"\
              }\
            }\
          },\
          {\
            "properties": {\
              "bar": {\
                "type": "string"\
              }\
            }\
          }\
        ]
      }
    }
  },
  "anyOf": [\
    {\
      "title": "First method of identification",\
      "properties": {\
        "firstName": {\
          "type": "string",\
          "title": "First name",\
          "default": "Chuck"\
        },\
        "lastName": {\
          "type": "string",\
          "title": "Last name"\
        }\
      }\
    },\
    {\
      "title": "Second method of identification",\
      "properties": {\
        "idCode": {\
          "type": "string",\
          "title": "ID code"\
        }\
      }\
    }\
  ]
}
```

### [One of schema](https://docs.novu.co/framework/schema/json-schema\#one-of-schema)

```
{
  "type": "object",
  "oneOf": [\
    {\
      "properties": {\
        "lorem": {\
          "type": "string"\
        }\
      },\
      "required": ["lorem"]\
    },\
    {\
      "properties": {\
        "ipsum": {\
          "type": "string"\
        }\
      },\
      "required": ["ipsum"]\
    }\
  ]
}
```

### [If then else](https://docs.novu.co/framework/schema/json-schema\#if-then-else)

```
{
  "type": "object",
  "properties": {
    "animal": {
      "enum": ["Cat", "Fish"]
    }
  },
  "allOf": [\
    {\
      "if": {\
        "properties": {\
          "animal": {\
            "const": "Cat"\
          }\
        }\
      },\
      "then": {\
        "properties": {\
          "food": {\
            "type": "string",\
            "enum": ["meat", "grass", "fish"]\
          }\
        },\
        "required": ["food"]\
      }\
    },\
    {\
      "if": {\
        "properties": {\
          "animal": {\
            "const": "Fish"\
          }\
        }\
      },\
      "then": {\
        "properties": {\
          "food": {\
            "type": "string",\
            "enum": ["insect", "worms"]\
          },\
          "water": {\
            "type": "string",\
            "enum": ["lake", "sea"]\
          }\
        },\
        "required": ["food", "water"]\
      }\
    },\
    {\
      "required": ["animal"]\
    }\
  ]
}
```

### [Enum objects](https://docs.novu.co/framework/schema/json-schema\#enum-objects)

```
{
  "definitions": {
    "locations": {
      "enumNames": ["New York", "Amsterdam", "Hong Kong"],
      "enum": [\
        {\
          "name": "New York",\
          "lat": 40,\
          "lon": 74\
        },\
        {\
          "name": "Amsterdam",\
          "lat": 52,\
          "lon": 5\
        },\
        {\
          "name": "Hong Kong",\
          "lat": 22,\
          "lon": 114\
        }\
      ]
    }
  },
  "type": "object",
  "properties": {
    "location": {
      "title": "Location",
      "$ref": "#/definitions/locations"
    },
    "locationRadio": {
      "title": "Location Radio",
      "$ref": "#/definitions/locations"
    },
    "multiSelect": {
      "title": "Locations",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/locations"
      }
    },
    "checkboxes": {
      "title": "Locations Checkboxes",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/locations"
      }
    }
  }
}
```

### [Regex validation](https://docs.novu.co/framework/schema/json-schema\#regex-validation)

The following example matches a simple North American telephone number with an optional area code:

```
{
  "type": "object",
  "properties": {
    "phone": {
      "type": "string",
      "pattern": "^(\\([0-9]{3}\\))?[0-9]{3}-[0-9]{4}$"
    }
  }
}
```

## [Other resources](https://docs.novu.co/framework/schema/json-schema\#other-resources)

- [Examples](https://json-schema.org/learn/miscellaneous-examples)
- [React JSON schema](https://rjsf-team.github.io/react-jsonschema-form/)
- [JSON schema validator](https://www.jsonschemavalidator.net/)
- [JSON schema lint](https://jsonschemalint.com/)

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx)

[Previous\\
\\
SMS](https://docs.novu.co/framework/typescript/steps/sms) [Next\\
\\
Integrate Zod](https://docs.novu.co/framework/schema/zod)

### On this page

[Examples](https://docs.novu.co/framework/schema/json-schema#examples) [Simple](https://docs.novu.co/framework/schema/json-schema#simple) [Nested array structure](https://docs.novu.co/framework/schema/json-schema#nested-array-structure) [Reference and reuse blocks](https://docs.novu.co/framework/schema/json-schema#reference-and-reuse-blocks) [Any of schemas](https://docs.novu.co/framework/schema/json-schema#any-of-schemas) [One of schema](https://docs.novu.co/framework/schema/json-schema#one-of-schema) [If then else](https://docs.novu.co/framework/schema/json-schema#if-then-else) [Enum objects](https://docs.novu.co/framework/schema/json-schema#enum-objects) [Regex validation](https://docs.novu.co/framework/schema/json-schema#regex-validation) [Other resources](https://docs.novu.co/framework/schema/json-schema#other-resources)

## Integrate Zod
# Integrate Zod

Learn how to integrate Zod with Novu Framework

Novu Framework allows you to use [Zod](https://zod.dev/) to define the [Control](https://docs.novu.co/framework/controls) and [Payload](https://docs.novu.co/framework/payload) schemas for your workflows.

## [Add Zod to your project](https://docs.novu.co/framework/schema/zod\#add-zod-to-your-project)

Install Zod Packages

```
npm install zod
```

Use Zod in your workflow

```
import { workflow } from '@novu/framework';
import { z } from 'zod';

export const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {
    await step.email('send-email', async (controls) => {
        return {
            subject: controls.subject,
            body: 'Hello World',
        };
    },
    {
        controlSchema: z.object({
            subject: z.string().default('A Successful Test on Novu from {{userName}}'),
        }),
    });
}, {
    payloadSchema: z.object({
        userName: z.string().default('John Doe'),
    }),
});
```

## [Controls and Payload UI](https://docs.novu.co/framework/schema/zod\#controls-and-payload-ui)

When you define a `controlSchema` for a step, Novu will automatically generate a UI for the controls in the workflow editor.

- **Form Input Title** \- Will be derived from the key of the Zod schema. Unfortunately Zod does not support custom titles at this point.
- **Form Input Type** \- Will be derived from the Zod schema type, with support for `string`, `number`, `boolean`, and `enum` and `array` types.
- **Default Value** \- Will be derived from the Zod schema default value.
- **Validation** \- Will be derived from the Zod schema validation rules, including `min`, `max`, `email`, `url`, `regex` and etc...

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/zod.mdx)

[Previous\\
\\
JSON Schema](https://docs.novu.co/framework/schema/json-schema) [Next\\
\\
Production Deployment Guide](https://docs.novu.co/framework/deployment/production)

### On this page

[Add Zod to your project](https://docs.novu.co/framework/schema/zod#add-zod-to-your-project) [Controls and Payload UI](https://docs.novu.co/framework/schema/zod#controls-and-payload-ui)

## Novu Framework Client
# Novu Framework Client

Learn how to configure and use the Novu Framework Client for managing global settings

The `Client` is an optional Class you can pass to the `serve` function to override some global settings.
By default, we will inject a new instance of the `Client` class in your `serve` method with the following defaults:

## [Client Interface](https://docs.novu.co/framework/typescript/client\#client-interface)

### [secretKey](https://docs.novu.co/framework/typescript/client\#secretkey)

- **Type**: `string`
- **Default**: `process.env.NOVU_SECRET_KEY`
- **Description**: Your Novu Secret Key, used to sign the HMAC header to guarantee the authenticity of our requests.

### [strictAuthentication](https://docs.novu.co/framework/typescript/client\#strictauthentication)

- **Type**: `boolean`
- **Default**: `process.env.NODE_ENV !== 'development'`
- **Description**: This bypasses the HMAC signature verification, required for local development and testing against [Local Studio](https://docs.novu.co/framework/studio).

## [Environment Variables](https://docs.novu.co/framework/typescript/client\#environment-variables)

Unless specified in the `Client` constructor the `Client` class will look for the following environment variables:

- `NOVU_SECRET_KEY` \- Your Novu Secret Key
- `NOVU_API_URL` \- Defaults to `https://api.novu.co`. For EU customers, this should be set to `https://eu.api.novu.co`.

## [Development Environment](https://docs.novu.co/framework/typescript/client\#development-environment)

When your service is running in development mode `process.env.NODE_ENV=development`, the following rules will auto apply:

- `strictAuthentication` will be set to `false`.

## [Code Example](https://docs.novu.co/framework/typescript/client\#code-example)

```
import { Client as NovuFrameworkClient } from '@novu/framework';
import { serve } from '@novu/framework/next';
import { passwordResetWorkflow } from './workflows';

export const { GET, POST, OPTIONS } = serve({
  client: new NovuFrameworkClient({
    secretKey: process.env.NOVU_SECRET_KEY,
    strictAuthentication: false,
  }),
  workflows: [\
    /* all workflows */\
    passwordResetWorkflow,\
  ],
});
```

[Edit on GitHub](https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/client.mdx)

[Previous\\
\\
Overview](https://docs.novu.co/framework/typescript/overview) [Next\\
\\
Workflow](https://docs.novu.co/framework/typescript/workflow)

### On this page

[Client Interface](https://docs.novu.co/framework/typescript/client#client-interface) [secretKey](https://docs.novu.co/framework/typescript/client#secretkey) [strictAuthentication](https://docs.novu.co/framework/typescript/client#strictauthentication) [Environment Variables](https://docs.novu.co/framework/typescript/client#environment-variables) [Development Environment](https://docs.novu.co/framework/typescript/client#development-environment) [Code Example](https://docs.novu.co/framework/typescript/client#code-example)

